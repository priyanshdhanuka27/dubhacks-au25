'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var eventstreamSerdeConfigResolver = require('@smithy/eventstream-serde-config-resolver');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "bedrock",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class BedrockAgentRuntimeClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = eventstreamSerdeConfigResolver.resolveEventStreamSerdeConfig(_config_6);
        const _config_8 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_7);
        const _config_9 = resolveRuntimeExtensions(_config_8, configuration?.extensions || []);
        this.config = _config_9;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultBedrockAgentRuntimeHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class BedrockAgentRuntimeServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, BedrockAgentRuntimeServiceException.prototype);
    }
}

class AccessDeniedException extends BedrockAgentRuntimeServiceException {
    name = "AccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
const CustomControlMethod = {
    RETURN_CONTROL: "RETURN_CONTROL",
};
exports.ActionGroupExecutor = void 0;
(function (ActionGroupExecutor) {
    ActionGroupExecutor.visit = (value, visitor) => {
        if (value.lambda !== undefined)
            return visitor.lambda(value.lambda);
        if (value.customControl !== undefined)
            return visitor.customControl(value.customControl);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.ActionGroupExecutor || (exports.ActionGroupExecutor = {}));
const ExecutionType = {
    LAMBDA: "LAMBDA",
    RETURN_CONTROL: "RETURN_CONTROL",
};
const ActionGroupSignature = {
    AMAZON_CODEINTERPRETER: "AMAZON.CodeInterpreter",
    AMAZON_USERINPUT: "AMAZON.UserInput",
    ANTHROPIC_BASH: "ANTHROPIC.Bash",
    ANTHROPIC_COMPUTER: "ANTHROPIC.Computer",
    ANTHROPIC_TEXTEDITOR: "ANTHROPIC.TextEditor",
};
const ActionInvocationType = {
    RESULT: "RESULT",
    USER_CONFIRMATION: "USER_CONFIRMATION",
    USER_CONFIRMATION_AND_RESULT: "USER_CONFIRMATION_AND_RESULT",
};
exports.APISchema = void 0;
(function (APISchema) {
    APISchema.visit = (value, visitor) => {
        if (value.s3 !== undefined)
            return visitor.s3(value.s3);
        if (value.payload !== undefined)
            return visitor.payload(value.payload);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.APISchema || (exports.APISchema = {}));
const ParameterType = {
    ARRAY: "array",
    BOOLEAN: "boolean",
    INTEGER: "integer",
    NUMBER: "number",
    STRING: "string",
};
const RequireConfirmation = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
exports.FunctionSchema = void 0;
(function (FunctionSchema) {
    FunctionSchema.visit = (value, visitor) => {
        if (value.functions !== undefined)
            return visitor.functions(value.functions);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FunctionSchema || (exports.FunctionSchema = {}));
const AgentCollaboration = {
    DISABLED: "DISABLED",
    SUPERVISOR: "SUPERVISOR",
    SUPERVISOR_ROUTER: "SUPERVISOR_ROUTER",
};
const ConfirmationState = {
    CONFIRM: "CONFIRM",
    DENY: "DENY",
};
const ImageInputFormat = {
    GIF: "gif",
    JPEG: "jpeg",
    PNG: "png",
    WEBP: "webp",
};
exports.ImageInputSource = void 0;
(function (ImageInputSource) {
    ImageInputSource.visit = (value, visitor) => {
        if (value.bytes !== undefined)
            return visitor.bytes(value.bytes);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.ImageInputSource || (exports.ImageInputSource = {}));
const ResponseState = {
    FAILURE: "FAILURE",
    REPROMPT: "REPROMPT",
};
exports.InvocationResultMember = void 0;
(function (InvocationResultMember) {
    InvocationResultMember.visit = (value, visitor) => {
        if (value.apiResult !== undefined)
            return visitor.apiResult(value.apiResult);
        if (value.functionResult !== undefined)
            return visitor.functionResult(value.functionResult);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.InvocationResultMember || (exports.InvocationResultMember = {}));
const PayloadType = {
    RETURN_CONTROL: "RETURN_CONTROL",
    TEXT: "TEXT",
};
exports.InvocationInputMember = void 0;
(function (InvocationInputMember) {
    InvocationInputMember.visit = (value, visitor) => {
        if (value.apiInvocationInput !== undefined)
            return visitor.apiInvocationInput(value.apiInvocationInput);
        if (value.functionInvocationInput !== undefined)
            return visitor.functionInvocationInput(value.functionInvocationInput);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.InvocationInputMember || (exports.InvocationInputMember = {}));
exports.Caller = void 0;
(function (Caller) {
    Caller.visit = (value, visitor) => {
        if (value.agentAliasArn !== undefined)
            return visitor.agentAliasArn(value.agentAliasArn);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.Caller || (exports.Caller = {}));
const GuardrailAction = {
    INTERVENED: "INTERVENED",
    NONE: "NONE",
};
const GuardrailContentPolicyAction = {
    BLOCKED: "BLOCKED",
};
const GuardrailContentFilterConfidence = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    NONE: "NONE",
};
const GuardrailContentFilterType = {
    HATE: "HATE",
    INSULTS: "INSULTS",
    MISCONDUCT: "MISCONDUCT",
    PROMPT_ATTACK: "PROMPT_ATTACK",
    SEXUAL: "SEXUAL",
    VIOLENCE: "VIOLENCE",
};
const GuardrailSensitiveInformationPolicyAction = {
    ANONYMIZED: "ANONYMIZED",
    BLOCKED: "BLOCKED",
};
const GuardrailPiiEntityType = {
    ADDRESS: "ADDRESS",
    AGE: "AGE",
    AWS_ACCESS_KEY: "AWS_ACCESS_KEY",
    AWS_SECRET_KEY: "AWS_SECRET_KEY",
    CA_HEALTH_NUMBER: "CA_HEALTH_NUMBER",
    CA_SOCIAL_INSURANCE_NUMBER: "CA_SOCIAL_INSURANCE_NUMBER",
    CREDIT_DEBIT_CARD_CVV: "CREDIT_DEBIT_CARD_CVV",
    CREDIT_DEBIT_CARD_EXPIRY: "CREDIT_DEBIT_CARD_EXPIRY",
    CREDIT_DEBIT_CARD_NUMBER: "CREDIT_DEBIT_CARD_NUMBER",
    DRIVER_ID: "DRIVER_ID",
    EMAIL: "EMAIL",
    INTERNATIONAL_BANK_ACCOUNT_NUMBER: "INTERNATIONAL_BANK_ACCOUNT_NUMBER",
    IP_ADDRESS: "IP_ADDRESS",
    LICENSE_PLATE: "LICENSE_PLATE",
    MAC_ADDRESS: "MAC_ADDRESS",
    NAME: "NAME",
    PASSWORD: "PASSWORD",
    PHONE: "PHONE",
    PIN: "PIN",
    SWIFT_CODE: "SWIFT_CODE",
    UK_NATIONAL_HEALTH_SERVICE_NUMBER: "UK_NATIONAL_HEALTH_SERVICE_NUMBER",
    UK_NATIONAL_INSURANCE_NUMBER: "UK_NATIONAL_INSURANCE_NUMBER",
    UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER: "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER",
    URL: "URL",
    USERNAME: "USERNAME",
    US_BANK_ACCOUNT_NUMBER: "US_BANK_ACCOUNT_NUMBER",
    US_BANK_ROUTING_NUMBER: "US_BANK_ROUTING_NUMBER",
    US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER: "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER",
    US_PASSPORT_NUMBER: "US_PASSPORT_NUMBER",
    US_SOCIAL_SECURITY_NUMBER: "US_SOCIAL_SECURITY_NUMBER",
    VEHICLE_IDENTIFICATION_NUMBER: "VEHICLE_IDENTIFICATION_NUMBER",
};
const GuardrailTopicPolicyAction = {
    BLOCKED: "BLOCKED",
};
const GuardrailTopicType = {
    DENY: "DENY",
};
const GuardrailWordPolicyAction = {
    BLOCKED: "BLOCKED",
};
const GuardrailManagedWordType = {
    PROFANITY: "PROFANITY",
};
const InvocationType = {
    ACTION_GROUP: "ACTION_GROUP",
    ACTION_GROUP_CODE_INTERPRETER: "ACTION_GROUP_CODE_INTERPRETER",
    AGENT_COLLABORATOR: "AGENT_COLLABORATOR",
    FINISH: "FINISH",
    KNOWLEDGE_BASE: "KNOWLEDGE_BASE",
};
const CreationMode = {
    DEFAULT: "DEFAULT",
    OVERRIDDEN: "OVERRIDDEN",
};
const PromptType = {
    KNOWLEDGE_BASE_RESPONSE_GENERATION: "KNOWLEDGE_BASE_RESPONSE_GENERATION",
    ORCHESTRATION: "ORCHESTRATION",
    POST_PROCESSING: "POST_PROCESSING",
    PRE_PROCESSING: "PRE_PROCESSING",
    ROUTING_CLASSIFIER: "ROUTING_CLASSIFIER",
};
exports.ReasoningContentBlock = void 0;
(function (ReasoningContentBlock) {
    ReasoningContentBlock.visit = (value, visitor) => {
        if (value.reasoningText !== undefined)
            return visitor.reasoningText(value.reasoningText);
        if (value.redactedContent !== undefined)
            return visitor.redactedContent(value.redactedContent);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.ReasoningContentBlock || (exports.ReasoningContentBlock = {}));
const RetrievalResultContentColumnType = {
    BLOB: "BLOB",
    BOOLEAN: "BOOLEAN",
    DOUBLE: "DOUBLE",
    LONG: "LONG",
    NULL: "NULL",
    STRING: "STRING",
};
const RetrievalResultContentType = {
    IMAGE: "IMAGE",
    ROW: "ROW",
    TEXT: "TEXT",
};
const RetrievalResultLocationType = {
    CONFLUENCE: "CONFLUENCE",
    CUSTOM: "CUSTOM",
    KENDRA: "KENDRA",
    S3: "S3",
    SALESFORCE: "SALESFORCE",
    SHAREPOINT: "SHAREPOINT",
    SQL: "SQL",
    WEB: "WEB",
};
const Source = {
    ACTION_GROUP: "ACTION_GROUP",
    KNOWLEDGE_BASE: "KNOWLEDGE_BASE",
    PARSER: "PARSER",
};
const Type = {
    ACTION_GROUP: "ACTION_GROUP",
    AGENT_COLLABORATOR: "AGENT_COLLABORATOR",
    ASK_USER: "ASK_USER",
    FINISH: "FINISH",
    KNOWLEDGE_BASE: "KNOWLEDGE_BASE",
    REPROMPT: "REPROMPT",
};
exports.OrchestrationTrace = void 0;
(function (OrchestrationTrace) {
    OrchestrationTrace.visit = (value, visitor) => {
        if (value.rationale !== undefined)
            return visitor.rationale(value.rationale);
        if (value.invocationInput !== undefined)
            return visitor.invocationInput(value.invocationInput);
        if (value.observation !== undefined)
            return visitor.observation(value.observation);
        if (value.modelInvocationInput !== undefined)
            return visitor.modelInvocationInput(value.modelInvocationInput);
        if (value.modelInvocationOutput !== undefined)
            return visitor.modelInvocationOutput(value.modelInvocationOutput);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.OrchestrationTrace || (exports.OrchestrationTrace = {}));
exports.PostProcessingTrace = void 0;
(function (PostProcessingTrace) {
    PostProcessingTrace.visit = (value, visitor) => {
        if (value.modelInvocationInput !== undefined)
            return visitor.modelInvocationInput(value.modelInvocationInput);
        if (value.modelInvocationOutput !== undefined)
            return visitor.modelInvocationOutput(value.modelInvocationOutput);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.PostProcessingTrace || (exports.PostProcessingTrace = {}));
exports.PreProcessingTrace = void 0;
(function (PreProcessingTrace) {
    PreProcessingTrace.visit = (value, visitor) => {
        if (value.modelInvocationInput !== undefined)
            return visitor.modelInvocationInput(value.modelInvocationInput);
        if (value.modelInvocationOutput !== undefined)
            return visitor.modelInvocationOutput(value.modelInvocationOutput);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.PreProcessingTrace || (exports.PreProcessingTrace = {}));
exports.RoutingClassifierTrace = void 0;
(function (RoutingClassifierTrace) {
    RoutingClassifierTrace.visit = (value, visitor) => {
        if (value.invocationInput !== undefined)
            return visitor.invocationInput(value.invocationInput);
        if (value.observation !== undefined)
            return visitor.observation(value.observation);
        if (value.modelInvocationInput !== undefined)
            return visitor.modelInvocationInput(value.modelInvocationInput);
        if (value.modelInvocationOutput !== undefined)
            return visitor.modelInvocationOutput(value.modelInvocationOutput);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.RoutingClassifierTrace || (exports.RoutingClassifierTrace = {}));
exports.Trace = void 0;
(function (Trace) {
    Trace.visit = (value, visitor) => {
        if (value.guardrailTrace !== undefined)
            return visitor.guardrailTrace(value.guardrailTrace);
        if (value.preProcessingTrace !== undefined)
            return visitor.preProcessingTrace(value.preProcessingTrace);
        if (value.orchestrationTrace !== undefined)
            return visitor.orchestrationTrace(value.orchestrationTrace);
        if (value.postProcessingTrace !== undefined)
            return visitor.postProcessingTrace(value.postProcessingTrace);
        if (value.routingClassifierTrace !== undefined)
            return visitor.routingClassifierTrace(value.routingClassifierTrace);
        if (value.failureTrace !== undefined)
            return visitor.failureTrace(value.failureTrace);
        if (value.customOrchestrationTrace !== undefined)
            return visitor.customOrchestrationTrace(value.customOrchestrationTrace);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.Trace || (exports.Trace = {}));
class InternalServerException extends BedrockAgentRuntimeServiceException {
    name = "InternalServerException";
    $fault = "server";
    reason;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.reason = opts.reason;
    }
}
class ResourceNotFoundException extends BedrockAgentRuntimeServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
class ThrottlingException extends BedrockAgentRuntimeServiceException {
    name = "ThrottlingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
class ValidationException extends BedrockAgentRuntimeServiceException {
    name = "ValidationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
const FlowExecutionErrorType = {
    TIMED_OUT: "ExecutionTimedOut",
};
const FlowExecutionStatus = {
    ABORTED: "Aborted",
    FAILED: "Failed",
    RUNNING: "Running",
    SUCCEEDED: "Succeeded",
    TIMED_OUT: "TimedOut",
};
const FlowExecutionEventType = {
    FLOW: "Flow",
    NODE: "Node",
};
const FlowErrorCode = {
    INTERNAL_SERVER: "INTERNAL_SERVER",
    NODE_EXECUTION_FAILED: "NODE_EXECUTION_FAILED",
    VALIDATION: "VALIDATION",
};
exports.FlowExecutionContent = void 0;
(function (FlowExecutionContent) {
    FlowExecutionContent.visit = (value, visitor) => {
        if (value.document !== undefined)
            return visitor.document(value.document);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FlowExecutionContent || (exports.FlowExecutionContent = {}));
exports.NodeTraceElements = void 0;
(function (NodeTraceElements) {
    NodeTraceElements.visit = (value, visitor) => {
        if (value.agentTraces !== undefined)
            return visitor.agentTraces(value.agentTraces);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.NodeTraceElements || (exports.NodeTraceElements = {}));
const NodeErrorCode = {
    BAD_GATEWAY: "BAD_GATEWAY",
    DEPENDENCY_FAILED: "DEPENDENCY_FAILED",
    INTERNAL_SERVER: "INTERNAL_SERVER",
    VALIDATION: "VALIDATION",
};
const FlowNodeInputCategory = {
    EXIT_LOOP: "ExitLoop",
    LOOP_CONDITION: "LoopCondition",
    RETURN_VALUE_TO_LOOP_START: "ReturnValueToLoopStart",
};
exports.NodeExecutionContent = void 0;
(function (NodeExecutionContent) {
    NodeExecutionContent.visit = (value, visitor) => {
        if (value.document !== undefined)
            return visitor.document(value.document);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.NodeExecutionContent || (exports.NodeExecutionContent = {}));
const FlowControlNodeType = {
    ITERATOR: "Iterator",
    LOOP: "Loop",
};
const FlowNodeIODataType = {
    ARRAY: "Array",
    BOOLEAN: "Boolean",
    NUMBER: "Number",
    OBJECT: "Object",
    STRING: "String",
};
exports.FlowExecutionEvent = void 0;
(function (FlowExecutionEvent) {
    FlowExecutionEvent.visit = (value, visitor) => {
        if (value.flowInputEvent !== undefined)
            return visitor.flowInputEvent(value.flowInputEvent);
        if (value.flowOutputEvent !== undefined)
            return visitor.flowOutputEvent(value.flowOutputEvent);
        if (value.nodeInputEvent !== undefined)
            return visitor.nodeInputEvent(value.nodeInputEvent);
        if (value.nodeOutputEvent !== undefined)
            return visitor.nodeOutputEvent(value.nodeOutputEvent);
        if (value.conditionResultEvent !== undefined)
            return visitor.conditionResultEvent(value.conditionResultEvent);
        if (value.nodeFailureEvent !== undefined)
            return visitor.nodeFailureEvent(value.nodeFailureEvent);
        if (value.flowFailureEvent !== undefined)
            return visitor.flowFailureEvent(value.flowFailureEvent);
        if (value.nodeActionEvent !== undefined)
            return visitor.nodeActionEvent(value.nodeActionEvent);
        if (value.nodeDependencyEvent !== undefined)
            return visitor.nodeDependencyEvent(value.nodeDependencyEvent);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FlowExecutionEvent || (exports.FlowExecutionEvent = {}));
class BadGatewayException extends BedrockAgentRuntimeServiceException {
    name = "BadGatewayException";
    $fault = "server";
    resourceName;
    constructor(opts) {
        super({
            name: "BadGatewayException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, BadGatewayException.prototype);
        this.resourceName = opts.resourceName;
    }
}
class ConflictException extends BedrockAgentRuntimeServiceException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
class DependencyFailedException extends BedrockAgentRuntimeServiceException {
    name = "DependencyFailedException";
    $fault = "client";
    resourceName;
    constructor(opts) {
        super({
            name: "DependencyFailedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DependencyFailedException.prototype);
        this.resourceName = opts.resourceName;
    }
}
class ServiceQuotaExceededException extends BedrockAgentRuntimeServiceException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
exports.FlowInputContent = void 0;
(function (FlowInputContent) {
    FlowInputContent.visit = (value, visitor) => {
        if (value.document !== undefined)
            return visitor.document(value.document);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FlowInputContent || (exports.FlowInputContent = {}));
const PerformanceConfigLatency = {
    OPTIMIZED: "optimized",
    STANDARD: "standard",
};
const FlowCompletionReason = {
    INPUT_REQUIRED: "INPUT_REQUIRED",
    SUCCESS: "SUCCESS",
};
exports.FlowMultiTurnInputContent = void 0;
(function (FlowMultiTurnInputContent) {
    FlowMultiTurnInputContent.visit = (value, visitor) => {
        if (value.document !== undefined)
            return visitor.document(value.document);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FlowMultiTurnInputContent || (exports.FlowMultiTurnInputContent = {}));
const NodeType = {
    CONDITION_NODE: "ConditionNode",
    FLOW_INPUT_NODE: "FlowInputNode",
    FLOW_OUTPUT_NODE: "FlowOutputNode",
    KNOWLEDGE_BASE_NODE: "KnowledgeBaseNode",
    LAMBDA_FUNCTION_NODE: "LambdaFunctionNode",
    LEX_NODE: "LexNode",
    PROMPT_NODE: "PromptNode",
};
exports.FlowOutputContent = void 0;
(function (FlowOutputContent) {
    FlowOutputContent.visit = (value, visitor) => {
        if (value.document !== undefined)
            return visitor.document(value.document);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FlowOutputContent || (exports.FlowOutputContent = {}));
exports.TraceElements = void 0;
(function (TraceElements) {
    TraceElements.visit = (value, visitor) => {
        if (value.agentTraces !== undefined)
            return visitor.agentTraces(value.agentTraces);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.TraceElements || (exports.TraceElements = {}));
exports.FlowTraceNodeInputContent = void 0;
(function (FlowTraceNodeInputContent) {
    FlowTraceNodeInputContent.visit = (value, visitor) => {
        if (value.document !== undefined)
            return visitor.document(value.document);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FlowTraceNodeInputContent || (exports.FlowTraceNodeInputContent = {}));
exports.FlowTraceNodeOutputContent = void 0;
(function (FlowTraceNodeOutputContent) {
    FlowTraceNodeOutputContent.visit = (value, visitor) => {
        if (value.document !== undefined)
            return visitor.document(value.document);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FlowTraceNodeOutputContent || (exports.FlowTraceNodeOutputContent = {}));
exports.FlowTrace = void 0;
(function (FlowTrace) {
    FlowTrace.visit = (value, visitor) => {
        if (value.nodeInputTrace !== undefined)
            return visitor.nodeInputTrace(value.nodeInputTrace);
        if (value.nodeOutputTrace !== undefined)
            return visitor.nodeOutputTrace(value.nodeOutputTrace);
        if (value.conditionNodeResultTrace !== undefined)
            return visitor.conditionNodeResultTrace(value.conditionNodeResultTrace);
        if (value.nodeActionTrace !== undefined)
            return visitor.nodeActionTrace(value.nodeActionTrace);
        if (value.nodeDependencyTrace !== undefined)
            return visitor.nodeDependencyTrace(value.nodeDependencyTrace);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FlowTrace || (exports.FlowTrace = {}));
exports.FlowResponseStream = void 0;
(function (FlowResponseStream) {
    FlowResponseStream.visit = (value, visitor) => {
        if (value.flowOutputEvent !== undefined)
            return visitor.flowOutputEvent(value.flowOutputEvent);
        if (value.flowCompletionEvent !== undefined)
            return visitor.flowCompletionEvent(value.flowCompletionEvent);
        if (value.flowTraceEvent !== undefined)
            return visitor.flowTraceEvent(value.flowTraceEvent);
        if (value.internalServerException !== undefined)
            return visitor.internalServerException(value.internalServerException);
        if (value.validationException !== undefined)
            return visitor.validationException(value.validationException);
        if (value.resourceNotFoundException !== undefined)
            return visitor.resourceNotFoundException(value.resourceNotFoundException);
        if (value.serviceQuotaExceededException !== undefined)
            return visitor.serviceQuotaExceededException(value.serviceQuotaExceededException);
        if (value.throttlingException !== undefined)
            return visitor.throttlingException(value.throttlingException);
        if (value.accessDeniedException !== undefined)
            return visitor.accessDeniedException(value.accessDeniedException);
        if (value.conflictException !== undefined)
            return visitor.conflictException(value.conflictException);
        if (value.dependencyFailedException !== undefined)
            return visitor.dependencyFailedException(value.dependencyFailedException);
        if (value.badGatewayException !== undefined)
            return visitor.badGatewayException(value.badGatewayException);
        if (value.flowMultiTurnInputRequestEvent !== undefined)
            return visitor.flowMultiTurnInputRequestEvent(value.flowMultiTurnInputRequestEvent);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FlowResponseStream || (exports.FlowResponseStream = {}));
const InputQueryType = {
    TEXT: "TEXT",
};
const QueryTransformationMode = {
    TEXT_TO_SQL: "TEXT_TO_SQL",
};
const TextToSqlConfigurationType = {
    KNOWLEDGE_BASE: "KNOWLEDGE_BASE",
};
const GeneratedQueryType = {
    REDSHIFT_SQL: "REDSHIFT_SQL",
};
exports.ContentBlock = void 0;
(function (ContentBlock) {
    ContentBlock.visit = (value, visitor) => {
        if (value.text !== undefined)
            return visitor.text(value.text);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.ContentBlock || (exports.ContentBlock = {}));
const ConversationRole = {
    ASSISTANT: "assistant",
    USER: "user",
};
const FileSourceType = {
    BYTE_CONTENT: "BYTE_CONTENT",
    S3: "S3",
};
const FileUseCase = {
    CHAT: "CHAT",
    CODE_INTERPRETER: "CODE_INTERPRETER",
};
const AttributeType = {
    BOOLEAN: "BOOLEAN",
    NUMBER: "NUMBER",
    STRING: "STRING",
    STRING_LIST: "STRING_LIST",
};
const SearchType = {
    HYBRID: "HYBRID",
    SEMANTIC: "SEMANTIC",
};
const RerankingMetadataSelectionMode = {
    ALL: "ALL",
    SELECTIVE: "SELECTIVE",
};
exports.RerankingMetadataSelectiveModeConfiguration = void 0;
(function (RerankingMetadataSelectiveModeConfiguration) {
    RerankingMetadataSelectiveModeConfiguration.visit = (value, visitor) => {
        if (value.fieldsToInclude !== undefined)
            return visitor.fieldsToInclude(value.fieldsToInclude);
        if (value.fieldsToExclude !== undefined)
            return visitor.fieldsToExclude(value.fieldsToExclude);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.RerankingMetadataSelectiveModeConfiguration || (exports.RerankingMetadataSelectiveModeConfiguration = {}));
const VectorSearchRerankingConfigurationType = {
    BEDROCK_RERANKING_MODEL: "BEDROCK_RERANKING_MODEL",
};
class ModelNotReadyException extends BedrockAgentRuntimeServiceException {
    name = "ModelNotReadyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ModelNotReadyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ModelNotReadyException.prototype);
    }
}
exports.ResponseStream = void 0;
(function (ResponseStream) {
    ResponseStream.visit = (value, visitor) => {
        if (value.chunk !== undefined)
            return visitor.chunk(value.chunk);
        if (value.trace !== undefined)
            return visitor.trace(value.trace);
        if (value.returnControl !== undefined)
            return visitor.returnControl(value.returnControl);
        if (value.internalServerException !== undefined)
            return visitor.internalServerException(value.internalServerException);
        if (value.validationException !== undefined)
            return visitor.validationException(value.validationException);
        if (value.resourceNotFoundException !== undefined)
            return visitor.resourceNotFoundException(value.resourceNotFoundException);
        if (value.serviceQuotaExceededException !== undefined)
            return visitor.serviceQuotaExceededException(value.serviceQuotaExceededException);
        if (value.throttlingException !== undefined)
            return visitor.throttlingException(value.throttlingException);
        if (value.accessDeniedException !== undefined)
            return visitor.accessDeniedException(value.accessDeniedException);
        if (value.conflictException !== undefined)
            return visitor.conflictException(value.conflictException);
        if (value.dependencyFailedException !== undefined)
            return visitor.dependencyFailedException(value.dependencyFailedException);
        if (value.badGatewayException !== undefined)
            return visitor.badGatewayException(value.badGatewayException);
        if (value.modelNotReadyException !== undefined)
            return visitor.modelNotReadyException(value.modelNotReadyException);
        if (value.files !== undefined)
            return visitor.files(value.files);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.ResponseStream || (exports.ResponseStream = {}));
const RelayConversationHistory = {
    DISABLED: "DISABLED",
    TO_COLLABORATOR: "TO_COLLABORATOR",
};
const PromptState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
exports.OrchestrationExecutor = void 0;
(function (OrchestrationExecutor) {
    OrchestrationExecutor.visit = (value, visitor) => {
        if (value.lambda !== undefined)
            return visitor.lambda(value.lambda);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.OrchestrationExecutor || (exports.OrchestrationExecutor = {}));
const OrchestrationType = {
    CUSTOM_ORCHESTRATION: "CUSTOM_ORCHESTRATION",
    DEFAULT: "DEFAULT",
};
exports.InlineAgentResponseStream = void 0;
(function (InlineAgentResponseStream) {
    InlineAgentResponseStream.visit = (value, visitor) => {
        if (value.chunk !== undefined)
            return visitor.chunk(value.chunk);
        if (value.trace !== undefined)
            return visitor.trace(value.trace);
        if (value.returnControl !== undefined)
            return visitor.returnControl(value.returnControl);
        if (value.internalServerException !== undefined)
            return visitor.internalServerException(value.internalServerException);
        if (value.validationException !== undefined)
            return visitor.validationException(value.validationException);
        if (value.resourceNotFoundException !== undefined)
            return visitor.resourceNotFoundException(value.resourceNotFoundException);
        if (value.serviceQuotaExceededException !== undefined)
            return visitor.serviceQuotaExceededException(value.serviceQuotaExceededException);
        if (value.throttlingException !== undefined)
            return visitor.throttlingException(value.throttlingException);
        if (value.accessDeniedException !== undefined)
            return visitor.accessDeniedException(value.accessDeniedException);
        if (value.conflictException !== undefined)
            return visitor.conflictException(value.conflictException);
        if (value.dependencyFailedException !== undefined)
            return visitor.dependencyFailedException(value.dependencyFailedException);
        if (value.badGatewayException !== undefined)
            return visitor.badGatewayException(value.badGatewayException);
        if (value.files !== undefined)
            return visitor.files(value.files);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.InlineAgentResponseStream || (exports.InlineAgentResponseStream = {}));
const MemoryType = {
    SESSION_SUMMARY: "SESSION_SUMMARY",
};
exports.Memory = void 0;
(function (Memory) {
    Memory.visit = (value, visitor) => {
        if (value.sessionSummary !== undefined)
            return visitor.sessionSummary(value.sessionSummary);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.Memory || (exports.Memory = {}));
exports.InputPrompt = void 0;
(function (InputPrompt) {
    InputPrompt.visit = (value, visitor) => {
        if (value.textPrompt !== undefined)
            return visitor.textPrompt(value.textPrompt);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.InputPrompt || (exports.InputPrompt = {}));
exports.OptimizedPrompt = void 0;
(function (OptimizedPrompt) {
    OptimizedPrompt.visit = (value, visitor) => {
        if (value.textPrompt !== undefined)
            return visitor.textPrompt(value.textPrompt);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.OptimizedPrompt || (exports.OptimizedPrompt = {}));
exports.OptimizedPromptStream = void 0;
(function (OptimizedPromptStream) {
    OptimizedPromptStream.visit = (value, visitor) => {
        if (value.optimizedPromptEvent !== undefined)
            return visitor.optimizedPromptEvent(value.optimizedPromptEvent);
        if (value.analyzePromptEvent !== undefined)
            return visitor.analyzePromptEvent(value.analyzePromptEvent);
        if (value.internalServerException !== undefined)
            return visitor.internalServerException(value.internalServerException);
        if (value.throttlingException !== undefined)
            return visitor.throttlingException(value.throttlingException);
        if (value.validationException !== undefined)
            return visitor.validationException(value.validationException);
        if (value.dependencyFailedException !== undefined)
            return visitor.dependencyFailedException(value.dependencyFailedException);
        if (value.accessDeniedException !== undefined)
            return visitor.accessDeniedException(value.accessDeniedException);
        if (value.badGatewayException !== undefined)
            return visitor.badGatewayException(value.badGatewayException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.OptimizedPromptStream || (exports.OptimizedPromptStream = {}));
const RerankQueryContentType = {
    TEXT: "TEXT",
};
const RerankingConfigurationType = {
    BEDROCK_RERANKING_MODEL: "BEDROCK_RERANKING_MODEL",
};
const RerankDocumentType = {
    JSON: "JSON",
    TEXT: "TEXT",
};
const RerankSourceType = {
    INLINE: "INLINE",
};
const ActionGroupInvocationInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.actionGroupName && { actionGroupName: smithyClient.SENSITIVE_STRING }),
    ...(obj.verb && { verb: smithyClient.SENSITIVE_STRING }),
    ...(obj.apiPath && { apiPath: smithyClient.SENSITIVE_STRING }),
    ...(obj.function && { function: smithyClient.SENSITIVE_STRING }),
});
const UsageFilterSensitiveLog = (obj) => ({
    ...obj,
});
const MetadataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.usage && { usage: smithyClient.SENSITIVE_STRING }),
});
const ActionGroupInvocationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithyClient.SENSITIVE_STRING }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
});
const APISchemaFilterSensitiveLog = (obj) => {
    if (obj.s3 !== undefined)
        return { s3: obj.s3 };
    if (obj.payload !== undefined)
        return { payload: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const FunctionDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.name && { name: smithyClient.SENSITIVE_STRING }),
});
const FunctionSchemaFilterSensitiveLog = (obj) => {
    if (obj.functions !== undefined)
        return { functions: obj.functions.map((item) => FunctionDefinitionFilterSensitiveLog(item)) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const AgentActionGroupFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.actionGroupName && { actionGroupName: smithyClient.SENSITIVE_STRING }),
    ...(obj.description && { description: smithyClient.SENSITIVE_STRING }),
    ...(obj.actionGroupExecutor && { actionGroupExecutor: obj.actionGroupExecutor }),
    ...(obj.apiSchema && { apiSchema: APISchemaFilterSensitiveLog(obj.apiSchema) }),
    ...(obj.functionSchema && { functionSchema: FunctionSchemaFilterSensitiveLog(obj.functionSchema) }),
});
const ApiResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.apiPath && { apiPath: smithyClient.SENSITIVE_STRING }),
    ...(obj.responseBody && {
        responseBody: Object.entries(obj.responseBody).reduce((acc, [key, value]) => ((acc[key] = value), acc), {}),
    }),
});
const InvocationResultMemberFilterSensitiveLog = (obj) => {
    if (obj.apiResult !== undefined)
        return { apiResult: ApiResultFilterSensitiveLog(obj.apiResult) };
    if (obj.functionResult !== undefined)
        return { functionResult: obj.functionResult };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const ReturnControlResultsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.returnControlInvocationResults && {
        returnControlInvocationResults: obj.returnControlInvocationResults.map((item) => InvocationResultMemberFilterSensitiveLog(item)),
    }),
});
const AgentCollaboratorInputPayloadFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithyClient.SENSITIVE_STRING }),
    ...(obj.returnControlResults && {
        returnControlResults: ReturnControlResultsFilterSensitiveLog(obj.returnControlResults),
    }),
});
const AgentCollaboratorInvocationInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: AgentCollaboratorInputPayloadFilterSensitiveLog(obj.input) }),
});
const ApiInvocationInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.apiPath && { apiPath: smithyClient.SENSITIVE_STRING }),
    ...(obj.collaboratorName && { collaboratorName: smithyClient.SENSITIVE_STRING }),
});
const FunctionInvocationInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.collaboratorName && { collaboratorName: smithyClient.SENSITIVE_STRING }),
});
const InvocationInputMemberFilterSensitiveLog = (obj) => {
    if (obj.apiInvocationInput !== undefined)
        return { apiInvocationInput: ApiInvocationInputFilterSensitiveLog(obj.apiInvocationInput) };
    if (obj.functionInvocationInput !== undefined)
        return { functionInvocationInput: FunctionInvocationInputFilterSensitiveLog(obj.functionInvocationInput) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const ReturnControlPayloadFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.invocationInputs && {
        invocationInputs: obj.invocationInputs.map((item) => InvocationInputMemberFilterSensitiveLog(item)),
    }),
});
const AgentCollaboratorOutputPayloadFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithyClient.SENSITIVE_STRING }),
    ...(obj.returnControlPayload && { returnControlPayload: smithyClient.SENSITIVE_STRING }),
});
const AgentCollaboratorInvocationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.output && { output: AgentCollaboratorOutputPayloadFilterSensitiveLog(obj.output) }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
});
const CustomOrchestrationTraceEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const CustomOrchestrationTraceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.event && { event: smithyClient.SENSITIVE_STRING }),
});
const FailureTraceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.failureReason && { failureReason: smithyClient.SENSITIVE_STRING }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
});
const GuardrailContentFilterFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GuardrailContentPolicyAssessmentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filters && { filters: smithyClient.SENSITIVE_STRING }),
});
const GuardrailPiiEntityFilterFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GuardrailRegexFilterFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GuardrailSensitiveInformationPolicyAssessmentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.piiEntities && { piiEntities: smithyClient.SENSITIVE_STRING }),
    ...(obj.regexes && { regexes: smithyClient.SENSITIVE_STRING }),
});
const GuardrailTopicFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GuardrailTopicPolicyAssessmentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.topics && { topics: smithyClient.SENSITIVE_STRING }),
});
const GuardrailCustomWordFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GuardrailManagedWordFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GuardrailWordPolicyAssessmentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.customWords && { customWords: smithyClient.SENSITIVE_STRING }),
    ...(obj.managedWordLists && { managedWordLists: smithyClient.SENSITIVE_STRING }),
});
const GuardrailAssessmentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.topicPolicy && { topicPolicy: smithyClient.SENSITIVE_STRING }),
    ...(obj.contentPolicy && { contentPolicy: smithyClient.SENSITIVE_STRING }),
    ...(obj.wordPolicy && { wordPolicy: smithyClient.SENSITIVE_STRING }),
    ...(obj.sensitiveInformationPolicy && { sensitiveInformationPolicy: smithyClient.SENSITIVE_STRING }),
});
const GuardrailTraceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.inputAssessments && { inputAssessments: smithyClient.SENSITIVE_STRING }),
    ...(obj.outputAssessments && { outputAssessments: smithyClient.SENSITIVE_STRING }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
});
const KnowledgeBaseLookupInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithyClient.SENSITIVE_STRING }),
    ...(obj.knowledgeBaseId && { knowledgeBaseId: smithyClient.SENSITIVE_STRING }),
});
const InvocationInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.actionGroupInvocationInput && {
        actionGroupInvocationInput: ActionGroupInvocationInputFilterSensitiveLog(obj.actionGroupInvocationInput),
    }),
    ...(obj.knowledgeBaseLookupInput && {
        knowledgeBaseLookupInput: KnowledgeBaseLookupInputFilterSensitiveLog(obj.knowledgeBaseLookupInput),
    }),
    ...(obj.agentCollaboratorInvocationInput && {
        agentCollaboratorInvocationInput: AgentCollaboratorInvocationInputFilterSensitiveLog(obj.agentCollaboratorInvocationInput),
    }),
});
const ModelInvocationInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithyClient.SENSITIVE_STRING }),
});
const RawResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ReasoningTextBlockFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ReasoningContentBlockFilterSensitiveLog = (obj) => {
    if (obj.reasoningText !== undefined)
        return { reasoningText: smithyClient.SENSITIVE_STRING };
    if (obj.redactedContent !== undefined)
        return { redactedContent: obj.redactedContent };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const OrchestrationModelInvocationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.rawResponse && { rawResponse: smithyClient.SENSITIVE_STRING }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
    ...(obj.reasoningContent && { reasoningContent: smithyClient.SENSITIVE_STRING }),
});
const CodeInterpreterInvocationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
});
const FinalResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithyClient.SENSITIVE_STRING }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
});
const RetrievalResultContentColumnFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RetrievalResultContentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.row && { row: smithyClient.SENSITIVE_STRING }),
});
const RetrievalResultLocationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RetrievedReferenceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: smithyClient.SENSITIVE_STRING }),
    ...(obj.location && { location: smithyClient.SENSITIVE_STRING }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
});
const KnowledgeBaseLookupOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.retrievedReferences && {
        retrievedReferences: obj.retrievedReferences.map((item) => RetrievedReferenceFilterSensitiveLog(item)),
    }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
});
const RepromptResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.source && { source: smithyClient.SENSITIVE_STRING }),
});
const ObservationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.actionGroupInvocationOutput && {
        actionGroupInvocationOutput: ActionGroupInvocationOutputFilterSensitiveLog(obj.actionGroupInvocationOutput),
    }),
    ...(obj.agentCollaboratorInvocationOutput && {
        agentCollaboratorInvocationOutput: AgentCollaboratorInvocationOutputFilterSensitiveLog(obj.agentCollaboratorInvocationOutput),
    }),
    ...(obj.knowledgeBaseLookupOutput && {
        knowledgeBaseLookupOutput: KnowledgeBaseLookupOutputFilterSensitiveLog(obj.knowledgeBaseLookupOutput),
    }),
    ...(obj.finalResponse && { finalResponse: FinalResponseFilterSensitiveLog(obj.finalResponse) }),
    ...(obj.repromptResponse && { repromptResponse: smithyClient.SENSITIVE_STRING }),
    ...(obj.codeInterpreterInvocationOutput && {
        codeInterpreterInvocationOutput: CodeInterpreterInvocationOutputFilterSensitiveLog(obj.codeInterpreterInvocationOutput),
    }),
});
const RationaleFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithyClient.SENSITIVE_STRING }),
});
const OrchestrationTraceFilterSensitiveLog = (obj) => {
    if (obj.rationale !== undefined)
        return { rationale: smithyClient.SENSITIVE_STRING };
    if (obj.invocationInput !== undefined)
        return { invocationInput: smithyClient.SENSITIVE_STRING };
    if (obj.observation !== undefined)
        return { observation: smithyClient.SENSITIVE_STRING };
    if (obj.modelInvocationInput !== undefined)
        return { modelInvocationInput: smithyClient.SENSITIVE_STRING };
    if (obj.modelInvocationOutput !== undefined)
        return { modelInvocationOutput: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const PostProcessingParsedResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithyClient.SENSITIVE_STRING }),
});
const PostProcessingModelInvocationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.parsedResponse && { parsedResponse: smithyClient.SENSITIVE_STRING }),
    ...(obj.rawResponse && { rawResponse: smithyClient.SENSITIVE_STRING }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
    ...(obj.reasoningContent && { reasoningContent: smithyClient.SENSITIVE_STRING }),
});
const PostProcessingTraceFilterSensitiveLog = (obj) => {
    if (obj.modelInvocationInput !== undefined)
        return { modelInvocationInput: smithyClient.SENSITIVE_STRING };
    if (obj.modelInvocationOutput !== undefined)
        return { modelInvocationOutput: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const PreProcessingParsedResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.rationale && { rationale: smithyClient.SENSITIVE_STRING }),
});
const PreProcessingModelInvocationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.parsedResponse && { parsedResponse: smithyClient.SENSITIVE_STRING }),
    ...(obj.rawResponse && { rawResponse: smithyClient.SENSITIVE_STRING }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
    ...(obj.reasoningContent && { reasoningContent: smithyClient.SENSITIVE_STRING }),
});
const PreProcessingTraceFilterSensitiveLog = (obj) => {
    if (obj.modelInvocationInput !== undefined)
        return { modelInvocationInput: smithyClient.SENSITIVE_STRING };
    if (obj.modelInvocationOutput !== undefined)
        return { modelInvocationOutput: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const RoutingClassifierModelInvocationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.rawResponse && { rawResponse: smithyClient.SENSITIVE_STRING }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
});
const RoutingClassifierTraceFilterSensitiveLog = (obj) => {
    if (obj.invocationInput !== undefined)
        return { invocationInput: smithyClient.SENSITIVE_STRING };
    if (obj.observation !== undefined)
        return { observation: smithyClient.SENSITIVE_STRING };
    if (obj.modelInvocationInput !== undefined)
        return { modelInvocationInput: smithyClient.SENSITIVE_STRING };
    if (obj.modelInvocationOutput !== undefined)
        return { modelInvocationOutput: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const TraceFilterSensitiveLog = (obj) => {
    if (obj.guardrailTrace !== undefined)
        return { guardrailTrace: smithyClient.SENSITIVE_STRING };
    if (obj.preProcessingTrace !== undefined)
        return { preProcessingTrace: smithyClient.SENSITIVE_STRING };
    if (obj.orchestrationTrace !== undefined)
        return { orchestrationTrace: smithyClient.SENSITIVE_STRING };
    if (obj.postProcessingTrace !== undefined)
        return { postProcessingTrace: smithyClient.SENSITIVE_STRING };
    if (obj.routingClassifierTrace !== undefined)
        return { routingClassifierTrace: smithyClient.SENSITIVE_STRING };
    if (obj.failureTrace !== undefined)
        return { failureTrace: smithyClient.SENSITIVE_STRING };
    if (obj.customOrchestrationTrace !== undefined)
        return { customOrchestrationTrace: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const TracePartFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.trace && { trace: smithyClient.SENSITIVE_STRING }),
    ...(obj.callerChain && { callerChain: obj.callerChain.map((item) => item) }),
    ...(obj.collaboratorName && { collaboratorName: smithyClient.SENSITIVE_STRING }),
});
const SatisfiedConditionFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ConditionResultEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.satisfiedConditions && { satisfiedConditions: smithyClient.SENSITIVE_STRING }),
});
const FlowFailureEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const FlowExecutionContentFilterSensitiveLog = (obj) => {
    if (obj.document !== undefined)
        return { document: obj.document };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const FlowInputFieldFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: smithyClient.SENSITIVE_STRING }),
});
const FlowExecutionInputEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.fields && { fields: smithyClient.SENSITIVE_STRING }),
});
const FlowOutputFieldFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: smithyClient.SENSITIVE_STRING }),
});
const FlowExecutionOutputEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.fields && { fields: smithyClient.SENSITIVE_STRING }),
});
const NodeActionEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const NodeTraceElementsFilterSensitiveLog = (obj) => {
    if (obj.agentTraces !== undefined)
        return { agentTraces: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const NodeDependencyEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.traceElements && { traceElements: smithyClient.SENSITIVE_STRING }),
});
const NodeFailureEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const NodeExecutionContentFilterSensitiveLog = (obj) => {
    if (obj.document !== undefined)
        return { document: obj.document };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const NodeInputSourceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.expression && { expression: smithyClient.SENSITIVE_STRING }),
});
const NodeInputFieldFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: smithyClient.SENSITIVE_STRING }),
    ...(obj.source && { source: NodeInputSourceFilterSensitiveLog(obj.source) }),
});
const NodeInputEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.fields && { fields: smithyClient.SENSITIVE_STRING }),
});
const NodeOutputNextFilterSensitiveLog = (obj) => ({
    ...obj,
});
const NodeOutputFieldFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: smithyClient.SENSITIVE_STRING }),
    ...(obj.next && { next: smithyClient.SENSITIVE_STRING }),
});
const NodeOutputEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.fields && { fields: smithyClient.SENSITIVE_STRING }),
});
const FlowExecutionEventFilterSensitiveLog = (obj) => {
    if (obj.flowInputEvent !== undefined)
        return { flowInputEvent: smithyClient.SENSITIVE_STRING };
    if (obj.flowOutputEvent !== undefined)
        return { flowOutputEvent: smithyClient.SENSITIVE_STRING };
    if (obj.nodeInputEvent !== undefined)
        return { nodeInputEvent: smithyClient.SENSITIVE_STRING };
    if (obj.nodeOutputEvent !== undefined)
        return { nodeOutputEvent: smithyClient.SENSITIVE_STRING };
    if (obj.conditionResultEvent !== undefined)
        return { conditionResultEvent: smithyClient.SENSITIVE_STRING };
    if (obj.nodeFailureEvent !== undefined)
        return { nodeFailureEvent: smithyClient.SENSITIVE_STRING };
    if (obj.flowFailureEvent !== undefined)
        return { flowFailureEvent: smithyClient.SENSITIVE_STRING };
    if (obj.nodeActionEvent !== undefined)
        return { nodeActionEvent: smithyClient.SENSITIVE_STRING };
    if (obj.nodeDependencyEvent !== undefined)
        return { nodeDependencyEvent: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const ListFlowExecutionEventsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.flowExecutionEvents && {
        flowExecutionEvents: obj.flowExecutionEvents.map((item) => FlowExecutionEventFilterSensitiveLog(item)),
    }),
});
const FlowInputContentFilterSensitiveLog = (obj) => {
    if (obj.document !== undefined)
        return { document: obj.document };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const FlowInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: smithyClient.SENSITIVE_STRING }),
});
const StartFlowExecutionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.inputs && { inputs: obj.inputs.map((item) => FlowInputFilterSensitiveLog(item)) }),
});
const InvokeFlowRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.inputs && { inputs: obj.inputs.map((item) => FlowInputFilterSensitiveLog(item)) }),
});
const FlowCompletionEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const FlowMultiTurnInputRequestEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: obj.content }),
});
const FlowOutputEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: obj.content }),
});
const FlowTraceConditionFilterSensitiveLog = (obj) => ({
    ...obj,
});
const FlowTraceConditionNodeResultEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.satisfiedConditions && { satisfiedConditions: smithyClient.SENSITIVE_STRING }),
});
const FlowTraceNodeActionEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const TraceElementsFilterSensitiveLog = (obj) => {
    if (obj.agentTraces !== undefined)
        return { agentTraces: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const FlowTraceDependencyEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.traceElements && { traceElements: smithyClient.SENSITIVE_STRING }),
});
const FlowTraceNodeInputContentFilterSensitiveLog = (obj) => {
    if (obj.document !== undefined)
        return { document: obj.document };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const FlowTraceNodeInputExecutionChainItemFilterSensitiveLog = (obj) => ({
    ...obj,
});
const FlowTraceNodeInputSourceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.expression && { expression: smithyClient.SENSITIVE_STRING }),
});
const FlowTraceNodeInputFieldFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: smithyClient.SENSITIVE_STRING }),
    ...(obj.source && { source: smithyClient.SENSITIVE_STRING }),
    ...(obj.executionChain && { executionChain: smithyClient.SENSITIVE_STRING }),
});
const FlowTraceNodeInputEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.fields && { fields: smithyClient.SENSITIVE_STRING }),
});
const FlowTraceNodeOutputNextFilterSensitiveLog = (obj) => ({
    ...obj,
});
const FlowTraceNodeOutputFieldFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: obj.content }),
    ...(obj.next && { next: smithyClient.SENSITIVE_STRING }),
});
const FlowTraceNodeOutputEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.fields && { fields: smithyClient.SENSITIVE_STRING }),
});
const FlowTraceFilterSensitiveLog = (obj) => {
    if (obj.nodeInputTrace !== undefined)
        return { nodeInputTrace: smithyClient.SENSITIVE_STRING };
    if (obj.nodeOutputTrace !== undefined)
        return { nodeOutputTrace: smithyClient.SENSITIVE_STRING };
    if (obj.conditionNodeResultTrace !== undefined)
        return { conditionNodeResultTrace: smithyClient.SENSITIVE_STRING };
    if (obj.nodeActionTrace !== undefined)
        return { nodeActionTrace: smithyClient.SENSITIVE_STRING };
    if (obj.nodeDependencyTrace !== undefined)
        return { nodeDependencyTrace: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const FlowTraceEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.trace && { trace: smithyClient.SENSITIVE_STRING }),
});
const FlowResponseStreamFilterSensitiveLog = (obj) => {
    if (obj.flowOutputEvent !== undefined)
        return { flowOutputEvent: smithyClient.SENSITIVE_STRING };
    if (obj.flowCompletionEvent !== undefined)
        return { flowCompletionEvent: smithyClient.SENSITIVE_STRING };
    if (obj.flowTraceEvent !== undefined)
        return { flowTraceEvent: FlowTraceEventFilterSensitiveLog(obj.flowTraceEvent) };
    if (obj.internalServerException !== undefined)
        return { internalServerException: obj.internalServerException };
    if (obj.validationException !== undefined)
        return { validationException: obj.validationException };
    if (obj.resourceNotFoundException !== undefined)
        return { resourceNotFoundException: obj.resourceNotFoundException };
    if (obj.serviceQuotaExceededException !== undefined)
        return { serviceQuotaExceededException: obj.serviceQuotaExceededException };
    if (obj.throttlingException !== undefined)
        return { throttlingException: obj.throttlingException };
    if (obj.accessDeniedException !== undefined)
        return { accessDeniedException: obj.accessDeniedException };
    if (obj.conflictException !== undefined)
        return { conflictException: obj.conflictException };
    if (obj.dependencyFailedException !== undefined)
        return { dependencyFailedException: obj.dependencyFailedException };
    if (obj.badGatewayException !== undefined)
        return { badGatewayException: obj.badGatewayException };
    if (obj.flowMultiTurnInputRequestEvent !== undefined)
        return { flowMultiTurnInputRequestEvent: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const InvokeFlowResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.responseStream && { responseStream: "STREAMING_CONTENT" }),
});
const QueryGenerationInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GenerateQueryRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.queryGenerationInput && { queryGenerationInput: smithyClient.SENSITIVE_STRING }),
});
const GeneratedQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GenerateQueryResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.queries && { queries: smithyClient.SENSITIVE_STRING }),
});
const ContentBlockFilterSensitiveLog = (obj) => {
    if (obj.text !== undefined)
        return { text: obj.text };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const MessageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: smithyClient.SENSITIVE_STRING }),
});
const ConversationHistoryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }),
});
const ByteContentFileFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.data && { data: smithyClient.SENSITIVE_STRING }),
});
const FileSourceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.byteContent && { byteContent: ByteContentFileFilterSensitiveLog(obj.byteContent) }),
});
const InputFileFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.source && { source: FileSourceFilterSensitiveLog(obj.source) }),
});
const MetadataAttributeSchemaFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ImplicitFilterConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.metadataAttributes && { metadataAttributes: smithyClient.SENSITIVE_STRING }),
});
const RerankingMetadataSelectiveModeConfigurationFilterSensitiveLog = (obj) => {
    if (obj.fieldsToInclude !== undefined)
        return { fieldsToInclude: smithyClient.SENSITIVE_STRING };
    if (obj.fieldsToExclude !== undefined)
        return { fieldsToExclude: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const MetadataConfigurationForRerankingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.selectiveModeConfiguration && {
        selectiveModeConfiguration: RerankingMetadataSelectiveModeConfigurationFilterSensitiveLog(obj.selectiveModeConfiguration),
    }),
});
const VectorSearchBedrockRerankingConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.metadataConfiguration && {
        metadataConfiguration: MetadataConfigurationForRerankingFilterSensitiveLog(obj.metadataConfiguration),
    }),
});
const VectorSearchRerankingConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.bedrockRerankingConfiguration && {
        bedrockRerankingConfiguration: VectorSearchBedrockRerankingConfigurationFilterSensitiveLog(obj.bedrockRerankingConfiguration),
    }),
});
const TextResponsePartFilterSensitiveLog = (obj) => ({
    ...obj,
});
const GeneratedResponsePartFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.textResponsePart && { textResponsePart: smithyClient.SENSITIVE_STRING }),
});
const CitationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.generatedResponsePart && {
        generatedResponsePart: GeneratedResponsePartFilterSensitiveLog(obj.generatedResponsePart),
    }),
    ...(obj.retrievedReferences && {
        retrievedReferences: obj.retrievedReferences.map((item) => RetrievedReferenceFilterSensitiveLog(item)),
    }),
});
const AttributionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.citations && { citations: obj.citations.map((item) => CitationFilterSensitiveLog(item)) }),
});
const PayloadPartFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.bytes && { bytes: smithyClient.SENSITIVE_STRING }),
    ...(obj.attribution && { attribution: AttributionFilterSensitiveLog(obj.attribution) }),
});
const OutputFileFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.bytes && { bytes: smithyClient.SENSITIVE_STRING }),
});
const FilePartFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.files && { files: smithyClient.SENSITIVE_STRING }),
});
const ResponseStreamFilterSensitiveLog = (obj) => {
    if (obj.chunk !== undefined)
        return { chunk: smithyClient.SENSITIVE_STRING };
    if (obj.trace !== undefined)
        return { trace: smithyClient.SENSITIVE_STRING };
    if (obj.returnControl !== undefined)
        return { returnControl: smithyClient.SENSITIVE_STRING };
    if (obj.internalServerException !== undefined)
        return { internalServerException: obj.internalServerException };
    if (obj.validationException !== undefined)
        return { validationException: obj.validationException };
    if (obj.resourceNotFoundException !== undefined)
        return { resourceNotFoundException: obj.resourceNotFoundException };
    if (obj.serviceQuotaExceededException !== undefined)
        return { serviceQuotaExceededException: obj.serviceQuotaExceededException };
    if (obj.throttlingException !== undefined)
        return { throttlingException: obj.throttlingException };
    if (obj.accessDeniedException !== undefined)
        return { accessDeniedException: obj.accessDeniedException };
    if (obj.conflictException !== undefined)
        return { conflictException: obj.conflictException };
    if (obj.dependencyFailedException !== undefined)
        return { dependencyFailedException: obj.dependencyFailedException };
    if (obj.badGatewayException !== undefined)
        return { badGatewayException: obj.badGatewayException };
    if (obj.modelNotReadyException !== undefined)
        return { modelNotReadyException: obj.modelNotReadyException };
    if (obj.files !== undefined)
        return { files: FilePartFilterSensitiveLog(obj.files) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const InvokeAgentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.completion && { completion: "STREAMING_CONTENT" }),
});
const CollaboratorConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.collaboratorName && { collaboratorName: smithyClient.SENSITIVE_STRING }),
    ...(obj.collaboratorInstruction && { collaboratorInstruction: smithyClient.SENSITIVE_STRING }),
});
const PromptConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.basePromptTemplate && { basePromptTemplate: smithyClient.SENSITIVE_STRING }),
});
const PromptOverrideConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.promptConfigurations && {
        promptConfigurations: obj.promptConfigurations.map((item) => PromptConfigurationFilterSensitiveLog(item)),
    }),
});
const InlineSessionStateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.returnControlInvocationResults && {
        returnControlInvocationResults: obj.returnControlInvocationResults.map((item) => InvocationResultMemberFilterSensitiveLog(item)),
    }),
    ...(obj.files && { files: obj.files.map((item) => InputFileFilterSensitiveLog(item)) }),
    ...(obj.conversationHistory && {
        conversationHistory: ConversationHistoryFilterSensitiveLog(obj.conversationHistory),
    }),
});
const InlineAgentPayloadPartFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.bytes && { bytes: smithyClient.SENSITIVE_STRING }),
    ...(obj.attribution && { attribution: AttributionFilterSensitiveLog(obj.attribution) }),
});
const InlineAgentFilePartFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.files && { files: smithyClient.SENSITIVE_STRING }),
});
const InlineAgentReturnControlPayloadFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.invocationInputs && {
        invocationInputs: obj.invocationInputs.map((item) => InvocationInputMemberFilterSensitiveLog(item)),
    }),
});
const InlineAgentTracePartFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.trace && { trace: smithyClient.SENSITIVE_STRING }),
    ...(obj.callerChain && { callerChain: obj.callerChain.map((item) => item) }),
    ...(obj.collaboratorName && { collaboratorName: smithyClient.SENSITIVE_STRING }),
});
const InlineAgentResponseStreamFilterSensitiveLog = (obj) => {
    if (obj.chunk !== undefined)
        return { chunk: smithyClient.SENSITIVE_STRING };
    if (obj.trace !== undefined)
        return { trace: smithyClient.SENSITIVE_STRING };
    if (obj.returnControl !== undefined)
        return { returnControl: smithyClient.SENSITIVE_STRING };
    if (obj.internalServerException !== undefined)
        return { internalServerException: obj.internalServerException };
    if (obj.validationException !== undefined)
        return { validationException: obj.validationException };
    if (obj.resourceNotFoundException !== undefined)
        return { resourceNotFoundException: obj.resourceNotFoundException };
    if (obj.serviceQuotaExceededException !== undefined)
        return { serviceQuotaExceededException: obj.serviceQuotaExceededException };
    if (obj.throttlingException !== undefined)
        return { throttlingException: obj.throttlingException };
    if (obj.accessDeniedException !== undefined)
        return { accessDeniedException: obj.accessDeniedException };
    if (obj.conflictException !== undefined)
        return { conflictException: obj.conflictException };
    if (obj.dependencyFailedException !== undefined)
        return { dependencyFailedException: obj.dependencyFailedException };
    if (obj.badGatewayException !== undefined)
        return { badGatewayException: obj.badGatewayException };
    if (obj.files !== undefined)
        return { files: InlineAgentFilePartFilterSensitiveLog(obj.files) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const InvokeInlineAgentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.completion && { completion: "STREAMING_CONTENT" }),
});
const TextPromptFilterSensitiveLog = (obj) => ({
    ...obj,
});
const InputPromptFilterSensitiveLog = (obj) => {
    if (obj.textPrompt !== undefined)
        return { textPrompt: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const OptimizePromptRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: InputPromptFilterSensitiveLog(obj.input) }),
});
const AnalyzePromptEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const OptimizedPromptFilterSensitiveLog = (obj) => {
    if (obj.textPrompt !== undefined)
        return { textPrompt: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const OptimizedPromptEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.optimizedPrompt && { optimizedPrompt: OptimizedPromptFilterSensitiveLog(obj.optimizedPrompt) }),
});
const OptimizedPromptStreamFilterSensitiveLog = (obj) => {
    if (obj.optimizedPromptEvent !== undefined)
        return { optimizedPromptEvent: smithyClient.SENSITIVE_STRING };
    if (obj.analyzePromptEvent !== undefined)
        return { analyzePromptEvent: smithyClient.SENSITIVE_STRING };
    if (obj.internalServerException !== undefined)
        return { internalServerException: obj.internalServerException };
    if (obj.throttlingException !== undefined)
        return { throttlingException: obj.throttlingException };
    if (obj.validationException !== undefined)
        return { validationException: obj.validationException };
    if (obj.dependencyFailedException !== undefined)
        return { dependencyFailedException: obj.dependencyFailedException };
    if (obj.accessDeniedException !== undefined)
        return { accessDeniedException: obj.accessDeniedException };
    if (obj.badGatewayException !== undefined)
        return { badGatewayException: obj.badGatewayException };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const OptimizePromptResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.optimizedPrompt && { optimizedPrompt: "STREAMING_CONTENT" }),
});
const RerankTextDocumentFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RerankQueryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.textQuery && { textQuery: smithyClient.SENSITIVE_STRING }),
});
const RerankDocumentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.textDocument && { textDocument: smithyClient.SENSITIVE_STRING }),
});
const RerankSourceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.inlineDocumentSource && { inlineDocumentSource: smithyClient.SENSITIVE_STRING }),
});
const RerankRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.queries && { queries: smithyClient.SENSITIVE_STRING }),
    ...(obj.sources && { sources: smithyClient.SENSITIVE_STRING }),
});
const RerankResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.document && { document: smithyClient.SENSITIVE_STRING }),
});
const RerankResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.results && { results: obj.results.map((item) => RerankResultFilterSensitiveLog(item)) }),
});
const RetrieveAndGenerateInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const PromptTemplateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.textPromptTemplate && { textPromptTemplate: smithyClient.SENSITIVE_STRING }),
});
const ExternalSourcesGenerationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.promptTemplate && { promptTemplate: PromptTemplateFilterSensitiveLog(obj.promptTemplate) }),
});
const ByteContentDocFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.identifier && { identifier: smithyClient.SENSITIVE_STRING }),
    ...(obj.data && { data: smithyClient.SENSITIVE_STRING }),
});

const ExternalSourceType = {
    BYTE_CONTENT: "BYTE_CONTENT",
    S3: "S3",
};
const QueryTransformationType = {
    QUERY_DECOMPOSITION: "QUERY_DECOMPOSITION",
};
const RetrieveAndGenerateType = {
    EXTERNAL_SOURCES: "EXTERNAL_SOURCES",
    KNOWLEDGE_BASE: "KNOWLEDGE_BASE",
};
const GuadrailAction = {
    INTERVENED: "INTERVENED",
    NONE: "NONE",
};
exports.RetrieveAndGenerateStreamResponseOutput = void 0;
(function (RetrieveAndGenerateStreamResponseOutput) {
    RetrieveAndGenerateStreamResponseOutput.visit = (value, visitor) => {
        if (value.output !== undefined)
            return visitor.output(value.output);
        if (value.citation !== undefined)
            return visitor.citation(value.citation);
        if (value.guardrail !== undefined)
            return visitor.guardrail(value.guardrail);
        if (value.internalServerException !== undefined)
            return visitor.internalServerException(value.internalServerException);
        if (value.validationException !== undefined)
            return visitor.validationException(value.validationException);
        if (value.resourceNotFoundException !== undefined)
            return visitor.resourceNotFoundException(value.resourceNotFoundException);
        if (value.serviceQuotaExceededException !== undefined)
            return visitor.serviceQuotaExceededException(value.serviceQuotaExceededException);
        if (value.throttlingException !== undefined)
            return visitor.throttlingException(value.throttlingException);
        if (value.accessDeniedException !== undefined)
            return visitor.accessDeniedException(value.accessDeniedException);
        if (value.conflictException !== undefined)
            return visitor.conflictException(value.conflictException);
        if (value.dependencyFailedException !== undefined)
            return visitor.dependencyFailedException(value.dependencyFailedException);
        if (value.badGatewayException !== undefined)
            return visitor.badGatewayException(value.badGatewayException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.RetrieveAndGenerateStreamResponseOutput || (exports.RetrieveAndGenerateStreamResponseOutput = {}));
const SessionStatus = {
    ACTIVE: "ACTIVE",
    ENDED: "ENDED",
    EXPIRED: "EXPIRED",
};
const ImageFormat = {
    GIF: "gif",
    JPEG: "jpeg",
    PNG: "png",
    WEBP: "webp",
};
exports.ImageSource = void 0;
(function (ImageSource) {
    ImageSource.visit = (value, visitor) => {
        if (value.bytes !== undefined)
            return visitor.bytes(value.bytes);
        if (value.s3Location !== undefined)
            return visitor.s3Location(value.s3Location);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.ImageSource || (exports.ImageSource = {}));
exports.BedrockSessionContentBlock = void 0;
(function (BedrockSessionContentBlock) {
    BedrockSessionContentBlock.visit = (value, visitor) => {
        if (value.text !== undefined)
            return visitor.text(value.text);
        if (value.image !== undefined)
            return visitor.image(value.image);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.BedrockSessionContentBlock || (exports.BedrockSessionContentBlock = {}));
exports.InvocationStepPayload = void 0;
(function (InvocationStepPayload) {
    InvocationStepPayload.visit = (value, visitor) => {
        if (value.contentBlocks !== undefined)
            return visitor.contentBlocks(value.contentBlocks);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.InvocationStepPayload || (exports.InvocationStepPayload = {}));
exports.RetrievalFilter = void 0;
(function (RetrievalFilter) {
    RetrievalFilter.visit = (value, visitor) => {
        if (value.equals !== undefined)
            return visitor.equals(value.equals);
        if (value.notEquals !== undefined)
            return visitor.notEquals(value.notEquals);
        if (value.greaterThan !== undefined)
            return visitor.greaterThan(value.greaterThan);
        if (value.greaterThanOrEquals !== undefined)
            return visitor.greaterThanOrEquals(value.greaterThanOrEquals);
        if (value.lessThan !== undefined)
            return visitor.lessThan(value.lessThan);
        if (value.lessThanOrEquals !== undefined)
            return visitor.lessThanOrEquals(value.lessThanOrEquals);
        if (value.in !== undefined)
            return visitor.in(value.in);
        if (value.notIn !== undefined)
            return visitor.notIn(value.notIn);
        if (value.startsWith !== undefined)
            return visitor.startsWith(value.startsWith);
        if (value.listContains !== undefined)
            return visitor.listContains(value.listContains);
        if (value.stringContains !== undefined)
            return visitor.stringContains(value.stringContains);
        if (value.andAll !== undefined)
            return visitor.andAll(value.andAll);
        if (value.orAll !== undefined)
            return visitor.orAll(value.orAll);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.RetrievalFilter || (exports.RetrievalFilter = {}));
const ExternalSourceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.byteContent && { byteContent: ByteContentDocFilterSensitiveLog(obj.byteContent) }),
});
const ExternalSourcesRetrieveAndGenerateConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sources && { sources: obj.sources.map((item) => ExternalSourceFilterSensitiveLog(item)) }),
    ...(obj.generationConfiguration && {
        generationConfiguration: ExternalSourcesGenerationConfigurationFilterSensitiveLog(obj.generationConfiguration),
    }),
});
const GenerationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.promptTemplate && { promptTemplate: PromptTemplateFilterSensitiveLog(obj.promptTemplate) }),
});
const OrchestrationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.promptTemplate && { promptTemplate: PromptTemplateFilterSensitiveLog(obj.promptTemplate) }),
});
const RetrieveAndGenerateOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RetrieveAndGenerateResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.output && { output: smithyClient.SENSITIVE_STRING }),
    ...(obj.citations && { citations: obj.citations.map((item) => CitationFilterSensitiveLog(item)) }),
});
const CitationEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.citation && { citation: CitationFilterSensitiveLog(obj.citation) }),
    ...(obj.generatedResponsePart && {
        generatedResponsePart: GeneratedResponsePartFilterSensitiveLog(obj.generatedResponsePart),
    }),
    ...(obj.retrievedReferences && {
        retrievedReferences: obj.retrievedReferences.map((item) => RetrievedReferenceFilterSensitiveLog(item)),
    }),
});
const RetrieveAndGenerateOutputEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RetrieveAndGenerateStreamResponseOutputFilterSensitiveLog = (obj) => {
    if (obj.output !== undefined)
        return { output: smithyClient.SENSITIVE_STRING };
    if (obj.citation !== undefined)
        return { citation: CitationEventFilterSensitiveLog(obj.citation) };
    if (obj.guardrail !== undefined)
        return { guardrail: obj.guardrail };
    if (obj.internalServerException !== undefined)
        return { internalServerException: obj.internalServerException };
    if (obj.validationException !== undefined)
        return { validationException: obj.validationException };
    if (obj.resourceNotFoundException !== undefined)
        return { resourceNotFoundException: obj.resourceNotFoundException };
    if (obj.serviceQuotaExceededException !== undefined)
        return { serviceQuotaExceededException: obj.serviceQuotaExceededException };
    if (obj.throttlingException !== undefined)
        return { throttlingException: obj.throttlingException };
    if (obj.accessDeniedException !== undefined)
        return { accessDeniedException: obj.accessDeniedException };
    if (obj.conflictException !== undefined)
        return { conflictException: obj.conflictException };
    if (obj.dependencyFailedException !== undefined)
        return { dependencyFailedException: obj.dependencyFailedException };
    if (obj.badGatewayException !== undefined)
        return { badGatewayException: obj.badGatewayException };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const RetrieveAndGenerateStreamResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.stream && { stream: "STREAMING_CONTENT" }),
});
const KnowledgeBaseQueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
const KnowledgeBaseRetrievalResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: smithyClient.SENSITIVE_STRING }),
    ...(obj.location && { location: smithyClient.SENSITIVE_STRING }),
    ...(obj.metadata && { metadata: smithyClient.SENSITIVE_STRING }),
});
const RetrieveResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.retrievalResults && { retrievalResults: smithyClient.SENSITIVE_STRING }),
});
const BedrockSessionContentBlockFilterSensitiveLog = (obj) => {
    if (obj.text !== undefined)
        return { text: obj.text };
    if (obj.image !== undefined)
        return { image: obj.image };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const InvocationStepPayloadFilterSensitiveLog = (obj) => {
    if (obj.contentBlocks !== undefined)
        return { contentBlocks: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const InvocationStepFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.payload && { payload: InvocationStepPayloadFilterSensitiveLog(obj.payload) }),
});
const GetInvocationStepResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.invocationStep && { invocationStep: InvocationStepFilterSensitiveLog(obj.invocationStep) }),
});
const PutInvocationStepRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.payload && { payload: InvocationStepPayloadFilterSensitiveLog(obj.payload) }),
});
const RetrievalFilterFilterSensitiveLog = (obj) => {
    if (obj.equals !== undefined)
        return { equals: obj.equals };
    if (obj.notEquals !== undefined)
        return { notEquals: obj.notEquals };
    if (obj.greaterThan !== undefined)
        return { greaterThan: obj.greaterThan };
    if (obj.greaterThanOrEquals !== undefined)
        return { greaterThanOrEquals: obj.greaterThanOrEquals };
    if (obj.lessThan !== undefined)
        return { lessThan: obj.lessThan };
    if (obj.lessThanOrEquals !== undefined)
        return { lessThanOrEquals: obj.lessThanOrEquals };
    if (obj.in !== undefined)
        return { in: obj.in };
    if (obj.notIn !== undefined)
        return { notIn: obj.notIn };
    if (obj.startsWith !== undefined)
        return { startsWith: obj.startsWith };
    if (obj.listContains !== undefined)
        return { listContains: obj.listContains };
    if (obj.stringContains !== undefined)
        return { stringContains: obj.stringContains };
    if (obj.andAll !== undefined)
        return { andAll: smithyClient.SENSITIVE_STRING };
    if (obj.orAll !== undefined)
        return { orAll: smithyClient.SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const KnowledgeBaseVectorSearchConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filter && { filter: smithyClient.SENSITIVE_STRING }),
    ...(obj.rerankingConfiguration && {
        rerankingConfiguration: VectorSearchRerankingConfigurationFilterSensitiveLog(obj.rerankingConfiguration),
    }),
    ...(obj.implicitFilterConfiguration && {
        implicitFilterConfiguration: ImplicitFilterConfigurationFilterSensitiveLog(obj.implicitFilterConfiguration),
    }),
});
const KnowledgeBaseRetrievalConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.vectorSearchConfiguration && {
        vectorSearchConfiguration: KnowledgeBaseVectorSearchConfigurationFilterSensitiveLog(obj.vectorSearchConfiguration),
    }),
});
const KnowledgeBaseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.description && { description: smithyClient.SENSITIVE_STRING }),
    ...(obj.retrievalConfiguration && {
        retrievalConfiguration: KnowledgeBaseRetrievalConfigurationFilterSensitiveLog(obj.retrievalConfiguration),
    }),
});
const KnowledgeBaseConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.retrievalConfiguration && {
        retrievalConfiguration: KnowledgeBaseRetrievalConfigurationFilterSensitiveLog(obj.retrievalConfiguration),
    }),
});
const KnowledgeBaseRetrieveAndGenerateConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.retrievalConfiguration && {
        retrievalConfiguration: KnowledgeBaseRetrievalConfigurationFilterSensitiveLog(obj.retrievalConfiguration),
    }),
    ...(obj.generationConfiguration && {
        generationConfiguration: GenerationConfigurationFilterSensitiveLog(obj.generationConfiguration),
    }),
    ...(obj.orchestrationConfiguration && {
        orchestrationConfiguration: OrchestrationConfigurationFilterSensitiveLog(obj.orchestrationConfiguration),
    }),
});
const RetrieveRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.retrievalQuery && { retrievalQuery: smithyClient.SENSITIVE_STRING }),
    ...(obj.retrievalConfiguration && {
        retrievalConfiguration: KnowledgeBaseRetrievalConfigurationFilterSensitiveLog(obj.retrievalConfiguration),
    }),
});
const RetrieveAndGenerateConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.knowledgeBaseConfiguration && {
        knowledgeBaseConfiguration: KnowledgeBaseRetrieveAndGenerateConfigurationFilterSensitiveLog(obj.knowledgeBaseConfiguration),
    }),
    ...(obj.externalSourcesConfiguration && {
        externalSourcesConfiguration: ExternalSourcesRetrieveAndGenerateConfigurationFilterSensitiveLog(obj.externalSourcesConfiguration),
    }),
});
const CollaboratorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.instruction && { instruction: smithyClient.SENSITIVE_STRING }),
    ...(obj.actionGroups && { actionGroups: obj.actionGroups.map((item) => AgentActionGroupFilterSensitiveLog(item)) }),
    ...(obj.knowledgeBases && {
        knowledgeBases: obj.knowledgeBases.map((item) => KnowledgeBaseFilterSensitiveLog(item)),
    }),
    ...(obj.promptOverrideConfiguration && { promptOverrideConfiguration: smithyClient.SENSITIVE_STRING }),
    ...(obj.collaboratorConfigurations && {
        collaboratorConfigurations: obj.collaboratorConfigurations.map((item) => CollaboratorConfigurationFilterSensitiveLog(item)),
    }),
    ...(obj.agentName && { agentName: smithyClient.SENSITIVE_STRING }),
});
const RetrieveAndGenerateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
    ...(obj.retrieveAndGenerateConfiguration && {
        retrieveAndGenerateConfiguration: RetrieveAndGenerateConfigurationFilterSensitiveLog(obj.retrieveAndGenerateConfiguration),
    }),
});
const RetrieveAndGenerateStreamRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
    ...(obj.retrieveAndGenerateConfiguration && {
        retrieveAndGenerateConfiguration: RetrieveAndGenerateConfigurationFilterSensitiveLog(obj.retrieveAndGenerateConfiguration),
    }),
});
const SessionStateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.returnControlInvocationResults && {
        returnControlInvocationResults: obj.returnControlInvocationResults.map((item) => InvocationResultMemberFilterSensitiveLog(item)),
    }),
    ...(obj.files && { files: obj.files.map((item) => InputFileFilterSensitiveLog(item)) }),
    ...(obj.knowledgeBaseConfigurations && {
        knowledgeBaseConfigurations: obj.knowledgeBaseConfigurations.map((item) => KnowledgeBaseConfigurationFilterSensitiveLog(item)),
    }),
    ...(obj.conversationHistory && {
        conversationHistory: ConversationHistoryFilterSensitiveLog(obj.conversationHistory),
    }),
});
const InvokeAgentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sessionState && { sessionState: SessionStateFilterSensitiveLog(obj.sessionState) }),
    ...(obj.inputText && { inputText: smithyClient.SENSITIVE_STRING }),
});
const InvokeInlineAgentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.instruction && { instruction: smithyClient.SENSITIVE_STRING }),
    ...(obj.actionGroups && { actionGroups: obj.actionGroups.map((item) => AgentActionGroupFilterSensitiveLog(item)) }),
    ...(obj.knowledgeBases && {
        knowledgeBases: obj.knowledgeBases.map((item) => KnowledgeBaseFilterSensitiveLog(item)),
    }),
    ...(obj.promptOverrideConfiguration && { promptOverrideConfiguration: smithyClient.SENSITIVE_STRING }),
    ...(obj.collaboratorConfigurations && {
        collaboratorConfigurations: obj.collaboratorConfigurations.map((item) => CollaboratorConfigurationFilterSensitiveLog(item)),
    }),
    ...(obj.agentName && { agentName: smithyClient.SENSITIVE_STRING }),
    ...(obj.inputText && { inputText: smithyClient.SENSITIVE_STRING }),
    ...(obj.inlineSessionState && { inlineSessionState: InlineSessionStateFilterSensitiveLog(obj.inlineSessionState) }),
    ...(obj.collaborators && { collaborators: obj.collaborators.map((item) => CollaboratorFilterSensitiveLog(item)) }),
    ...(obj.customOrchestration && { customOrchestration: obj.customOrchestration }),
});

const se_CreateInvocationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sessions/{sessionIdentifier}/invocations");
    b.p("sessionIdentifier", () => input.sessionIdentifier, "{sessionIdentifier}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
        invocationId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateSessionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sessions");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        encryptionKeyArn: [],
        sessionMetadata: (_) => smithyClient._json(_),
        tags: (_) => smithyClient._json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_DeleteAgentMemoryCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentAliases/{agentAliasId}/memories");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
    const query = smithyClient.map({
        [_mI]: [, input[_mI]],
        [_sI]: [, input[_sI]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DeleteSessionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/sessions/{sessionIdentifier}");
    b.p("sessionIdentifier", () => input.sessionIdentifier, "{sessionIdentifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_EndSessionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/sessions/{sessionIdentifier}");
    b.p("sessionIdentifier", () => input.sessionIdentifier, "{sessionIdentifier}", false);
    let body;
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const se_GenerateQueryCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/generateQuery");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        queryGenerationInput: (_) => smithyClient._json(_),
        transformationConfiguration: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_GetAgentMemoryCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/agents/{agentId}/agentAliases/{agentAliasId}/memories");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mIa]: [() => input.maxItems !== void 0, () => input[_mIa].toString()],
        [_mT]: [, smithyClient.expectNonNull(input[_mT], `memoryType`)],
        [_mI]: [, smithyClient.expectNonNull(input[_mI], `memoryId`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetExecutionFlowSnapshotCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}/aliases/{flowAliasIdentifier}/executions/{executionIdentifier}/flowsnapshot");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    b.p("flowAliasIdentifier", () => input.flowAliasIdentifier, "{flowAliasIdentifier}", false);
    b.p("executionIdentifier", () => input.executionIdentifier, "{executionIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetFlowExecutionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}/aliases/{flowAliasIdentifier}/executions/{executionIdentifier}");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    b.p("flowAliasIdentifier", () => input.flowAliasIdentifier, "{flowAliasIdentifier}", false);
    b.p("executionIdentifier", () => input.executionIdentifier, "{executionIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetInvocationStepCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sessions/{sessionIdentifier}/invocationSteps/{invocationStepId}");
    b.p("invocationStepId", () => input.invocationStepId, "{invocationStepId}", false);
    b.p("sessionIdentifier", () => input.sessionIdentifier, "{sessionIdentifier}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        invocationIdentifier: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_GetSessionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/sessions/{sessionIdentifier}");
    b.p("sessionIdentifier", () => input.sessionIdentifier, "{sessionIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_InvokeAgentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = smithyClient.map({}, smithyClient.isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xasa]: input[_sA],
    });
    b.bp("/agents/{agentId}/agentAliases/{agentAliasId}/sessions/{sessionId}/text");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    b.p("agentAliasId", () => input.agentAliasId, "{agentAliasId}", false);
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        bedrockModelConfigurations: (_) => smithyClient._json(_),
        enableTrace: [],
        endSession: [],
        inputText: [],
        memoryId: [],
        promptCreationConfigurations: (_) => smithyClient._json(_),
        sessionState: (_) => se_SessionState(_, context),
        streamingConfigurations: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_InvokeFlowCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flows/{flowIdentifier}/aliases/{flowAliasIdentifier}");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    b.p("flowAliasIdentifier", () => input.flowAliasIdentifier, "{flowAliasIdentifier}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        enableTrace: [],
        executionId: [],
        inputs: (_) => se_FlowInputs(_),
        modelPerformanceConfiguration: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_InvokeInlineAgentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agents/{sessionId}");
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        actionGroups: (_) => smithyClient._json(_),
        agentCollaboration: [],
        agentName: [],
        bedrockModelConfigurations: (_) => smithyClient._json(_),
        collaboratorConfigurations: (_) => smithyClient._json(_),
        collaborators: (_) => se_Collaborators(_),
        customOrchestration: (_) => smithyClient._json(_),
        customerEncryptionKeyArn: [],
        enableTrace: [],
        endSession: [],
        foundationModel: [],
        guardrailConfiguration: (_) => smithyClient._json(_),
        idleSessionTTLInSeconds: [],
        inlineSessionState: (_) => se_InlineSessionState(_, context),
        inputText: [],
        instruction: [],
        knowledgeBases: (_) => se_KnowledgeBases(_),
        orchestrationType: [],
        promptCreationConfigurations: (_) => smithyClient._json(_),
        promptOverrideConfiguration: (_) => se_PromptOverrideConfiguration(_),
        streamingConfigurations: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ListFlowExecutionEventsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}/aliases/{flowAliasIdentifier}/executions/{executionIdentifier}/events");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    b.p("flowAliasIdentifier", () => input.flowAliasIdentifier, "{flowAliasIdentifier}", false);
    b.p("executionIdentifier", () => input.executionIdentifier, "{executionIdentifier}", false);
    const query = smithyClient.map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_eT]: [, smithyClient.expectNonNull(input[_eT], `eventType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListFlowExecutionsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}/executions");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    const query = smithyClient.map({
        [_fAI]: [, input[_fAI]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListInvocationsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/sessions/{sessionIdentifier}/invocations");
    b.p("sessionIdentifier", () => input.sessionIdentifier, "{sessionIdentifier}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_ListInvocationStepsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sessions/{sessionIdentifier}/invocationSteps");
    b.p("sessionIdentifier", () => input.sessionIdentifier, "{sessionIdentifier}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        invocationIdentifier: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_ListSessionsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/sessions");
    const query = smithyClient.map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_OptimizePromptCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/optimize-prompt");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        input: (_) => smithyClient._json(_),
        targetModelId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_PutInvocationStepCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sessions/{sessionIdentifier}/invocationSteps");
    b.p("sessionIdentifier", () => input.sessionIdentifier, "{sessionIdentifier}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        invocationIdentifier: [],
        invocationStepId: [],
        invocationStepTime: (_) => smithyClient.serializeDateTime(_),
        payload: (_) => se_InvocationStepPayload(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_RerankCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/rerank");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        nextToken: [],
        queries: (_) => smithyClient._json(_),
        rerankingConfiguration: (_) => se_RerankingConfiguration(_),
        sources: (_) => se_RerankSourcesList(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_RetrieveCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgebases/{knowledgeBaseId}/retrieve");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        guardrailConfiguration: (_) => smithyClient._json(_),
        nextToken: [],
        retrievalConfiguration: (_) => se_KnowledgeBaseRetrievalConfiguration(_),
        retrievalQuery: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_RetrieveAndGenerateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/retrieveAndGenerate");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        input: (_) => smithyClient._json(_),
        retrieveAndGenerateConfiguration: (_) => se_RetrieveAndGenerateConfiguration(_, context),
        sessionConfiguration: (_) => smithyClient._json(_),
        sessionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_RetrieveAndGenerateStreamCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/retrieveAndGenerateStream");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        input: (_) => smithyClient._json(_),
        retrieveAndGenerateConfiguration: (_) => se_RetrieveAndGenerateConfiguration(_, context),
        sessionConfiguration: (_) => smithyClient._json(_),
        sessionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StartFlowExecutionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flows/{flowIdentifier}/aliases/{flowAliasIdentifier}/executions");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    b.p("flowAliasIdentifier", () => input.flowAliasIdentifier, "{flowAliasIdentifier}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        flowExecutionName: [],
        inputs: (_) => se_FlowInputs(_),
        modelPerformanceConfiguration: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StopFlowExecutionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/flows/{flowIdentifier}/aliases/{flowAliasIdentifier}/executions/{executionIdentifier}/stop");
    b.p("flowIdentifier", () => input.flowIdentifier, "{flowIdentifier}", false);
    b.p("flowAliasIdentifier", () => input.flowAliasIdentifier, "{flowAliasIdentifier}", false);
    b.p("executionIdentifier", () => input.executionIdentifier, "{executionIdentifier}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_TagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UntagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = smithyClient.map({
        [_tK]: [smithyClient.expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateSessionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sessions/{sessionIdentifier}");
    b.p("sessionIdentifier", () => input.sessionIdentifier, "{sessionIdentifier}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        sessionMetadata: (_) => smithyClient._json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const de_CreateInvocationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        invocationId: smithyClient.expectString,
        sessionId: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateSessionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        sessionArn: smithyClient.expectString,
        sessionId: smithyClient.expectString,
        sessionStatus: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteAgentMemoryCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_EndSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        sessionArn: smithyClient.expectString,
        sessionId: smithyClient.expectString,
        sessionStatus: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GenerateQueryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        queries: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetAgentMemoryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        memoryContents: (_) => de_Memories(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetExecutionFlowSnapshotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        customerEncryptionKeyArn: smithyClient.expectString,
        definition: smithyClient.expectString,
        executionRoleArn: smithyClient.expectString,
        flowAliasIdentifier: smithyClient.expectString,
        flowIdentifier: smithyClient.expectString,
        flowVersion: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetFlowExecutionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        endedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        errors: smithyClient._json,
        executionArn: smithyClient.expectString,
        flowAliasIdentifier: smithyClient.expectString,
        flowIdentifier: smithyClient.expectString,
        flowVersion: smithyClient.expectString,
        startedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        status: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetInvocationStepCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        invocationStep: (_) => de_InvocationStep(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        encryptionKeyArn: smithyClient.expectString,
        lastUpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        sessionArn: smithyClient.expectString,
        sessionId: smithyClient.expectString,
        sessionMetadata: smithyClient._json,
        sessionStatus: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_InvokeAgentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_cT]: [, output.headers[_xabact]],
        [_sI]: [, output.headers[_xabasi]],
        [_mI]: [, output.headers[_xabami]],
    });
    const data = output.body;
    contents.completion = de_ResponseStream(data, context);
    return contents;
};
const de_InvokeFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_eI]: [, output.headers[_xabfei]],
    });
    const data = output.body;
    contents.responseStream = de_FlowResponseStream(data, context);
    return contents;
};
const de_InvokeInlineAgentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_cT]: [, output.headers[_xabact]],
        [_sI]: [, output.headers[_xabasi]],
    });
    const data = output.body;
    contents.completion = de_InlineAgentResponseStream(data, context);
    return contents;
};
const de_ListFlowExecutionEventsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        flowExecutionEvents: (_) => de_FlowExecutionEvents(_, context),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListFlowExecutionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        flowExecutionSummaries: (_) => de_FlowExecutionSummaries(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListInvocationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        invocationSummaries: (_) => de_InvocationSummaries(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListInvocationStepsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        invocationStepSummaries: (_) => de_InvocationStepSummaries(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListSessionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        nextToken: smithyClient.expectString,
        sessionSummaries: (_) => de_SessionSummaries(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_OptimizePromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = output.body;
    contents.optimizedPrompt = de_OptimizedPromptStream(data, context);
    return contents;
};
const de_PutInvocationStepCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        invocationStepId: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_RerankCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        nextToken: smithyClient.expectString,
        results: (_) => de_RerankResultsList(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_RetrieveCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        guardrailAction: smithyClient.expectString,
        nextToken: smithyClient.expectString,
        retrievalResults: (_) => de_KnowledgeBaseRetrievalResults(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_RetrieveAndGenerateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        citations: (_) => de_Citations(_),
        guardrailAction: smithyClient.expectString,
        output: smithyClient._json,
        sessionId: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_RetrieveAndGenerateStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_sI]: [, output.headers[_xabkbsi]],
    });
    const data = output.body;
    contents.stream = de_RetrieveAndGenerateStreamResponseOutput(data, context);
    return contents;
};
const de_StartFlowExecutionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        executionArn: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StopFlowExecutionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        executionArn: smithyClient.expectString,
        status: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UpdateSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        lastUpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        sessionArn: smithyClient.expectString,
        sessionId: smithyClient.expectString,
        sessionStatus: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.bedrockagentruntime#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.bedrockagentruntime#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "InternalServerException":
        case "com.amazonaws.bedrockagentruntime#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.bedrockagentruntime#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.bedrockagentruntime#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.bedrockagentruntime#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        case "ValidationException":
        case "com.amazonaws.bedrockagentruntime#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput);
        case "BadGatewayException":
        case "com.amazonaws.bedrockagentruntime#BadGatewayException":
            throw await de_BadGatewayExceptionRes(parsedOutput);
        case "DependencyFailedException":
        case "com.amazonaws.bedrockagentruntime#DependencyFailedException":
            throw await de_DependencyFailedExceptionRes(parsedOutput);
        case "ModelNotReadyException":
        case "com.amazonaws.bedrockagentruntime#ModelNotReadyException":
            throw await de_ModelNotReadyExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = smithyClient.withBaseException(BedrockAgentRuntimeServiceException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_BadGatewayExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
        resourceName: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadGatewayException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_DependencyFailedExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
        resourceName: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new DependencyFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
        reason: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ModelNotReadyExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ModelNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_FlowResponseStream = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["flowOutputEvent"] != null) {
            return {
                flowOutputEvent: await de_FlowOutputEvent_event(event["flowOutputEvent"], context),
            };
        }
        if (event["flowCompletionEvent"] != null) {
            return {
                flowCompletionEvent: await de_FlowCompletionEvent_event(event["flowCompletionEvent"], context),
            };
        }
        if (event["flowTraceEvent"] != null) {
            return {
                flowTraceEvent: await de_FlowTraceEvent_event(event["flowTraceEvent"], context),
            };
        }
        if (event["internalServerException"] != null) {
            return {
                internalServerException: await de_InternalServerException_event(event["internalServerException"], context),
            };
        }
        if (event["validationException"] != null) {
            return {
                validationException: await de_ValidationException_event(event["validationException"], context),
            };
        }
        if (event["resourceNotFoundException"] != null) {
            return {
                resourceNotFoundException: await de_ResourceNotFoundException_event(event["resourceNotFoundException"], context),
            };
        }
        if (event["serviceQuotaExceededException"] != null) {
            return {
                serviceQuotaExceededException: await de_ServiceQuotaExceededException_event(event["serviceQuotaExceededException"], context),
            };
        }
        if (event["throttlingException"] != null) {
            return {
                throttlingException: await de_ThrottlingException_event(event["throttlingException"], context),
            };
        }
        if (event["accessDeniedException"] != null) {
            return {
                accessDeniedException: await de_AccessDeniedException_event(event["accessDeniedException"], context),
            };
        }
        if (event["conflictException"] != null) {
            return {
                conflictException: await de_ConflictException_event(event["conflictException"], context),
            };
        }
        if (event["dependencyFailedException"] != null) {
            return {
                dependencyFailedException: await de_DependencyFailedException_event(event["dependencyFailedException"], context),
            };
        }
        if (event["badGatewayException"] != null) {
            return {
                badGatewayException: await de_BadGatewayException_event(event["badGatewayException"], context),
            };
        }
        if (event["flowMultiTurnInputRequestEvent"] != null) {
            return {
                flowMultiTurnInputRequestEvent: await de_FlowMultiTurnInputRequestEvent_event(event["flowMultiTurnInputRequestEvent"], context),
            };
        }
        return { $unknown: event };
    });
};
const de_InlineAgentResponseStream = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["chunk"] != null) {
            return {
                chunk: await de_InlineAgentPayloadPart_event(event["chunk"], context),
            };
        }
        if (event["trace"] != null) {
            return {
                trace: await de_InlineAgentTracePart_event(event["trace"], context),
            };
        }
        if (event["returnControl"] != null) {
            return {
                returnControl: await de_InlineAgentReturnControlPayload_event(event["returnControl"], context),
            };
        }
        if (event["internalServerException"] != null) {
            return {
                internalServerException: await de_InternalServerException_event(event["internalServerException"], context),
            };
        }
        if (event["validationException"] != null) {
            return {
                validationException: await de_ValidationException_event(event["validationException"], context),
            };
        }
        if (event["resourceNotFoundException"] != null) {
            return {
                resourceNotFoundException: await de_ResourceNotFoundException_event(event["resourceNotFoundException"], context),
            };
        }
        if (event["serviceQuotaExceededException"] != null) {
            return {
                serviceQuotaExceededException: await de_ServiceQuotaExceededException_event(event["serviceQuotaExceededException"], context),
            };
        }
        if (event["throttlingException"] != null) {
            return {
                throttlingException: await de_ThrottlingException_event(event["throttlingException"], context),
            };
        }
        if (event["accessDeniedException"] != null) {
            return {
                accessDeniedException: await de_AccessDeniedException_event(event["accessDeniedException"], context),
            };
        }
        if (event["conflictException"] != null) {
            return {
                conflictException: await de_ConflictException_event(event["conflictException"], context),
            };
        }
        if (event["dependencyFailedException"] != null) {
            return {
                dependencyFailedException: await de_DependencyFailedException_event(event["dependencyFailedException"], context),
            };
        }
        if (event["badGatewayException"] != null) {
            return {
                badGatewayException: await de_BadGatewayException_event(event["badGatewayException"], context),
            };
        }
        if (event["files"] != null) {
            return {
                files: await de_InlineAgentFilePart_event(event["files"], context),
            };
        }
        return { $unknown: event };
    });
};
const de_OptimizedPromptStream = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["optimizedPromptEvent"] != null) {
            return {
                optimizedPromptEvent: await de_OptimizedPromptEvent_event(event["optimizedPromptEvent"], context),
            };
        }
        if (event["analyzePromptEvent"] != null) {
            return {
                analyzePromptEvent: await de_AnalyzePromptEvent_event(event["analyzePromptEvent"], context),
            };
        }
        if (event["internalServerException"] != null) {
            return {
                internalServerException: await de_InternalServerException_event(event["internalServerException"], context),
            };
        }
        if (event["throttlingException"] != null) {
            return {
                throttlingException: await de_ThrottlingException_event(event["throttlingException"], context),
            };
        }
        if (event["validationException"] != null) {
            return {
                validationException: await de_ValidationException_event(event["validationException"], context),
            };
        }
        if (event["dependencyFailedException"] != null) {
            return {
                dependencyFailedException: await de_DependencyFailedException_event(event["dependencyFailedException"], context),
            };
        }
        if (event["accessDeniedException"] != null) {
            return {
                accessDeniedException: await de_AccessDeniedException_event(event["accessDeniedException"], context),
            };
        }
        if (event["badGatewayException"] != null) {
            return {
                badGatewayException: await de_BadGatewayException_event(event["badGatewayException"], context),
            };
        }
        return { $unknown: event };
    });
};
const de_ResponseStream = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["chunk"] != null) {
            return {
                chunk: await de_PayloadPart_event(event["chunk"], context),
            };
        }
        if (event["trace"] != null) {
            return {
                trace: await de_TracePart_event(event["trace"], context),
            };
        }
        if (event["returnControl"] != null) {
            return {
                returnControl: await de_ReturnControlPayload_event(event["returnControl"], context),
            };
        }
        if (event["internalServerException"] != null) {
            return {
                internalServerException: await de_InternalServerException_event(event["internalServerException"], context),
            };
        }
        if (event["validationException"] != null) {
            return {
                validationException: await de_ValidationException_event(event["validationException"], context),
            };
        }
        if (event["resourceNotFoundException"] != null) {
            return {
                resourceNotFoundException: await de_ResourceNotFoundException_event(event["resourceNotFoundException"], context),
            };
        }
        if (event["serviceQuotaExceededException"] != null) {
            return {
                serviceQuotaExceededException: await de_ServiceQuotaExceededException_event(event["serviceQuotaExceededException"], context),
            };
        }
        if (event["throttlingException"] != null) {
            return {
                throttlingException: await de_ThrottlingException_event(event["throttlingException"], context),
            };
        }
        if (event["accessDeniedException"] != null) {
            return {
                accessDeniedException: await de_AccessDeniedException_event(event["accessDeniedException"], context),
            };
        }
        if (event["conflictException"] != null) {
            return {
                conflictException: await de_ConflictException_event(event["conflictException"], context),
            };
        }
        if (event["dependencyFailedException"] != null) {
            return {
                dependencyFailedException: await de_DependencyFailedException_event(event["dependencyFailedException"], context),
            };
        }
        if (event["badGatewayException"] != null) {
            return {
                badGatewayException: await de_BadGatewayException_event(event["badGatewayException"], context),
            };
        }
        if (event["modelNotReadyException"] != null) {
            return {
                modelNotReadyException: await de_ModelNotReadyException_event(event["modelNotReadyException"], context),
            };
        }
        if (event["files"] != null) {
            return {
                files: await de_FilePart_event(event["files"], context),
            };
        }
        return { $unknown: event };
    });
};
const de_RetrieveAndGenerateStreamResponseOutput = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["output"] != null) {
            return {
                output: await de_RetrieveAndGenerateOutputEvent_event(event["output"], context),
            };
        }
        if (event["citation"] != null) {
            return {
                citation: await de_CitationEvent_event(event["citation"], context),
            };
        }
        if (event["guardrail"] != null) {
            return {
                guardrail: await de_GuardrailEvent_event(event["guardrail"], context),
            };
        }
        if (event["internalServerException"] != null) {
            return {
                internalServerException: await de_InternalServerException_event(event["internalServerException"], context),
            };
        }
        if (event["validationException"] != null) {
            return {
                validationException: await de_ValidationException_event(event["validationException"], context),
            };
        }
        if (event["resourceNotFoundException"] != null) {
            return {
                resourceNotFoundException: await de_ResourceNotFoundException_event(event["resourceNotFoundException"], context),
            };
        }
        if (event["serviceQuotaExceededException"] != null) {
            return {
                serviceQuotaExceededException: await de_ServiceQuotaExceededException_event(event["serviceQuotaExceededException"], context),
            };
        }
        if (event["throttlingException"] != null) {
            return {
                throttlingException: await de_ThrottlingException_event(event["throttlingException"], context),
            };
        }
        if (event["accessDeniedException"] != null) {
            return {
                accessDeniedException: await de_AccessDeniedException_event(event["accessDeniedException"], context),
            };
        }
        if (event["conflictException"] != null) {
            return {
                conflictException: await de_ConflictException_event(event["conflictException"], context),
            };
        }
        if (event["dependencyFailedException"] != null) {
            return {
                dependencyFailedException: await de_DependencyFailedException_event(event["dependencyFailedException"], context),
            };
        }
        if (event["badGatewayException"] != null) {
            return {
                badGatewayException: await de_BadGatewayException_event(event["badGatewayException"], context),
            };
        }
        return { $unknown: event };
    });
};
const de_AccessDeniedException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_AccessDeniedExceptionRes(parsedOutput);
};
const de_AnalyzePromptEvent_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, smithyClient._json(data));
    return contents;
};
const de_BadGatewayException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_BadGatewayExceptionRes(parsedOutput);
};
const de_CitationEvent_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, de_CitationEvent(data));
    return contents;
};
const de_ConflictException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_ConflictExceptionRes(parsedOutput);
};
const de_DependencyFailedException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_DependencyFailedExceptionRes(parsedOutput);
};
const de_FilePart_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, de_FilePart(data, context));
    return contents;
};
const de_FlowCompletionEvent_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, smithyClient._json(data));
    return contents;
};
const de_FlowMultiTurnInputRequestEvent_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, de_FlowMultiTurnInputRequestEvent(data));
    return contents;
};
const de_FlowOutputEvent_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, de_FlowOutputEvent(data));
    return contents;
};
const de_FlowTraceEvent_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, de_FlowTraceEvent(data, context));
    return contents;
};
const de_GuardrailEvent_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, smithyClient._json(data));
    return contents;
};
const de_InlineAgentFilePart_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, de_InlineAgentFilePart(data, context));
    return contents;
};
const de_InlineAgentPayloadPart_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, de_InlineAgentPayloadPart(data, context));
    return contents;
};
const de_InlineAgentReturnControlPayload_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, smithyClient._json(data));
    return contents;
};
const de_InlineAgentTracePart_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, de_InlineAgentTracePart(data, context));
    return contents;
};
const de_InternalServerException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_InternalServerExceptionRes(parsedOutput);
};
const de_ModelNotReadyException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_ModelNotReadyExceptionRes(parsedOutput);
};
const de_OptimizedPromptEvent_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, smithyClient._json(data));
    return contents;
};
const de_PayloadPart_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, de_PayloadPart(data, context));
    return contents;
};
const de_ResourceNotFoundException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_ResourceNotFoundExceptionRes(parsedOutput);
};
const de_RetrieveAndGenerateOutputEvent_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, smithyClient._json(data));
    return contents;
};
const de_ReturnControlPayload_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, smithyClient._json(data));
    return contents;
};
const de_ServiceQuotaExceededException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_ServiceQuotaExceededExceptionRes(parsedOutput);
};
const de_ThrottlingException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_ThrottlingExceptionRes(parsedOutput);
};
const de_TracePart_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, de_TracePart(data, context));
    return contents;
};
const de_ValidationException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_ValidationExceptionRes(parsedOutput);
};
const se_AdditionalModelRequestFields = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AdditionalModelRequestFieldsValue(value);
        return acc;
    }, {});
};
const se_AdditionalModelRequestFieldsValue = (input, context) => {
    return input;
};
const se_ApiResult = (input, context) => {
    return smithyClient.take(input, {
        actionGroup: [],
        agentId: [],
        apiPath: [],
        confirmationState: [],
        httpMethod: [],
        httpStatusCode: [],
        responseBody: (_) => se_ResponseBody(_, context),
        responseState: [],
    });
};
const se_BedrockRerankingConfiguration = (input, context) => {
    return smithyClient.take(input, {
        modelConfiguration: (_) => se_BedrockRerankingModelConfiguration(_),
        numberOfResults: [],
    });
};
const se_BedrockRerankingModelConfiguration = (input, context) => {
    return smithyClient.take(input, {
        additionalModelRequestFields: (_) => se_AdditionalModelRequestFields(_),
        modelArn: [],
    });
};
const se_BedrockSessionContentBlock = (input, context) => {
    return exports.BedrockSessionContentBlock.visit(input, {
        image: (value) => ({ image: se_ImageBlock(value, context) }),
        text: (value) => ({ text: value }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_BedrockSessionContentBlocks = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_BedrockSessionContentBlock(entry, context);
    });
};
const se_ByteContentDoc = (input, context) => {
    return smithyClient.take(input, {
        contentType: [],
        data: context.base64Encoder,
        identifier: [],
    });
};
const se_ByteContentFile = (input, context) => {
    return smithyClient.take(input, {
        data: context.base64Encoder,
        mediaType: [],
    });
};
const se_Collaborator = (input, context) => {
    return smithyClient.take(input, {
        actionGroups: smithyClient._json,
        agentCollaboration: [],
        agentName: [],
        collaboratorConfigurations: smithyClient._json,
        customerEncryptionKeyArn: [],
        foundationModel: [],
        guardrailConfiguration: smithyClient._json,
        idleSessionTTLInSeconds: [],
        instruction: [],
        knowledgeBases: (_) => se_KnowledgeBases(_),
        promptOverrideConfiguration: (_) => se_PromptOverrideConfiguration(_),
    });
};
const se_Collaborators = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Collaborator(entry);
    });
};
const se_ContentBody = (input, context) => {
    return smithyClient.take(input, {
        body: [],
        images: (_) => se_ImageInputs(_, context),
    });
};
const se_ExternalSource = (input, context) => {
    return smithyClient.take(input, {
        byteContent: (_) => se_ByteContentDoc(_, context),
        s3Location: smithyClient._json,
        sourceType: [],
    });
};
const se_ExternalSources = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ExternalSource(entry, context);
    });
};
const se_ExternalSourcesGenerationConfiguration = (input, context) => {
    return smithyClient.take(input, {
        additionalModelRequestFields: (_) => se_AdditionalModelRequestFields(_),
        guardrailConfiguration: smithyClient._json,
        inferenceConfig: (_) => se_InferenceConfig(_),
        performanceConfig: smithyClient._json,
        promptTemplate: smithyClient._json,
    });
};
const se_ExternalSourcesRetrieveAndGenerateConfiguration = (input, context) => {
    return smithyClient.take(input, {
        generationConfiguration: (_) => se_ExternalSourcesGenerationConfiguration(_),
        modelArn: [],
        sources: (_) => se_ExternalSources(_, context),
    });
};
const se_FileSource = (input, context) => {
    return smithyClient.take(input, {
        byteContent: (_) => se_ByteContentFile(_, context),
        s3Location: smithyClient._json,
        sourceType: [],
    });
};
const se_FilterAttribute = (input, context) => {
    return smithyClient.take(input, {
        key: [],
        value: (_) => se_FilterValue(_),
    });
};
const se_FilterValue = (input, context) => {
    return input;
};
const se_FlowInput = (input, context) => {
    return smithyClient.take(input, {
        content: (_) => se_FlowInputContent(_),
        nodeInputName: [],
        nodeName: [],
        nodeOutputName: [],
    });
};
const se_FlowInputContent = (input, context) => {
    return exports.FlowInputContent.visit(input, {
        document: (value) => ({ document: se_Document(value) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_FlowInputs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FlowInput(entry);
    });
};
const se_FunctionResult = (input, context) => {
    return smithyClient.take(input, {
        actionGroup: [],
        agentId: [],
        confirmationState: [],
        function: [],
        responseBody: (_) => se_ResponseBody(_, context),
        responseState: [],
    });
};
const se_GenerationConfiguration = (input, context) => {
    return smithyClient.take(input, {
        additionalModelRequestFields: (_) => se_AdditionalModelRequestFields(_),
        guardrailConfiguration: smithyClient._json,
        inferenceConfig: (_) => se_InferenceConfig(_),
        performanceConfig: smithyClient._json,
        promptTemplate: smithyClient._json,
    });
};
const se_ImageBlock = (input, context) => {
    return smithyClient.take(input, {
        format: [],
        source: (_) => se_ImageSource(_, context),
    });
};
const se_ImageInput = (input, context) => {
    return smithyClient.take(input, {
        format: [],
        source: (_) => se_ImageInputSource(_, context),
    });
};
const se_ImageInputs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ImageInput(entry, context);
    });
};
const se_ImageInputSource = (input, context) => {
    return exports.ImageInputSource.visit(input, {
        bytes: (value) => ({ bytes: context.base64Encoder(value) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_ImageSource = (input, context) => {
    return exports.ImageSource.visit(input, {
        bytes: (value) => ({ bytes: context.base64Encoder(value) }),
        s3Location: (value) => ({ s3Location: smithyClient._json(value) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_InferenceConfig = (input, context) => {
    return smithyClient.take(input, {
        textInferenceConfig: (_) => se_TextInferenceConfig(_),
    });
};
const se_InferenceConfiguration = (input, context) => {
    return smithyClient.take(input, {
        maximumLength: [],
        stopSequences: smithyClient._json,
        temperature: smithyClient.serializeFloat,
        topK: [],
        topP: smithyClient.serializeFloat,
    });
};
const se_InlineSessionState = (input, context) => {
    return smithyClient.take(input, {
        conversationHistory: smithyClient._json,
        files: (_) => se_InputFiles(_, context),
        invocationId: [],
        promptSessionAttributes: smithyClient._json,
        returnControlInvocationResults: (_) => se_ReturnControlInvocationResults(_, context),
        sessionAttributes: smithyClient._json,
    });
};
const se_InputFile = (input, context) => {
    return smithyClient.take(input, {
        name: [],
        source: (_) => se_FileSource(_, context),
        useCase: [],
    });
};
const se_InputFiles = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputFile(entry, context);
    });
};
const se_InvocationResultMember = (input, context) => {
    return exports.InvocationResultMember.visit(input, {
        apiResult: (value) => ({ apiResult: se_ApiResult(value, context) }),
        functionResult: (value) => ({ functionResult: se_FunctionResult(value, context) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_InvocationStepPayload = (input, context) => {
    return exports.InvocationStepPayload.visit(input, {
        contentBlocks: (value) => ({ contentBlocks: se_BedrockSessionContentBlocks(value, context) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_KnowledgeBase = (input, context) => {
    return smithyClient.take(input, {
        description: [],
        knowledgeBaseId: [],
        retrievalConfiguration: (_) => se_KnowledgeBaseRetrievalConfiguration(_),
    });
};
const se_KnowledgeBaseConfiguration = (input, context) => {
    return smithyClient.take(input, {
        knowledgeBaseId: [],
        retrievalConfiguration: (_) => se_KnowledgeBaseRetrievalConfiguration(_),
    });
};
const se_KnowledgeBaseConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_KnowledgeBaseConfiguration(entry);
    });
};
const se_KnowledgeBaseRetrievalConfiguration = (input, context) => {
    return smithyClient.take(input, {
        vectorSearchConfiguration: (_) => se_KnowledgeBaseVectorSearchConfiguration(_),
    });
};
const se_KnowledgeBaseRetrieveAndGenerateConfiguration = (input, context) => {
    return smithyClient.take(input, {
        generationConfiguration: (_) => se_GenerationConfiguration(_),
        knowledgeBaseId: [],
        modelArn: [],
        orchestrationConfiguration: (_) => se_OrchestrationConfiguration(_),
        retrievalConfiguration: (_) => se_KnowledgeBaseRetrievalConfiguration(_),
    });
};
const se_KnowledgeBases = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_KnowledgeBase(entry);
    });
};
const se_KnowledgeBaseVectorSearchConfiguration = (input, context) => {
    return smithyClient.take(input, {
        filter: (_) => se_RetrievalFilter(_),
        implicitFilterConfiguration: smithyClient._json,
        numberOfResults: [],
        overrideSearchType: [],
        rerankingConfiguration: (_) => se_VectorSearchRerankingConfiguration(_),
    });
};
const se_OrchestrationConfiguration = (input, context) => {
    return smithyClient.take(input, {
        additionalModelRequestFields: (_) => se_AdditionalModelRequestFields(_),
        inferenceConfig: (_) => se_InferenceConfig(_),
        performanceConfig: smithyClient._json,
        promptTemplate: smithyClient._json,
        queryTransformationConfiguration: smithyClient._json,
    });
};
const se_PromptConfiguration = (input, context) => {
    return smithyClient.take(input, {
        additionalModelRequestFields: (_) => se_Document(_),
        basePromptTemplate: [],
        foundationModel: [],
        inferenceConfiguration: (_) => se_InferenceConfiguration(_),
        parserMode: [],
        promptCreationMode: [],
        promptState: [],
        promptType: [],
    });
};
const se_PromptConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PromptConfiguration(entry);
    });
};
const se_PromptOverrideConfiguration = (input, context) => {
    return smithyClient.take(input, {
        overrideLambda: [],
        promptConfigurations: (_) => se_PromptConfigurations(_),
    });
};
const se_RerankDocument = (input, context) => {
    return smithyClient.take(input, {
        jsonDocument: (_) => se_Document(_),
        textDocument: smithyClient._json,
        type: [],
    });
};
const se_RerankingConfiguration = (input, context) => {
    return smithyClient.take(input, {
        bedrockRerankingConfiguration: (_) => se_BedrockRerankingConfiguration(_),
        type: [],
    });
};
const se_RerankSource = (input, context) => {
    return smithyClient.take(input, {
        inlineDocumentSource: (_) => se_RerankDocument(_),
        type: [],
    });
};
const se_RerankSourcesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RerankSource(entry);
    });
};
const se_ResponseBody = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ContentBody(value, context);
        return acc;
    }, {});
};
const se_RetrievalFilter = (input, context) => {
    return exports.RetrievalFilter.visit(input, {
        andAll: (value) => ({ andAll: se_RetrievalFilterList(value) }),
        equals: (value) => ({ equals: se_FilterAttribute(value) }),
        greaterThan: (value) => ({ greaterThan: se_FilterAttribute(value) }),
        greaterThanOrEquals: (value) => ({ greaterThanOrEquals: se_FilterAttribute(value) }),
        in: (value) => ({ in: se_FilterAttribute(value) }),
        lessThan: (value) => ({ lessThan: se_FilterAttribute(value) }),
        lessThanOrEquals: (value) => ({ lessThanOrEquals: se_FilterAttribute(value) }),
        listContains: (value) => ({ listContains: se_FilterAttribute(value) }),
        notEquals: (value) => ({ notEquals: se_FilterAttribute(value) }),
        notIn: (value) => ({ notIn: se_FilterAttribute(value) }),
        orAll: (value) => ({ orAll: se_RetrievalFilterList(value) }),
        startsWith: (value) => ({ startsWith: se_FilterAttribute(value) }),
        stringContains: (value) => ({ stringContains: se_FilterAttribute(value) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_RetrievalFilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RetrievalFilter(entry);
    });
};
const se_RetrieveAndGenerateConfiguration = (input, context) => {
    return smithyClient.take(input, {
        externalSourcesConfiguration: (_) => se_ExternalSourcesRetrieveAndGenerateConfiguration(_, context),
        knowledgeBaseConfiguration: (_) => se_KnowledgeBaseRetrieveAndGenerateConfiguration(_),
        type: [],
    });
};
const se_ReturnControlInvocationResults = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InvocationResultMember(entry, context);
    });
};
const se_SessionState = (input, context) => {
    return smithyClient.take(input, {
        conversationHistory: smithyClient._json,
        files: (_) => se_InputFiles(_, context),
        invocationId: [],
        knowledgeBaseConfigurations: (_) => se_KnowledgeBaseConfigurations(_),
        promptSessionAttributes: smithyClient._json,
        returnControlInvocationResults: (_) => se_ReturnControlInvocationResults(_, context),
        sessionAttributes: smithyClient._json,
    });
};
const se_TextInferenceConfig = (input, context) => {
    return smithyClient.take(input, {
        maxTokens: [],
        stopSequences: smithyClient._json,
        temperature: smithyClient.serializeFloat,
        topP: smithyClient.serializeFloat,
    });
};
const se_VectorSearchBedrockRerankingConfiguration = (input, context) => {
    return smithyClient.take(input, {
        metadataConfiguration: smithyClient._json,
        modelConfiguration: (_) => se_VectorSearchBedrockRerankingModelConfiguration(_),
        numberOfRerankedResults: [],
    });
};
const se_VectorSearchBedrockRerankingModelConfiguration = (input, context) => {
    return smithyClient.take(input, {
        additionalModelRequestFields: (_) => se_AdditionalModelRequestFields(_),
        modelArn: [],
    });
};
const se_VectorSearchRerankingConfiguration = (input, context) => {
    return smithyClient.take(input, {
        bedrockRerankingConfiguration: (_) => se_VectorSearchBedrockRerankingConfiguration(_),
        type: [],
    });
};
const se_Document = (input, context) => {
    return input;
};
const de_ActionGroupInvocationOutput = (output, context) => {
    return smithyClient.take(output, {
        metadata: (_) => de_Metadata(_),
        text: smithyClient.expectString,
    });
};
const de_AgentCollaboratorInputPayload = (output, context) => {
    return smithyClient.take(output, {
        returnControlResults: (_) => de_ReturnControlResults(_, context),
        text: smithyClient.expectString,
        type: smithyClient.expectString,
    });
};
const de_AgentCollaboratorInvocationInput = (output, context) => {
    return smithyClient.take(output, {
        agentCollaboratorAliasArn: smithyClient.expectString,
        agentCollaboratorName: smithyClient.expectString,
        input: (_) => de_AgentCollaboratorInputPayload(_, context),
    });
};
const de_AgentCollaboratorInvocationOutput = (output, context) => {
    return smithyClient.take(output, {
        agentCollaboratorAliasArn: smithyClient.expectString,
        agentCollaboratorName: smithyClient.expectString,
        metadata: (_) => de_Metadata(_),
        output: smithyClient._json,
    });
};
const de_AgentTraces = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TracePart(entry, context);
    });
    return retVal;
};
const de_ApiResult = (output, context) => {
    return smithyClient.take(output, {
        actionGroup: smithyClient.expectString,
        agentId: smithyClient.expectString,
        apiPath: smithyClient.expectString,
        confirmationState: smithyClient.expectString,
        httpMethod: smithyClient.expectString,
        httpStatusCode: smithyClient.expectInt32,
        responseBody: (_) => de_ResponseBody(_, context),
        responseState: smithyClient.expectString,
    });
};
const de_Attribution = (output, context) => {
    return smithyClient.take(output, {
        citations: (_) => de_Citations(_),
    });
};
const de_BedrockSessionContentBlock = (output, context) => {
    if (output.image != null) {
        return {
            image: de_ImageBlock(output.image, context),
        };
    }
    if (smithyClient.expectString(output.text) !== undefined) {
        return { text: smithyClient.expectString(output.text) };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_BedrockSessionContentBlocks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BedrockSessionContentBlock(core$1.awsExpectUnion(entry), context);
    });
    return retVal;
};
const de_Citation = (output, context) => {
    return smithyClient.take(output, {
        generatedResponsePart: smithyClient._json,
        retrievedReferences: (_) => de_RetrievedReferences(_),
    });
};
const de_CitationEvent = (output, context) => {
    return smithyClient.take(output, {
        citation: (_) => de_Citation(_),
        generatedResponsePart: smithyClient._json,
        retrievedReferences: (_) => de_RetrievedReferences(_),
    });
};
const de_Citations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Citation(entry);
    });
    return retVal;
};
const de_CodeInterpreterInvocationOutput = (output, context) => {
    return smithyClient.take(output, {
        executionError: smithyClient.expectString,
        executionOutput: smithyClient.expectString,
        executionTimeout: smithyClient.expectBoolean,
        files: smithyClient._json,
        metadata: (_) => de_Metadata(_),
    });
};
const de_ConditionResultEvent = (output, context) => {
    return smithyClient.take(output, {
        nodeName: smithyClient.expectString,
        satisfiedConditions: smithyClient._json,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_ContentBody = (output, context) => {
    return smithyClient.take(output, {
        body: smithyClient.expectString,
        images: (_) => de_ImageInputs(_, context),
    });
};
const de_FailureTrace = (output, context) => {
    return smithyClient.take(output, {
        failureCode: smithyClient.expectInt32,
        failureReason: smithyClient.expectString,
        metadata: (_) => de_Metadata(_),
        traceId: smithyClient.expectString,
    });
};
const de_FilePart = (output, context) => {
    return smithyClient.take(output, {
        files: (_) => de_OutputFiles(_, context),
    });
};
const de_FinalResponse = (output, context) => {
    return smithyClient.take(output, {
        metadata: (_) => de_Metadata(_),
        text: smithyClient.expectString,
    });
};
const de_FlowExecutionContent = (output, context) => {
    if (output.document != null) {
        return {
            document: de_Document(output.document),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_FlowExecutionEvent = (output, context) => {
    if (output.conditionResultEvent != null) {
        return {
            conditionResultEvent: de_ConditionResultEvent(output.conditionResultEvent),
        };
    }
    if (output.flowFailureEvent != null) {
        return {
            flowFailureEvent: de_FlowFailureEvent(output.flowFailureEvent),
        };
    }
    if (output.flowInputEvent != null) {
        return {
            flowInputEvent: de_FlowExecutionInputEvent(output.flowInputEvent),
        };
    }
    if (output.flowOutputEvent != null) {
        return {
            flowOutputEvent: de_FlowExecutionOutputEvent(output.flowOutputEvent),
        };
    }
    if (output.nodeActionEvent != null) {
        return {
            nodeActionEvent: de_NodeActionEvent(output.nodeActionEvent),
        };
    }
    if (output.nodeDependencyEvent != null) {
        return {
            nodeDependencyEvent: de_NodeDependencyEvent(output.nodeDependencyEvent, context),
        };
    }
    if (output.nodeFailureEvent != null) {
        return {
            nodeFailureEvent: de_NodeFailureEvent(output.nodeFailureEvent),
        };
    }
    if (output.nodeInputEvent != null) {
        return {
            nodeInputEvent: de_NodeInputEvent(output.nodeInputEvent),
        };
    }
    if (output.nodeOutputEvent != null) {
        return {
            nodeOutputEvent: de_NodeOutputEvent(output.nodeOutputEvent),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_FlowExecutionEvents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowExecutionEvent(core$1.awsExpectUnion(entry), context);
    });
    return retVal;
};
const de_FlowExecutionInputEvent = (output, context) => {
    return smithyClient.take(output, {
        fields: (_) => de_FlowInputFields(_),
        nodeName: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_FlowExecutionOutputEvent = (output, context) => {
    return smithyClient.take(output, {
        fields: (_) => de_FlowOutputFields(_),
        nodeName: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_FlowExecutionSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowExecutionSummary(entry);
    });
    return retVal;
};
const de_FlowExecutionSummary = (output, context) => {
    return smithyClient.take(output, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        endedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        executionArn: smithyClient.expectString,
        flowAliasIdentifier: smithyClient.expectString,
        flowIdentifier: smithyClient.expectString,
        flowVersion: smithyClient.expectString,
        status: smithyClient.expectString,
    });
};
const de_FlowFailureEvent = (output, context) => {
    return smithyClient.take(output, {
        errorCode: smithyClient.expectString,
        errorMessage: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_FlowInputField = (output, context) => {
    return smithyClient.take(output, {
        content: (_) => de_FlowExecutionContent(core$1.awsExpectUnion(_)),
        name: smithyClient.expectString,
    });
};
const de_FlowInputFields = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowInputField(entry);
    });
    return retVal;
};
const de_FlowMultiTurnInputContent = (output, context) => {
    if (output.document != null) {
        return {
            document: de_Document(output.document),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_FlowMultiTurnInputRequestEvent = (output, context) => {
    return smithyClient.take(output, {
        content: (_) => de_FlowMultiTurnInputContent(core$1.awsExpectUnion(_)),
        nodeName: smithyClient.expectString,
        nodeType: smithyClient.expectString,
    });
};
const de_FlowOutputContent = (output, context) => {
    if (output.document != null) {
        return {
            document: de_Document(output.document),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_FlowOutputEvent = (output, context) => {
    return smithyClient.take(output, {
        content: (_) => de_FlowOutputContent(core$1.awsExpectUnion(_)),
        nodeName: smithyClient.expectString,
        nodeType: smithyClient.expectString,
    });
};
const de_FlowOutputField = (output, context) => {
    return smithyClient.take(output, {
        content: (_) => de_FlowExecutionContent(core$1.awsExpectUnion(_)),
        name: smithyClient.expectString,
    });
};
const de_FlowOutputFields = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowOutputField(entry);
    });
    return retVal;
};
const de_FlowTrace = (output, context) => {
    if (output.conditionNodeResultTrace != null) {
        return {
            conditionNodeResultTrace: de_FlowTraceConditionNodeResultEvent(output.conditionNodeResultTrace),
        };
    }
    if (output.nodeActionTrace != null) {
        return {
            nodeActionTrace: de_FlowTraceNodeActionEvent(output.nodeActionTrace),
        };
    }
    if (output.nodeDependencyTrace != null) {
        return {
            nodeDependencyTrace: de_FlowTraceDependencyEvent(output.nodeDependencyTrace, context),
        };
    }
    if (output.nodeInputTrace != null) {
        return {
            nodeInputTrace: de_FlowTraceNodeInputEvent(output.nodeInputTrace),
        };
    }
    if (output.nodeOutputTrace != null) {
        return {
            nodeOutputTrace: de_FlowTraceNodeOutputEvent(output.nodeOutputTrace),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_FlowTraceConditionNodeResultEvent = (output, context) => {
    return smithyClient.take(output, {
        nodeName: smithyClient.expectString,
        satisfiedConditions: smithyClient._json,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_FlowTraceDependencyEvent = (output, context) => {
    return smithyClient.take(output, {
        nodeName: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        traceElements: (_) => de_TraceElements(core$1.awsExpectUnion(_), context),
    });
};
const de_FlowTraceEvent = (output, context) => {
    return smithyClient.take(output, {
        trace: (_) => de_FlowTrace(core$1.awsExpectUnion(_), context),
    });
};
const de_FlowTraceNodeActionEvent = (output, context) => {
    return smithyClient.take(output, {
        nodeName: smithyClient.expectString,
        operationName: smithyClient.expectString,
        operationRequest: (_) => de_Document(_),
        operationResponse: (_) => de_Document(_),
        requestId: smithyClient.expectString,
        serviceName: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_FlowTraceNodeInputContent = (output, context) => {
    if (output.document != null) {
        return {
            document: de_Document(output.document),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_FlowTraceNodeInputEvent = (output, context) => {
    return smithyClient.take(output, {
        fields: (_) => de_FlowTraceNodeInputFields(_),
        nodeName: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_FlowTraceNodeInputField = (output, context) => {
    return smithyClient.take(output, {
        category: smithyClient.expectString,
        content: (_) => de_FlowTraceNodeInputContent(core$1.awsExpectUnion(_)),
        executionChain: smithyClient._json,
        nodeInputName: smithyClient.expectString,
        source: smithyClient._json,
        type: smithyClient.expectString,
    });
};
const de_FlowTraceNodeInputFields = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowTraceNodeInputField(entry);
    });
    return retVal;
};
const de_FlowTraceNodeOutputContent = (output, context) => {
    if (output.document != null) {
        return {
            document: de_Document(output.document),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_FlowTraceNodeOutputEvent = (output, context) => {
    return smithyClient.take(output, {
        fields: (_) => de_FlowTraceNodeOutputFields(_),
        nodeName: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_FlowTraceNodeOutputField = (output, context) => {
    return smithyClient.take(output, {
        content: (_) => de_FlowTraceNodeOutputContent(core$1.awsExpectUnion(_)),
        next: smithyClient._json,
        nodeOutputName: smithyClient.expectString,
        type: smithyClient.expectString,
    });
};
const de_FlowTraceNodeOutputFields = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowTraceNodeOutputField(entry);
    });
    return retVal;
};
const de_FunctionResult = (output, context) => {
    return smithyClient.take(output, {
        actionGroup: smithyClient.expectString,
        agentId: smithyClient.expectString,
        confirmationState: smithyClient.expectString,
        function: smithyClient.expectString,
        responseBody: (_) => de_ResponseBody(_, context),
        responseState: smithyClient.expectString,
    });
};
const de_GuardrailTrace = (output, context) => {
    return smithyClient.take(output, {
        action: smithyClient.expectString,
        inputAssessments: smithyClient._json,
        metadata: (_) => de_Metadata(_),
        outputAssessments: smithyClient._json,
        traceId: smithyClient.expectString,
    });
};
const de_ImageBlock = (output, context) => {
    return smithyClient.take(output, {
        format: smithyClient.expectString,
        source: (_) => de_ImageSource(core$1.awsExpectUnion(_), context),
    });
};
const de_ImageInput = (output, context) => {
    return smithyClient.take(output, {
        format: smithyClient.expectString,
        source: (_) => de_ImageInputSource(core$1.awsExpectUnion(_), context),
    });
};
const de_ImageInputs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageInput(entry, context);
    });
    return retVal;
};
const de_ImageInputSource = (output, context) => {
    if (output.bytes != null) {
        return {
            bytes: context.base64Decoder(output.bytes),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_ImageSource = (output, context) => {
    if (output.bytes != null) {
        return {
            bytes: context.base64Decoder(output.bytes),
        };
    }
    if (output.s3Location != null) {
        return {
            s3Location: smithyClient._json(output.s3Location),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_InferenceConfiguration = (output, context) => {
    return smithyClient.take(output, {
        maximumLength: smithyClient.expectInt32,
        stopSequences: smithyClient._json,
        temperature: smithyClient.limitedParseFloat32,
        topK: smithyClient.expectInt32,
        topP: smithyClient.limitedParseFloat32,
    });
};
const de_InlineAgentFilePart = (output, context) => {
    return smithyClient.take(output, {
        files: (_) => de_OutputFiles(_, context),
    });
};
const de_InlineAgentPayloadPart = (output, context) => {
    return smithyClient.take(output, {
        attribution: (_) => de_Attribution(_),
        bytes: context.base64Decoder,
    });
};
const de_InlineAgentTracePart = (output, context) => {
    return smithyClient.take(output, {
        callerChain: smithyClient._json,
        collaboratorName: smithyClient.expectString,
        eventTime: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        sessionId: smithyClient.expectString,
        trace: (_) => de_Trace(core$1.awsExpectUnion(_), context),
    });
};
const de_InvocationInput = (output, context) => {
    return smithyClient.take(output, {
        actionGroupInvocationInput: smithyClient._json,
        agentCollaboratorInvocationInput: (_) => de_AgentCollaboratorInvocationInput(_, context),
        codeInterpreterInvocationInput: smithyClient._json,
        invocationType: smithyClient.expectString,
        knowledgeBaseLookupInput: smithyClient._json,
        traceId: smithyClient.expectString,
    });
};
const de_InvocationResultMember = (output, context) => {
    if (output.apiResult != null) {
        return {
            apiResult: de_ApiResult(output.apiResult, context),
        };
    }
    if (output.functionResult != null) {
        return {
            functionResult: de_FunctionResult(output.functionResult, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_InvocationStep = (output, context) => {
    return smithyClient.take(output, {
        invocationId: smithyClient.expectString,
        invocationStepId: smithyClient.expectString,
        invocationStepTime: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        payload: (_) => de_InvocationStepPayload(core$1.awsExpectUnion(_), context),
        sessionId: smithyClient.expectString,
    });
};
const de_InvocationStepPayload = (output, context) => {
    if (output.contentBlocks != null) {
        return {
            contentBlocks: de_BedrockSessionContentBlocks(output.contentBlocks, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_InvocationStepSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InvocationStepSummary(entry);
    });
    return retVal;
};
const de_InvocationStepSummary = (output, context) => {
    return smithyClient.take(output, {
        invocationId: smithyClient.expectString,
        invocationStepId: smithyClient.expectString,
        invocationStepTime: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        sessionId: smithyClient.expectString,
    });
};
const de_InvocationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InvocationSummary(entry);
    });
    return retVal;
};
const de_InvocationSummary = (output, context) => {
    return smithyClient.take(output, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        invocationId: smithyClient.expectString,
        sessionId: smithyClient.expectString,
    });
};
const de_KnowledgeBaseLookupOutput = (output, context) => {
    return smithyClient.take(output, {
        metadata: (_) => de_Metadata(_),
        retrievedReferences: (_) => de_RetrievedReferences(_),
    });
};
const de_KnowledgeBaseRetrievalResult = (output, context) => {
    return smithyClient.take(output, {
        content: smithyClient._json,
        location: smithyClient._json,
        metadata: (_) => de_RetrievalResultMetadata(_),
        score: smithyClient.limitedParseDouble,
    });
};
const de_KnowledgeBaseRetrievalResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KnowledgeBaseRetrievalResult(entry);
    });
    return retVal;
};
const de_Memories = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Memory(core$1.awsExpectUnion(entry));
    });
    return retVal;
};
const de_Memory = (output, context) => {
    if (output.sessionSummary != null) {
        return {
            sessionSummary: de_MemorySessionSummary(output.sessionSummary),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_MemorySessionSummary = (output, context) => {
    return smithyClient.take(output, {
        memoryId: smithyClient.expectString,
        sessionExpiryTime: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        sessionId: smithyClient.expectString,
        sessionStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        summaryText: smithyClient.expectString,
    });
};
const de_Metadata = (output, context) => {
    return smithyClient.take(output, {
        clientRequestId: smithyClient.expectString,
        endTime: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        operationTotalTimeMs: smithyClient.expectLong,
        startTime: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        totalTimeMs: smithyClient.expectLong,
        usage: smithyClient._json,
    });
};
const de_ModelInvocationInput = (output, context) => {
    return smithyClient.take(output, {
        foundationModel: smithyClient.expectString,
        inferenceConfiguration: (_) => de_InferenceConfiguration(_),
        overrideLambda: smithyClient.expectString,
        parserMode: smithyClient.expectString,
        promptCreationMode: smithyClient.expectString,
        text: smithyClient.expectString,
        traceId: smithyClient.expectString,
        type: smithyClient.expectString,
    });
};
const de_NodeActionEvent = (output, context) => {
    return smithyClient.take(output, {
        nodeName: smithyClient.expectString,
        operationName: smithyClient.expectString,
        operationRequest: (_) => de_Document(_),
        operationResponse: (_) => de_Document(_),
        requestId: smithyClient.expectString,
        serviceName: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_NodeDependencyEvent = (output, context) => {
    return smithyClient.take(output, {
        nodeName: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        traceElements: (_) => de_NodeTraceElements(core$1.awsExpectUnion(_), context),
    });
};
const de_NodeExecutionContent = (output, context) => {
    if (output.document != null) {
        return {
            document: de_Document(output.document),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_NodeFailureEvent = (output, context) => {
    return smithyClient.take(output, {
        errorCode: smithyClient.expectString,
        errorMessage: smithyClient.expectString,
        nodeName: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_NodeInputEvent = (output, context) => {
    return smithyClient.take(output, {
        fields: (_) => de_NodeInputFields(_),
        nodeName: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_NodeInputField = (output, context) => {
    return smithyClient.take(output, {
        category: smithyClient.expectString,
        content: (_) => de_NodeExecutionContent(core$1.awsExpectUnion(_)),
        executionChain: smithyClient._json,
        name: smithyClient.expectString,
        source: smithyClient._json,
        type: smithyClient.expectString,
    });
};
const de_NodeInputFields = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NodeInputField(entry);
    });
    return retVal;
};
const de_NodeOutputEvent = (output, context) => {
    return smithyClient.take(output, {
        fields: (_) => de_NodeOutputFields(_),
        nodeName: smithyClient.expectString,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_NodeOutputField = (output, context) => {
    return smithyClient.take(output, {
        content: (_) => de_NodeExecutionContent(core$1.awsExpectUnion(_)),
        name: smithyClient.expectString,
        next: smithyClient._json,
        type: smithyClient.expectString,
    });
};
const de_NodeOutputFields = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NodeOutputField(entry);
    });
    return retVal;
};
const de_NodeTraceElements = (output, context) => {
    if (output.agentTraces != null) {
        return {
            agentTraces: de_AgentTraces(output.agentTraces, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_Observation = (output, context) => {
    return smithyClient.take(output, {
        actionGroupInvocationOutput: (_) => de_ActionGroupInvocationOutput(_),
        agentCollaboratorInvocationOutput: (_) => de_AgentCollaboratorInvocationOutput(_),
        codeInterpreterInvocationOutput: (_) => de_CodeInterpreterInvocationOutput(_),
        finalResponse: (_) => de_FinalResponse(_),
        knowledgeBaseLookupOutput: (_) => de_KnowledgeBaseLookupOutput(_),
        repromptResponse: smithyClient._json,
        traceId: smithyClient.expectString,
        type: smithyClient.expectString,
    });
};
const de_OrchestrationModelInvocationOutput = (output, context) => {
    return smithyClient.take(output, {
        metadata: (_) => de_Metadata(_),
        rawResponse: smithyClient._json,
        reasoningContent: (_) => de_ReasoningContentBlock(core$1.awsExpectUnion(_), context),
        traceId: smithyClient.expectString,
    });
};
const de_OrchestrationTrace = (output, context) => {
    if (output.invocationInput != null) {
        return {
            invocationInput: de_InvocationInput(output.invocationInput, context),
        };
    }
    if (output.modelInvocationInput != null) {
        return {
            modelInvocationInput: de_ModelInvocationInput(output.modelInvocationInput),
        };
    }
    if (output.modelInvocationOutput != null) {
        return {
            modelInvocationOutput: de_OrchestrationModelInvocationOutput(output.modelInvocationOutput, context),
        };
    }
    if (output.observation != null) {
        return {
            observation: de_Observation(output.observation),
        };
    }
    if (output.rationale != null) {
        return {
            rationale: smithyClient._json(output.rationale),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_OutputFile = (output, context) => {
    return smithyClient.take(output, {
        bytes: context.base64Decoder,
        name: smithyClient.expectString,
        type: smithyClient.expectString,
    });
};
const de_OutputFiles = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputFile(entry, context);
    });
    return retVal;
};
const de_PayloadPart = (output, context) => {
    return smithyClient.take(output, {
        attribution: (_) => de_Attribution(_),
        bytes: context.base64Decoder,
    });
};
const de_PostProcessingModelInvocationOutput = (output, context) => {
    return smithyClient.take(output, {
        metadata: (_) => de_Metadata(_),
        parsedResponse: smithyClient._json,
        rawResponse: smithyClient._json,
        reasoningContent: (_) => de_ReasoningContentBlock(core$1.awsExpectUnion(_), context),
        traceId: smithyClient.expectString,
    });
};
const de_PostProcessingTrace = (output, context) => {
    if (output.modelInvocationInput != null) {
        return {
            modelInvocationInput: de_ModelInvocationInput(output.modelInvocationInput),
        };
    }
    if (output.modelInvocationOutput != null) {
        return {
            modelInvocationOutput: de_PostProcessingModelInvocationOutput(output.modelInvocationOutput, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_PreProcessingModelInvocationOutput = (output, context) => {
    return smithyClient.take(output, {
        metadata: (_) => de_Metadata(_),
        parsedResponse: smithyClient._json,
        rawResponse: smithyClient._json,
        reasoningContent: (_) => de_ReasoningContentBlock(core$1.awsExpectUnion(_), context),
        traceId: smithyClient.expectString,
    });
};
const de_PreProcessingTrace = (output, context) => {
    if (output.modelInvocationInput != null) {
        return {
            modelInvocationInput: de_ModelInvocationInput(output.modelInvocationInput),
        };
    }
    if (output.modelInvocationOutput != null) {
        return {
            modelInvocationOutput: de_PreProcessingModelInvocationOutput(output.modelInvocationOutput, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_ReasoningContentBlock = (output, context) => {
    if (output.reasoningText != null) {
        return {
            reasoningText: smithyClient._json(output.reasoningText),
        };
    }
    if (output.redactedContent != null) {
        return {
            redactedContent: context.base64Decoder(output.redactedContent),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_RerankDocument = (output, context) => {
    return smithyClient.take(output, {
        jsonDocument: (_) => de_Document(_),
        textDocument: smithyClient._json,
        type: smithyClient.expectString,
    });
};
const de_RerankResult = (output, context) => {
    return smithyClient.take(output, {
        document: (_) => de_RerankDocument(_),
        index: smithyClient.expectInt32,
        relevanceScore: smithyClient.limitedParseFloat32,
    });
};
const de_RerankResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RerankResult(entry);
    });
    return retVal;
};
const de_ResponseBody = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ContentBody(value, context);
        return acc;
    }, {});
};
const de_RetrievalResultMetadata = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_RetrievalResultMetadataValue(value);
        return acc;
    }, {});
};
const de_RetrievalResultMetadataValue = (output, context) => {
    return output;
};
const de_RetrievedReference = (output, context) => {
    return smithyClient.take(output, {
        content: smithyClient._json,
        location: smithyClient._json,
        metadata: (_) => de_RetrievalResultMetadata(_),
    });
};
const de_RetrievedReferences = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RetrievedReference(entry);
    });
    return retVal;
};
const de_ReturnControlInvocationResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InvocationResultMember(core$1.awsExpectUnion(entry), context);
    });
    return retVal;
};
const de_ReturnControlResults = (output, context) => {
    return smithyClient.take(output, {
        invocationId: smithyClient.expectString,
        returnControlInvocationResults: (_) => de_ReturnControlInvocationResults(_, context),
    });
};
const de_RoutingClassifierModelInvocationOutput = (output, context) => {
    return smithyClient.take(output, {
        metadata: (_) => de_Metadata(_),
        rawResponse: smithyClient._json,
        traceId: smithyClient.expectString,
    });
};
const de_RoutingClassifierTrace = (output, context) => {
    if (output.invocationInput != null) {
        return {
            invocationInput: de_InvocationInput(output.invocationInput, context),
        };
    }
    if (output.modelInvocationInput != null) {
        return {
            modelInvocationInput: de_ModelInvocationInput(output.modelInvocationInput),
        };
    }
    if (output.modelInvocationOutput != null) {
        return {
            modelInvocationOutput: de_RoutingClassifierModelInvocationOutput(output.modelInvocationOutput),
        };
    }
    if (output.observation != null) {
        return {
            observation: de_Observation(output.observation),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_SessionSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SessionSummary(entry);
    });
    return retVal;
};
const de_SessionSummary = (output, context) => {
    return smithyClient.take(output, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        lastUpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        sessionArn: smithyClient.expectString,
        sessionId: smithyClient.expectString,
        sessionStatus: smithyClient.expectString,
    });
};
const de_Trace = (output, context) => {
    if (output.customOrchestrationTrace != null) {
        return {
            customOrchestrationTrace: smithyClient._json(output.customOrchestrationTrace),
        };
    }
    if (output.failureTrace != null) {
        return {
            failureTrace: de_FailureTrace(output.failureTrace),
        };
    }
    if (output.guardrailTrace != null) {
        return {
            guardrailTrace: de_GuardrailTrace(output.guardrailTrace),
        };
    }
    if (output.orchestrationTrace != null) {
        return {
            orchestrationTrace: de_OrchestrationTrace(core$1.awsExpectUnion(output.orchestrationTrace), context),
        };
    }
    if (output.postProcessingTrace != null) {
        return {
            postProcessingTrace: de_PostProcessingTrace(core$1.awsExpectUnion(output.postProcessingTrace), context),
        };
    }
    if (output.preProcessingTrace != null) {
        return {
            preProcessingTrace: de_PreProcessingTrace(core$1.awsExpectUnion(output.preProcessingTrace), context),
        };
    }
    if (output.routingClassifierTrace != null) {
        return {
            routingClassifierTrace: de_RoutingClassifierTrace(core$1.awsExpectUnion(output.routingClassifierTrace), context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_TraceElements = (output, context) => {
    if (output.agentTraces != null) {
        return {
            agentTraces: de_AgentTraces(output.agentTraces, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_TracePart = (output, context) => {
    return smithyClient.take(output, {
        agentAliasId: smithyClient.expectString,
        agentId: smithyClient.expectString,
        agentVersion: smithyClient.expectString,
        callerChain: smithyClient._json,
        collaboratorName: smithyClient.expectString,
        eventTime: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        sessionId: smithyClient.expectString,
        trace: (_) => de_Trace(core$1.awsExpectUnion(_), context),
    });
};
const de_Document = (output, context) => {
    return output;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const _cT = "contentType";
const _eI = "executionId";
const _eT = "eventType";
const _fAI = "flowAliasIdentifier";
const _mI = "memoryId";
const _mIa = "maxItems";
const _mR = "maxResults";
const _mT = "memoryType";
const _nT = "nextToken";
const _sA = "sourceArn";
const _sI = "sessionId";
const _tK = "tagKeys";
const _xabact = "x-amzn-bedrock-agent-content-type";
const _xabami = "x-amz-bedrock-agent-memory-id";
const _xabasi = "x-amz-bedrock-agent-session-id";
const _xabfei = "x-amz-bedrock-flow-execution-id";
const _xabkbsi = "x-amzn-bedrock-knowledge-base-session-id";
const _xasa = "x-amz-source-arn";

class CreateInvocationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "CreateInvocation", {})
    .n("BedrockAgentRuntimeClient", "CreateInvocationCommand")
    .f(void 0, void 0)
    .ser(se_CreateInvocationCommand)
    .de(de_CreateInvocationCommand)
    .build() {
}

class CreateSessionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "CreateSession", {})
    .n("BedrockAgentRuntimeClient", "CreateSessionCommand")
    .f(void 0, void 0)
    .ser(se_CreateSessionCommand)
    .de(de_CreateSessionCommand)
    .build() {
}

class DeleteAgentMemoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "DeleteAgentMemory", {})
    .n("BedrockAgentRuntimeClient", "DeleteAgentMemoryCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAgentMemoryCommand)
    .de(de_DeleteAgentMemoryCommand)
    .build() {
}

class DeleteSessionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "DeleteSession", {})
    .n("BedrockAgentRuntimeClient", "DeleteSessionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSessionCommand)
    .de(de_DeleteSessionCommand)
    .build() {
}

class EndSessionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "EndSession", {})
    .n("BedrockAgentRuntimeClient", "EndSessionCommand")
    .f(void 0, void 0)
    .ser(se_EndSessionCommand)
    .de(de_EndSessionCommand)
    .build() {
}

class GenerateQueryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "GenerateQuery", {})
    .n("BedrockAgentRuntimeClient", "GenerateQueryCommand")
    .f(GenerateQueryRequestFilterSensitiveLog, GenerateQueryResponseFilterSensitiveLog)
    .ser(se_GenerateQueryCommand)
    .de(de_GenerateQueryCommand)
    .build() {
}

class GetAgentMemoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "GetAgentMemory", {})
    .n("BedrockAgentRuntimeClient", "GetAgentMemoryCommand")
    .f(void 0, void 0)
    .ser(se_GetAgentMemoryCommand)
    .de(de_GetAgentMemoryCommand)
    .build() {
}

class GetExecutionFlowSnapshotCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "GetExecutionFlowSnapshot", {})
    .n("BedrockAgentRuntimeClient", "GetExecutionFlowSnapshotCommand")
    .f(void 0, void 0)
    .ser(se_GetExecutionFlowSnapshotCommand)
    .de(de_GetExecutionFlowSnapshotCommand)
    .build() {
}

class GetFlowExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "GetFlowExecution", {})
    .n("BedrockAgentRuntimeClient", "GetFlowExecutionCommand")
    .f(void 0, void 0)
    .ser(se_GetFlowExecutionCommand)
    .de(de_GetFlowExecutionCommand)
    .build() {
}

class GetInvocationStepCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "GetInvocationStep", {})
    .n("BedrockAgentRuntimeClient", "GetInvocationStepCommand")
    .f(void 0, GetInvocationStepResponseFilterSensitiveLog)
    .ser(se_GetInvocationStepCommand)
    .de(de_GetInvocationStepCommand)
    .build() {
}

class GetSessionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "GetSession", {})
    .n("BedrockAgentRuntimeClient", "GetSessionCommand")
    .f(void 0, void 0)
    .ser(se_GetSessionCommand)
    .de(de_GetSessionCommand)
    .build() {
}

class InvokeAgentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "InvokeAgent", {
    eventStream: {
        output: true,
    },
})
    .n("BedrockAgentRuntimeClient", "InvokeAgentCommand")
    .f(InvokeAgentRequestFilterSensitiveLog, InvokeAgentResponseFilterSensitiveLog)
    .ser(se_InvokeAgentCommand)
    .de(de_InvokeAgentCommand)
    .build() {
}

class InvokeFlowCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "InvokeFlow", {
    eventStream: {
        output: true,
    },
})
    .n("BedrockAgentRuntimeClient", "InvokeFlowCommand")
    .f(InvokeFlowRequestFilterSensitiveLog, InvokeFlowResponseFilterSensitiveLog)
    .ser(se_InvokeFlowCommand)
    .de(de_InvokeFlowCommand)
    .build() {
}

class InvokeInlineAgentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "InvokeInlineAgent", {
    eventStream: {
        output: true,
    },
})
    .n("BedrockAgentRuntimeClient", "InvokeInlineAgentCommand")
    .f(InvokeInlineAgentRequestFilterSensitiveLog, InvokeInlineAgentResponseFilterSensitiveLog)
    .ser(se_InvokeInlineAgentCommand)
    .de(de_InvokeInlineAgentCommand)
    .build() {
}

class ListFlowExecutionEventsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "ListFlowExecutionEvents", {})
    .n("BedrockAgentRuntimeClient", "ListFlowExecutionEventsCommand")
    .f(void 0, ListFlowExecutionEventsResponseFilterSensitiveLog)
    .ser(se_ListFlowExecutionEventsCommand)
    .de(de_ListFlowExecutionEventsCommand)
    .build() {
}

class ListFlowExecutionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "ListFlowExecutions", {})
    .n("BedrockAgentRuntimeClient", "ListFlowExecutionsCommand")
    .f(void 0, void 0)
    .ser(se_ListFlowExecutionsCommand)
    .de(de_ListFlowExecutionsCommand)
    .build() {
}

class ListInvocationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "ListInvocations", {})
    .n("BedrockAgentRuntimeClient", "ListInvocationsCommand")
    .f(void 0, void 0)
    .ser(se_ListInvocationsCommand)
    .de(de_ListInvocationsCommand)
    .build() {
}

class ListInvocationStepsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "ListInvocationSteps", {})
    .n("BedrockAgentRuntimeClient", "ListInvocationStepsCommand")
    .f(void 0, void 0)
    .ser(se_ListInvocationStepsCommand)
    .de(de_ListInvocationStepsCommand)
    .build() {
}

class ListSessionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "ListSessions", {})
    .n("BedrockAgentRuntimeClient", "ListSessionsCommand")
    .f(void 0, void 0)
    .ser(se_ListSessionsCommand)
    .de(de_ListSessionsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "ListTagsForResource", {})
    .n("BedrockAgentRuntimeClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class OptimizePromptCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "OptimizePrompt", {
    eventStream: {
        output: true,
    },
})
    .n("BedrockAgentRuntimeClient", "OptimizePromptCommand")
    .f(OptimizePromptRequestFilterSensitiveLog, OptimizePromptResponseFilterSensitiveLog)
    .ser(se_OptimizePromptCommand)
    .de(de_OptimizePromptCommand)
    .build() {
}

class PutInvocationStepCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "PutInvocationStep", {})
    .n("BedrockAgentRuntimeClient", "PutInvocationStepCommand")
    .f(PutInvocationStepRequestFilterSensitiveLog, void 0)
    .ser(se_PutInvocationStepCommand)
    .de(de_PutInvocationStepCommand)
    .build() {
}

class RerankCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "Rerank", {})
    .n("BedrockAgentRuntimeClient", "RerankCommand")
    .f(RerankRequestFilterSensitiveLog, RerankResponseFilterSensitiveLog)
    .ser(se_RerankCommand)
    .de(de_RerankCommand)
    .build() {
}

class RetrieveAndGenerateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "RetrieveAndGenerate", {})
    .n("BedrockAgentRuntimeClient", "RetrieveAndGenerateCommand")
    .f(RetrieveAndGenerateRequestFilterSensitiveLog, RetrieveAndGenerateResponseFilterSensitiveLog)
    .ser(se_RetrieveAndGenerateCommand)
    .de(de_RetrieveAndGenerateCommand)
    .build() {
}

class RetrieveAndGenerateStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "RetrieveAndGenerateStream", {
    eventStream: {
        output: true,
    },
})
    .n("BedrockAgentRuntimeClient", "RetrieveAndGenerateStreamCommand")
    .f(RetrieveAndGenerateStreamRequestFilterSensitiveLog, RetrieveAndGenerateStreamResponseFilterSensitiveLog)
    .ser(se_RetrieveAndGenerateStreamCommand)
    .de(de_RetrieveAndGenerateStreamCommand)
    .build() {
}

class RetrieveCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "Retrieve", {})
    .n("BedrockAgentRuntimeClient", "RetrieveCommand")
    .f(RetrieveRequestFilterSensitiveLog, RetrieveResponseFilterSensitiveLog)
    .ser(se_RetrieveCommand)
    .de(de_RetrieveCommand)
    .build() {
}

class StartFlowExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "StartFlowExecution", {})
    .n("BedrockAgentRuntimeClient", "StartFlowExecutionCommand")
    .f(StartFlowExecutionRequestFilterSensitiveLog, void 0)
    .ser(se_StartFlowExecutionCommand)
    .de(de_StartFlowExecutionCommand)
    .build() {
}

class StopFlowExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "StopFlowExecution", {})
    .n("BedrockAgentRuntimeClient", "StopFlowExecutionCommand")
    .f(void 0, void 0)
    .ser(se_StopFlowExecutionCommand)
    .de(de_StopFlowExecutionCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "TagResource", {})
    .n("BedrockAgentRuntimeClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "UntagResource", {})
    .n("BedrockAgentRuntimeClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateSessionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonBedrockAgentRunTimeService", "UpdateSession", {})
    .n("BedrockAgentRuntimeClient", "UpdateSessionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateSessionCommand)
    .de(de_UpdateSessionCommand)
    .build() {
}

const commands = {
    CreateInvocationCommand,
    CreateSessionCommand,
    DeleteAgentMemoryCommand,
    DeleteSessionCommand,
    EndSessionCommand,
    GenerateQueryCommand,
    GetAgentMemoryCommand,
    GetExecutionFlowSnapshotCommand,
    GetFlowExecutionCommand,
    GetInvocationStepCommand,
    GetSessionCommand,
    InvokeAgentCommand,
    InvokeFlowCommand,
    InvokeInlineAgentCommand,
    ListFlowExecutionEventsCommand,
    ListFlowExecutionsCommand,
    ListInvocationsCommand,
    ListInvocationStepsCommand,
    ListSessionsCommand,
    ListTagsForResourceCommand,
    OptimizePromptCommand,
    PutInvocationStepCommand,
    RerankCommand,
    RetrieveCommand,
    RetrieveAndGenerateCommand,
    RetrieveAndGenerateStreamCommand,
    StartFlowExecutionCommand,
    StopFlowExecutionCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateSessionCommand,
};
class BedrockAgentRuntime extends BedrockAgentRuntimeClient {
}
smithyClient.createAggregatedClient(commands, BedrockAgentRuntime);

const paginateGetAgentMemory = core.createPaginator(BedrockAgentRuntimeClient, GetAgentMemoryCommand, "nextToken", "nextToken", "maxItems");

const paginateListFlowExecutionEvents = core.createPaginator(BedrockAgentRuntimeClient, ListFlowExecutionEventsCommand, "nextToken", "nextToken", "maxResults");

const paginateListFlowExecutions = core.createPaginator(BedrockAgentRuntimeClient, ListFlowExecutionsCommand, "nextToken", "nextToken", "maxResults");

const paginateListInvocationSteps = core.createPaginator(BedrockAgentRuntimeClient, ListInvocationStepsCommand, "nextToken", "nextToken", "maxResults");

const paginateListInvocations = core.createPaginator(BedrockAgentRuntimeClient, ListInvocationsCommand, "nextToken", "nextToken", "maxResults");

const paginateListSessions = core.createPaginator(BedrockAgentRuntimeClient, ListSessionsCommand, "nextToken", "nextToken", "maxResults");

const paginateRerank = core.createPaginator(BedrockAgentRuntimeClient, RerankCommand, "nextToken", "nextToken", "");

const paginateRetrieve = core.createPaginator(BedrockAgentRuntimeClient, RetrieveCommand, "nextToken", "nextToken", "");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.APISchemaFilterSensitiveLog = APISchemaFilterSensitiveLog;
exports.AccessDeniedException = AccessDeniedException;
exports.ActionGroupInvocationInputFilterSensitiveLog = ActionGroupInvocationInputFilterSensitiveLog;
exports.ActionGroupInvocationOutputFilterSensitiveLog = ActionGroupInvocationOutputFilterSensitiveLog;
exports.ActionGroupSignature = ActionGroupSignature;
exports.ActionInvocationType = ActionInvocationType;
exports.AgentActionGroupFilterSensitiveLog = AgentActionGroupFilterSensitiveLog;
exports.AgentCollaboration = AgentCollaboration;
exports.AgentCollaboratorInputPayloadFilterSensitiveLog = AgentCollaboratorInputPayloadFilterSensitiveLog;
exports.AgentCollaboratorInvocationInputFilterSensitiveLog = AgentCollaboratorInvocationInputFilterSensitiveLog;
exports.AgentCollaboratorInvocationOutputFilterSensitiveLog = AgentCollaboratorInvocationOutputFilterSensitiveLog;
exports.AgentCollaboratorOutputPayloadFilterSensitiveLog = AgentCollaboratorOutputPayloadFilterSensitiveLog;
exports.AnalyzePromptEventFilterSensitiveLog = AnalyzePromptEventFilterSensitiveLog;
exports.ApiInvocationInputFilterSensitiveLog = ApiInvocationInputFilterSensitiveLog;
exports.ApiResultFilterSensitiveLog = ApiResultFilterSensitiveLog;
exports.AttributeType = AttributeType;
exports.AttributionFilterSensitiveLog = AttributionFilterSensitiveLog;
exports.BadGatewayException = BadGatewayException;
exports.BedrockAgentRuntime = BedrockAgentRuntime;
exports.BedrockAgentRuntimeClient = BedrockAgentRuntimeClient;
exports.BedrockAgentRuntimeServiceException = BedrockAgentRuntimeServiceException;
exports.BedrockSessionContentBlockFilterSensitiveLog = BedrockSessionContentBlockFilterSensitiveLog;
exports.ByteContentDocFilterSensitiveLog = ByteContentDocFilterSensitiveLog;
exports.ByteContentFileFilterSensitiveLog = ByteContentFileFilterSensitiveLog;
exports.CitationEventFilterSensitiveLog = CitationEventFilterSensitiveLog;
exports.CitationFilterSensitiveLog = CitationFilterSensitiveLog;
exports.CodeInterpreterInvocationOutputFilterSensitiveLog = CodeInterpreterInvocationOutputFilterSensitiveLog;
exports.CollaboratorConfigurationFilterSensitiveLog = CollaboratorConfigurationFilterSensitiveLog;
exports.CollaboratorFilterSensitiveLog = CollaboratorFilterSensitiveLog;
exports.ConditionResultEventFilterSensitiveLog = ConditionResultEventFilterSensitiveLog;
exports.ConfirmationState = ConfirmationState;
exports.ConflictException = ConflictException;
exports.ContentBlockFilterSensitiveLog = ContentBlockFilterSensitiveLog;
exports.ConversationHistoryFilterSensitiveLog = ConversationHistoryFilterSensitiveLog;
exports.ConversationRole = ConversationRole;
exports.CreateInvocationCommand = CreateInvocationCommand;
exports.CreateSessionCommand = CreateSessionCommand;
exports.CreationMode = CreationMode;
exports.CustomControlMethod = CustomControlMethod;
exports.CustomOrchestrationTraceEventFilterSensitiveLog = CustomOrchestrationTraceEventFilterSensitiveLog;
exports.CustomOrchestrationTraceFilterSensitiveLog = CustomOrchestrationTraceFilterSensitiveLog;
exports.DeleteAgentMemoryCommand = DeleteAgentMemoryCommand;
exports.DeleteSessionCommand = DeleteSessionCommand;
exports.DependencyFailedException = DependencyFailedException;
exports.EndSessionCommand = EndSessionCommand;
exports.ExecutionType = ExecutionType;
exports.ExternalSourceFilterSensitiveLog = ExternalSourceFilterSensitiveLog;
exports.ExternalSourceType = ExternalSourceType;
exports.ExternalSourcesGenerationConfigurationFilterSensitiveLog = ExternalSourcesGenerationConfigurationFilterSensitiveLog;
exports.ExternalSourcesRetrieveAndGenerateConfigurationFilterSensitiveLog = ExternalSourcesRetrieveAndGenerateConfigurationFilterSensitiveLog;
exports.FailureTraceFilterSensitiveLog = FailureTraceFilterSensitiveLog;
exports.FilePartFilterSensitiveLog = FilePartFilterSensitiveLog;
exports.FileSourceFilterSensitiveLog = FileSourceFilterSensitiveLog;
exports.FileSourceType = FileSourceType;
exports.FileUseCase = FileUseCase;
exports.FinalResponseFilterSensitiveLog = FinalResponseFilterSensitiveLog;
exports.FlowCompletionEventFilterSensitiveLog = FlowCompletionEventFilterSensitiveLog;
exports.FlowCompletionReason = FlowCompletionReason;
exports.FlowControlNodeType = FlowControlNodeType;
exports.FlowErrorCode = FlowErrorCode;
exports.FlowExecutionContentFilterSensitiveLog = FlowExecutionContentFilterSensitiveLog;
exports.FlowExecutionErrorType = FlowExecutionErrorType;
exports.FlowExecutionEventFilterSensitiveLog = FlowExecutionEventFilterSensitiveLog;
exports.FlowExecutionEventType = FlowExecutionEventType;
exports.FlowExecutionInputEventFilterSensitiveLog = FlowExecutionInputEventFilterSensitiveLog;
exports.FlowExecutionOutputEventFilterSensitiveLog = FlowExecutionOutputEventFilterSensitiveLog;
exports.FlowExecutionStatus = FlowExecutionStatus;
exports.FlowFailureEventFilterSensitiveLog = FlowFailureEventFilterSensitiveLog;
exports.FlowInputContentFilterSensitiveLog = FlowInputContentFilterSensitiveLog;
exports.FlowInputFieldFilterSensitiveLog = FlowInputFieldFilterSensitiveLog;
exports.FlowInputFilterSensitiveLog = FlowInputFilterSensitiveLog;
exports.FlowMultiTurnInputRequestEventFilterSensitiveLog = FlowMultiTurnInputRequestEventFilterSensitiveLog;
exports.FlowNodeIODataType = FlowNodeIODataType;
exports.FlowNodeInputCategory = FlowNodeInputCategory;
exports.FlowOutputEventFilterSensitiveLog = FlowOutputEventFilterSensitiveLog;
exports.FlowOutputFieldFilterSensitiveLog = FlowOutputFieldFilterSensitiveLog;
exports.FlowResponseStreamFilterSensitiveLog = FlowResponseStreamFilterSensitiveLog;
exports.FlowTraceConditionFilterSensitiveLog = FlowTraceConditionFilterSensitiveLog;
exports.FlowTraceConditionNodeResultEventFilterSensitiveLog = FlowTraceConditionNodeResultEventFilterSensitiveLog;
exports.FlowTraceDependencyEventFilterSensitiveLog = FlowTraceDependencyEventFilterSensitiveLog;
exports.FlowTraceEventFilterSensitiveLog = FlowTraceEventFilterSensitiveLog;
exports.FlowTraceFilterSensitiveLog = FlowTraceFilterSensitiveLog;
exports.FlowTraceNodeActionEventFilterSensitiveLog = FlowTraceNodeActionEventFilterSensitiveLog;
exports.FlowTraceNodeInputContentFilterSensitiveLog = FlowTraceNodeInputContentFilterSensitiveLog;
exports.FlowTraceNodeInputEventFilterSensitiveLog = FlowTraceNodeInputEventFilterSensitiveLog;
exports.FlowTraceNodeInputExecutionChainItemFilterSensitiveLog = FlowTraceNodeInputExecutionChainItemFilterSensitiveLog;
exports.FlowTraceNodeInputFieldFilterSensitiveLog = FlowTraceNodeInputFieldFilterSensitiveLog;
exports.FlowTraceNodeInputSourceFilterSensitiveLog = FlowTraceNodeInputSourceFilterSensitiveLog;
exports.FlowTraceNodeOutputEventFilterSensitiveLog = FlowTraceNodeOutputEventFilterSensitiveLog;
exports.FlowTraceNodeOutputFieldFilterSensitiveLog = FlowTraceNodeOutputFieldFilterSensitiveLog;
exports.FlowTraceNodeOutputNextFilterSensitiveLog = FlowTraceNodeOutputNextFilterSensitiveLog;
exports.FunctionDefinitionFilterSensitiveLog = FunctionDefinitionFilterSensitiveLog;
exports.FunctionInvocationInputFilterSensitiveLog = FunctionInvocationInputFilterSensitiveLog;
exports.FunctionSchemaFilterSensitiveLog = FunctionSchemaFilterSensitiveLog;
exports.GenerateQueryCommand = GenerateQueryCommand;
exports.GenerateQueryRequestFilterSensitiveLog = GenerateQueryRequestFilterSensitiveLog;
exports.GenerateQueryResponseFilterSensitiveLog = GenerateQueryResponseFilterSensitiveLog;
exports.GeneratedQueryFilterSensitiveLog = GeneratedQueryFilterSensitiveLog;
exports.GeneratedQueryType = GeneratedQueryType;
exports.GeneratedResponsePartFilterSensitiveLog = GeneratedResponsePartFilterSensitiveLog;
exports.GenerationConfigurationFilterSensitiveLog = GenerationConfigurationFilterSensitiveLog;
exports.GetAgentMemoryCommand = GetAgentMemoryCommand;
exports.GetExecutionFlowSnapshotCommand = GetExecutionFlowSnapshotCommand;
exports.GetFlowExecutionCommand = GetFlowExecutionCommand;
exports.GetInvocationStepCommand = GetInvocationStepCommand;
exports.GetInvocationStepResponseFilterSensitiveLog = GetInvocationStepResponseFilterSensitiveLog;
exports.GetSessionCommand = GetSessionCommand;
exports.GuadrailAction = GuadrailAction;
exports.GuardrailAction = GuardrailAction;
exports.GuardrailAssessmentFilterSensitiveLog = GuardrailAssessmentFilterSensitiveLog;
exports.GuardrailContentFilterConfidence = GuardrailContentFilterConfidence;
exports.GuardrailContentFilterFilterSensitiveLog = GuardrailContentFilterFilterSensitiveLog;
exports.GuardrailContentFilterType = GuardrailContentFilterType;
exports.GuardrailContentPolicyAction = GuardrailContentPolicyAction;
exports.GuardrailContentPolicyAssessmentFilterSensitiveLog = GuardrailContentPolicyAssessmentFilterSensitiveLog;
exports.GuardrailCustomWordFilterSensitiveLog = GuardrailCustomWordFilterSensitiveLog;
exports.GuardrailManagedWordFilterSensitiveLog = GuardrailManagedWordFilterSensitiveLog;
exports.GuardrailManagedWordType = GuardrailManagedWordType;
exports.GuardrailPiiEntityFilterFilterSensitiveLog = GuardrailPiiEntityFilterFilterSensitiveLog;
exports.GuardrailPiiEntityType = GuardrailPiiEntityType;
exports.GuardrailRegexFilterFilterSensitiveLog = GuardrailRegexFilterFilterSensitiveLog;
exports.GuardrailSensitiveInformationPolicyAction = GuardrailSensitiveInformationPolicyAction;
exports.GuardrailSensitiveInformationPolicyAssessmentFilterSensitiveLog = GuardrailSensitiveInformationPolicyAssessmentFilterSensitiveLog;
exports.GuardrailTopicFilterSensitiveLog = GuardrailTopicFilterSensitiveLog;
exports.GuardrailTopicPolicyAction = GuardrailTopicPolicyAction;
exports.GuardrailTopicPolicyAssessmentFilterSensitiveLog = GuardrailTopicPolicyAssessmentFilterSensitiveLog;
exports.GuardrailTopicType = GuardrailTopicType;
exports.GuardrailTraceFilterSensitiveLog = GuardrailTraceFilterSensitiveLog;
exports.GuardrailWordPolicyAction = GuardrailWordPolicyAction;
exports.GuardrailWordPolicyAssessmentFilterSensitiveLog = GuardrailWordPolicyAssessmentFilterSensitiveLog;
exports.ImageFormat = ImageFormat;
exports.ImageInputFormat = ImageInputFormat;
exports.ImplicitFilterConfigurationFilterSensitiveLog = ImplicitFilterConfigurationFilterSensitiveLog;
exports.InlineAgentFilePartFilterSensitiveLog = InlineAgentFilePartFilterSensitiveLog;
exports.InlineAgentPayloadPartFilterSensitiveLog = InlineAgentPayloadPartFilterSensitiveLog;
exports.InlineAgentResponseStreamFilterSensitiveLog = InlineAgentResponseStreamFilterSensitiveLog;
exports.InlineAgentReturnControlPayloadFilterSensitiveLog = InlineAgentReturnControlPayloadFilterSensitiveLog;
exports.InlineAgentTracePartFilterSensitiveLog = InlineAgentTracePartFilterSensitiveLog;
exports.InlineSessionStateFilterSensitiveLog = InlineSessionStateFilterSensitiveLog;
exports.InputFileFilterSensitiveLog = InputFileFilterSensitiveLog;
exports.InputPromptFilterSensitiveLog = InputPromptFilterSensitiveLog;
exports.InputQueryType = InputQueryType;
exports.InternalServerException = InternalServerException;
exports.InvocationInputFilterSensitiveLog = InvocationInputFilterSensitiveLog;
exports.InvocationInputMemberFilterSensitiveLog = InvocationInputMemberFilterSensitiveLog;
exports.InvocationResultMemberFilterSensitiveLog = InvocationResultMemberFilterSensitiveLog;
exports.InvocationStepFilterSensitiveLog = InvocationStepFilterSensitiveLog;
exports.InvocationStepPayloadFilterSensitiveLog = InvocationStepPayloadFilterSensitiveLog;
exports.InvocationType = InvocationType;
exports.InvokeAgentCommand = InvokeAgentCommand;
exports.InvokeAgentRequestFilterSensitiveLog = InvokeAgentRequestFilterSensitiveLog;
exports.InvokeAgentResponseFilterSensitiveLog = InvokeAgentResponseFilterSensitiveLog;
exports.InvokeFlowCommand = InvokeFlowCommand;
exports.InvokeFlowRequestFilterSensitiveLog = InvokeFlowRequestFilterSensitiveLog;
exports.InvokeFlowResponseFilterSensitiveLog = InvokeFlowResponseFilterSensitiveLog;
exports.InvokeInlineAgentCommand = InvokeInlineAgentCommand;
exports.InvokeInlineAgentRequestFilterSensitiveLog = InvokeInlineAgentRequestFilterSensitiveLog;
exports.InvokeInlineAgentResponseFilterSensitiveLog = InvokeInlineAgentResponseFilterSensitiveLog;
exports.KnowledgeBaseConfigurationFilterSensitiveLog = KnowledgeBaseConfigurationFilterSensitiveLog;
exports.KnowledgeBaseFilterSensitiveLog = KnowledgeBaseFilterSensitiveLog;
exports.KnowledgeBaseLookupInputFilterSensitiveLog = KnowledgeBaseLookupInputFilterSensitiveLog;
exports.KnowledgeBaseLookupOutputFilterSensitiveLog = KnowledgeBaseLookupOutputFilterSensitiveLog;
exports.KnowledgeBaseQueryFilterSensitiveLog = KnowledgeBaseQueryFilterSensitiveLog;
exports.KnowledgeBaseRetrievalConfigurationFilterSensitiveLog = KnowledgeBaseRetrievalConfigurationFilterSensitiveLog;
exports.KnowledgeBaseRetrievalResultFilterSensitiveLog = KnowledgeBaseRetrievalResultFilterSensitiveLog;
exports.KnowledgeBaseRetrieveAndGenerateConfigurationFilterSensitiveLog = KnowledgeBaseRetrieveAndGenerateConfigurationFilterSensitiveLog;
exports.KnowledgeBaseVectorSearchConfigurationFilterSensitiveLog = KnowledgeBaseVectorSearchConfigurationFilterSensitiveLog;
exports.ListFlowExecutionEventsCommand = ListFlowExecutionEventsCommand;
exports.ListFlowExecutionEventsResponseFilterSensitiveLog = ListFlowExecutionEventsResponseFilterSensitiveLog;
exports.ListFlowExecutionsCommand = ListFlowExecutionsCommand;
exports.ListInvocationStepsCommand = ListInvocationStepsCommand;
exports.ListInvocationsCommand = ListInvocationsCommand;
exports.ListSessionsCommand = ListSessionsCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.MemoryType = MemoryType;
exports.MessageFilterSensitiveLog = MessageFilterSensitiveLog;
exports.MetadataAttributeSchemaFilterSensitiveLog = MetadataAttributeSchemaFilterSensitiveLog;
exports.MetadataConfigurationForRerankingFilterSensitiveLog = MetadataConfigurationForRerankingFilterSensitiveLog;
exports.MetadataFilterSensitiveLog = MetadataFilterSensitiveLog;
exports.ModelInvocationInputFilterSensitiveLog = ModelInvocationInputFilterSensitiveLog;
exports.ModelNotReadyException = ModelNotReadyException;
exports.NodeActionEventFilterSensitiveLog = NodeActionEventFilterSensitiveLog;
exports.NodeDependencyEventFilterSensitiveLog = NodeDependencyEventFilterSensitiveLog;
exports.NodeErrorCode = NodeErrorCode;
exports.NodeExecutionContentFilterSensitiveLog = NodeExecutionContentFilterSensitiveLog;
exports.NodeFailureEventFilterSensitiveLog = NodeFailureEventFilterSensitiveLog;
exports.NodeInputEventFilterSensitiveLog = NodeInputEventFilterSensitiveLog;
exports.NodeInputFieldFilterSensitiveLog = NodeInputFieldFilterSensitiveLog;
exports.NodeInputSourceFilterSensitiveLog = NodeInputSourceFilterSensitiveLog;
exports.NodeOutputEventFilterSensitiveLog = NodeOutputEventFilterSensitiveLog;
exports.NodeOutputFieldFilterSensitiveLog = NodeOutputFieldFilterSensitiveLog;
exports.NodeOutputNextFilterSensitiveLog = NodeOutputNextFilterSensitiveLog;
exports.NodeTraceElementsFilterSensitiveLog = NodeTraceElementsFilterSensitiveLog;
exports.NodeType = NodeType;
exports.ObservationFilterSensitiveLog = ObservationFilterSensitiveLog;
exports.OptimizePromptCommand = OptimizePromptCommand;
exports.OptimizePromptRequestFilterSensitiveLog = OptimizePromptRequestFilterSensitiveLog;
exports.OptimizePromptResponseFilterSensitiveLog = OptimizePromptResponseFilterSensitiveLog;
exports.OptimizedPromptEventFilterSensitiveLog = OptimizedPromptEventFilterSensitiveLog;
exports.OptimizedPromptFilterSensitiveLog = OptimizedPromptFilterSensitiveLog;
exports.OptimizedPromptStreamFilterSensitiveLog = OptimizedPromptStreamFilterSensitiveLog;
exports.OrchestrationConfigurationFilterSensitiveLog = OrchestrationConfigurationFilterSensitiveLog;
exports.OrchestrationModelInvocationOutputFilterSensitiveLog = OrchestrationModelInvocationOutputFilterSensitiveLog;
exports.OrchestrationTraceFilterSensitiveLog = OrchestrationTraceFilterSensitiveLog;
exports.OrchestrationType = OrchestrationType;
exports.OutputFileFilterSensitiveLog = OutputFileFilterSensitiveLog;
exports.ParameterType = ParameterType;
exports.PayloadPartFilterSensitiveLog = PayloadPartFilterSensitiveLog;
exports.PayloadType = PayloadType;
exports.PerformanceConfigLatency = PerformanceConfigLatency;
exports.PostProcessingModelInvocationOutputFilterSensitiveLog = PostProcessingModelInvocationOutputFilterSensitiveLog;
exports.PostProcessingParsedResponseFilterSensitiveLog = PostProcessingParsedResponseFilterSensitiveLog;
exports.PostProcessingTraceFilterSensitiveLog = PostProcessingTraceFilterSensitiveLog;
exports.PreProcessingModelInvocationOutputFilterSensitiveLog = PreProcessingModelInvocationOutputFilterSensitiveLog;
exports.PreProcessingParsedResponseFilterSensitiveLog = PreProcessingParsedResponseFilterSensitiveLog;
exports.PreProcessingTraceFilterSensitiveLog = PreProcessingTraceFilterSensitiveLog;
exports.PromptConfigurationFilterSensitiveLog = PromptConfigurationFilterSensitiveLog;
exports.PromptOverrideConfigurationFilterSensitiveLog = PromptOverrideConfigurationFilterSensitiveLog;
exports.PromptState = PromptState;
exports.PromptTemplateFilterSensitiveLog = PromptTemplateFilterSensitiveLog;
exports.PromptType = PromptType;
exports.PutInvocationStepCommand = PutInvocationStepCommand;
exports.PutInvocationStepRequestFilterSensitiveLog = PutInvocationStepRequestFilterSensitiveLog;
exports.QueryGenerationInputFilterSensitiveLog = QueryGenerationInputFilterSensitiveLog;
exports.QueryTransformationMode = QueryTransformationMode;
exports.QueryTransformationType = QueryTransformationType;
exports.RationaleFilterSensitiveLog = RationaleFilterSensitiveLog;
exports.RawResponseFilterSensitiveLog = RawResponseFilterSensitiveLog;
exports.ReasoningContentBlockFilterSensitiveLog = ReasoningContentBlockFilterSensitiveLog;
exports.ReasoningTextBlockFilterSensitiveLog = ReasoningTextBlockFilterSensitiveLog;
exports.RelayConversationHistory = RelayConversationHistory;
exports.RepromptResponseFilterSensitiveLog = RepromptResponseFilterSensitiveLog;
exports.RequireConfirmation = RequireConfirmation;
exports.RerankCommand = RerankCommand;
exports.RerankDocumentFilterSensitiveLog = RerankDocumentFilterSensitiveLog;
exports.RerankDocumentType = RerankDocumentType;
exports.RerankQueryContentType = RerankQueryContentType;
exports.RerankQueryFilterSensitiveLog = RerankQueryFilterSensitiveLog;
exports.RerankRequestFilterSensitiveLog = RerankRequestFilterSensitiveLog;
exports.RerankResponseFilterSensitiveLog = RerankResponseFilterSensitiveLog;
exports.RerankResultFilterSensitiveLog = RerankResultFilterSensitiveLog;
exports.RerankSourceFilterSensitiveLog = RerankSourceFilterSensitiveLog;
exports.RerankSourceType = RerankSourceType;
exports.RerankTextDocumentFilterSensitiveLog = RerankTextDocumentFilterSensitiveLog;
exports.RerankingConfigurationType = RerankingConfigurationType;
exports.RerankingMetadataSelectionMode = RerankingMetadataSelectionMode;
exports.RerankingMetadataSelectiveModeConfigurationFilterSensitiveLog = RerankingMetadataSelectiveModeConfigurationFilterSensitiveLog;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ResponseState = ResponseState;
exports.ResponseStreamFilterSensitiveLog = ResponseStreamFilterSensitiveLog;
exports.RetrievalFilterFilterSensitiveLog = RetrievalFilterFilterSensitiveLog;
exports.RetrievalResultContentColumnFilterSensitiveLog = RetrievalResultContentColumnFilterSensitiveLog;
exports.RetrievalResultContentColumnType = RetrievalResultContentColumnType;
exports.RetrievalResultContentFilterSensitiveLog = RetrievalResultContentFilterSensitiveLog;
exports.RetrievalResultContentType = RetrievalResultContentType;
exports.RetrievalResultLocationFilterSensitiveLog = RetrievalResultLocationFilterSensitiveLog;
exports.RetrievalResultLocationType = RetrievalResultLocationType;
exports.RetrieveAndGenerateCommand = RetrieveAndGenerateCommand;
exports.RetrieveAndGenerateConfigurationFilterSensitiveLog = RetrieveAndGenerateConfigurationFilterSensitiveLog;
exports.RetrieveAndGenerateInputFilterSensitiveLog = RetrieveAndGenerateInputFilterSensitiveLog;
exports.RetrieveAndGenerateOutputEventFilterSensitiveLog = RetrieveAndGenerateOutputEventFilterSensitiveLog;
exports.RetrieveAndGenerateOutputFilterSensitiveLog = RetrieveAndGenerateOutputFilterSensitiveLog;
exports.RetrieveAndGenerateRequestFilterSensitiveLog = RetrieveAndGenerateRequestFilterSensitiveLog;
exports.RetrieveAndGenerateResponseFilterSensitiveLog = RetrieveAndGenerateResponseFilterSensitiveLog;
exports.RetrieveAndGenerateStreamCommand = RetrieveAndGenerateStreamCommand;
exports.RetrieveAndGenerateStreamRequestFilterSensitiveLog = RetrieveAndGenerateStreamRequestFilterSensitiveLog;
exports.RetrieveAndGenerateStreamResponseFilterSensitiveLog = RetrieveAndGenerateStreamResponseFilterSensitiveLog;
exports.RetrieveAndGenerateStreamResponseOutputFilterSensitiveLog = RetrieveAndGenerateStreamResponseOutputFilterSensitiveLog;
exports.RetrieveAndGenerateType = RetrieveAndGenerateType;
exports.RetrieveCommand = RetrieveCommand;
exports.RetrieveRequestFilterSensitiveLog = RetrieveRequestFilterSensitiveLog;
exports.RetrieveResponseFilterSensitiveLog = RetrieveResponseFilterSensitiveLog;
exports.RetrievedReferenceFilterSensitiveLog = RetrievedReferenceFilterSensitiveLog;
exports.ReturnControlPayloadFilterSensitiveLog = ReturnControlPayloadFilterSensitiveLog;
exports.ReturnControlResultsFilterSensitiveLog = ReturnControlResultsFilterSensitiveLog;
exports.RoutingClassifierModelInvocationOutputFilterSensitiveLog = RoutingClassifierModelInvocationOutputFilterSensitiveLog;
exports.RoutingClassifierTraceFilterSensitiveLog = RoutingClassifierTraceFilterSensitiveLog;
exports.SatisfiedConditionFilterSensitiveLog = SatisfiedConditionFilterSensitiveLog;
exports.SearchType = SearchType;
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.SessionStateFilterSensitiveLog = SessionStateFilterSensitiveLog;
exports.SessionStatus = SessionStatus;
exports.Source = Source;
exports.StartFlowExecutionCommand = StartFlowExecutionCommand;
exports.StartFlowExecutionRequestFilterSensitiveLog = StartFlowExecutionRequestFilterSensitiveLog;
exports.StopFlowExecutionCommand = StopFlowExecutionCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.TextPromptFilterSensitiveLog = TextPromptFilterSensitiveLog;
exports.TextResponsePartFilterSensitiveLog = TextResponsePartFilterSensitiveLog;
exports.TextToSqlConfigurationType = TextToSqlConfigurationType;
exports.ThrottlingException = ThrottlingException;
exports.TraceElementsFilterSensitiveLog = TraceElementsFilterSensitiveLog;
exports.TraceFilterSensitiveLog = TraceFilterSensitiveLog;
exports.TracePartFilterSensitiveLog = TracePartFilterSensitiveLog;
exports.Type = Type;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateSessionCommand = UpdateSessionCommand;
exports.UsageFilterSensitiveLog = UsageFilterSensitiveLog;
exports.ValidationException = ValidationException;
exports.VectorSearchBedrockRerankingConfigurationFilterSensitiveLog = VectorSearchBedrockRerankingConfigurationFilterSensitiveLog;
exports.VectorSearchRerankingConfigurationFilterSensitiveLog = VectorSearchRerankingConfigurationFilterSensitiveLog;
exports.VectorSearchRerankingConfigurationType = VectorSearchRerankingConfigurationType;
exports.paginateGetAgentMemory = paginateGetAgentMemory;
exports.paginateListFlowExecutionEvents = paginateListFlowExecutionEvents;
exports.paginateListFlowExecutions = paginateListFlowExecutions;
exports.paginateListInvocationSteps = paginateListInvocationSteps;
exports.paginateListInvocations = paginateListInvocations;
exports.paginateListSessions = paginateListSessions;
exports.paginateRerank = paginateRerank;
exports.paginateRetrieve = paginateRetrieve;
