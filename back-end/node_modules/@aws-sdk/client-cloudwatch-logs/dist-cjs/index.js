'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var eventstreamSerdeConfigResolver = require('@smithy/eventstream-serde-config-resolver');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "logs",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class CloudWatchLogsClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = eventstreamSerdeConfigResolver.resolveEventStreamSerdeConfig(_config_6);
        const _config_8 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_7);
        const _config_9 = resolveRuntimeExtensions(_config_8, configuration?.extensions || []);
        this.config = _config_9;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultCloudWatchLogsHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class CloudWatchLogsServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, CloudWatchLogsServiceException.prototype);
    }
}

class AccessDeniedException extends CloudWatchLogsServiceException {
    name = "AccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
const PolicyType = {
    DATA_PROTECTION_POLICY: "DATA_PROTECTION_POLICY",
    FIELD_INDEX_POLICY: "FIELD_INDEX_POLICY",
    METRIC_EXTRACTION_POLICY: "METRIC_EXTRACTION_POLICY",
    SUBSCRIPTION_FILTER_POLICY: "SUBSCRIPTION_FILTER_POLICY",
    TRANSFORMER_POLICY: "TRANSFORMER_POLICY",
};
const Scope = {
    ALL: "ALL",
};
const State = {
    Active: "Active",
    Baseline: "Baseline",
    Suppressed: "Suppressed",
};
const AnomalyDetectorStatus = {
    ANALYZING: "ANALYZING",
    DELETED: "DELETED",
    FAILED: "FAILED",
    INITIALIZING: "INITIALIZING",
    PAUSED: "PAUSED",
    TRAINING: "TRAINING",
};
const EvaluationFrequency = {
    FIFTEEN_MIN: "FIFTEEN_MIN",
    FIVE_MIN: "FIVE_MIN",
    ONE_HOUR: "ONE_HOUR",
    ONE_MIN: "ONE_MIN",
    TEN_MIN: "TEN_MIN",
    THIRTY_MIN: "THIRTY_MIN",
};
class InvalidParameterException extends CloudWatchLogsServiceException {
    name = "InvalidParameterException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
class OperationAbortedException extends CloudWatchLogsServiceException {
    name = "OperationAbortedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "OperationAbortedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OperationAbortedException.prototype);
    }
}
class ResourceNotFoundException extends CloudWatchLogsServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
class ServiceUnavailableException extends CloudWatchLogsServiceException {
    name = "ServiceUnavailableException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
class InvalidOperationException extends CloudWatchLogsServiceException {
    name = "InvalidOperationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidOperationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidOperationException.prototype);
    }
}
const OutputFormat = {
    JSON: "json",
    PARQUET: "parquet",
    PLAIN: "plain",
    RAW: "raw",
    W3C: "w3c",
};
const DeliveryDestinationType = {
    CWL: "CWL",
    FH: "FH",
    S3: "S3",
    XRAY: "XRAY",
};
class ConflictException extends CloudWatchLogsServiceException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
class ServiceQuotaExceededException extends CloudWatchLogsServiceException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
class ThrottlingException extends CloudWatchLogsServiceException {
    name = "ThrottlingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
class ValidationException extends CloudWatchLogsServiceException {
    name = "ValidationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
class LimitExceededException extends CloudWatchLogsServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class ResourceAlreadyExistsException extends CloudWatchLogsServiceException {
    name = "ResourceAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
const LogGroupClass = {
    DELIVERY: "DELIVERY",
    INFREQUENT_ACCESS: "INFREQUENT_ACCESS",
    STANDARD: "STANDARD",
};
class DataAlreadyAcceptedException extends CloudWatchLogsServiceException {
    name = "DataAlreadyAcceptedException";
    $fault = "client";
    expectedSequenceToken;
    constructor(opts) {
        super({
            name: "DataAlreadyAcceptedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DataAlreadyAcceptedException.prototype);
        this.expectedSequenceToken = opts.expectedSequenceToken;
    }
}
const DataProtectionStatus = {
    ACTIVATED: "ACTIVATED",
    ARCHIVED: "ARCHIVED",
    DELETED: "DELETED",
    DISABLED: "DISABLED",
};
const ExportTaskStatusCode = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    PENDING_CANCEL: "PENDING_CANCEL",
    RUNNING: "RUNNING",
};
const IndexSource = {
    ACCOUNT: "ACCOUNT",
    LOG_GROUP: "LOG_GROUP",
};
const InheritedProperty = {
    ACCOUNT_DATA_PROTECTION: "ACCOUNT_DATA_PROTECTION",
};
const OrderBy = {
    LastEventTime: "LastEventTime",
    LogStreamName: "LogStreamName",
};
const StandardUnit = {
    Bits: "Bits",
    BitsSecond: "Bits/Second",
    Bytes: "Bytes",
    BytesSecond: "Bytes/Second",
    Count: "Count",
    CountSecond: "Count/Second",
    Gigabits: "Gigabits",
    GigabitsSecond: "Gigabits/Second",
    Gigabytes: "Gigabytes",
    GigabytesSecond: "Gigabytes/Second",
    Kilobits: "Kilobits",
    KilobitsSecond: "Kilobits/Second",
    Kilobytes: "Kilobytes",
    KilobytesSecond: "Kilobytes/Second",
    Megabits: "Megabits",
    MegabitsSecond: "Megabits/Second",
    Megabytes: "Megabytes",
    MegabytesSecond: "Megabytes/Second",
    Microseconds: "Microseconds",
    Milliseconds: "Milliseconds",
    None: "None",
    Percent: "Percent",
    Seconds: "Seconds",
    Terabits: "Terabits",
    TerabitsSecond: "Terabits/Second",
    Terabytes: "Terabytes",
    TerabytesSecond: "Terabytes/Second",
};
const QueryLanguage = {
    CWLI: "CWLI",
    PPL: "PPL",
    SQL: "SQL",
};
const QueryStatus = {
    Cancelled: "Cancelled",
    Complete: "Complete",
    Failed: "Failed",
    Running: "Running",
    Scheduled: "Scheduled",
    Timeout: "Timeout",
    Unknown: "Unknown",
};
const PolicyScope = {
    ACCOUNT: "ACCOUNT",
    RESOURCE: "RESOURCE",
};
const Distribution = {
    ByLogStream: "ByLogStream",
    Random: "Random",
};
const EntityRejectionErrorType = {
    ENTITY_SIZE_TOO_LARGE: "EntitySizeTooLarge",
    INVALID_ATTRIBUTES: "InvalidAttributes",
    INVALID_ENTITY: "InvalidEntity",
    INVALID_KEY_ATTRIBUTE: "InvalidKeyAttributes",
    INVALID_TYPE_VALUE: "InvalidTypeValue",
    MISSING_REQUIRED_FIELDS: "MissingRequiredFields",
    UNSUPPORTED_LOG_GROUP_TYPE: "UnsupportedLogGroupType",
};
const EventSource = {
    AWSWAF: "AWSWAF",
    CLOUD_TRAIL: "CloudTrail",
    EKS_AUDIT: "EKSAudit",
    ROUTE53_RESOLVER: "Route53Resolver",
    VPC_FLOW: "VPCFlow",
};
const FlattenedElement = {
    FIRST: "first",
    LAST: "last",
};
const OpenSearchResourceStatusType = {
    ACTIVE: "ACTIVE",
    ERROR: "ERROR",
    NOT_FOUND: "NOT_FOUND",
};
exports.IntegrationDetails = void 0;
(function (IntegrationDetails) {
    IntegrationDetails.visit = (value, visitor) => {
        if (value.openSearchIntegrationDetails !== undefined)
            return visitor.openSearchIntegrationDetails(value.openSearchIntegrationDetails);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.IntegrationDetails || (exports.IntegrationDetails = {}));
const IntegrationStatus = {
    ACTIVE: "ACTIVE",
    FAILED: "FAILED",
    PROVISIONING: "PROVISIONING",
};
const IntegrationType = {
    OPENSEARCH: "OPENSEARCH",
};
class InternalStreamingException extends CloudWatchLogsServiceException {
    name = "InternalStreamingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InternalStreamingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalStreamingException.prototype);
    }
}
exports.GetLogObjectResponseStream = void 0;
(function (GetLogObjectResponseStream) {
    GetLogObjectResponseStream.visit = (value, visitor) => {
        if (value.fields !== undefined)
            return visitor.fields(value.fields);
        if (value.InternalStreamingException !== undefined)
            return visitor.InternalStreamingException(value.InternalStreamingException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.GetLogObjectResponseStream || (exports.GetLogObjectResponseStream = {}));
const OCSFVersion = {
    V1_1: "V1.1",
};
const Type = {
    BOOLEAN: "boolean",
    DOUBLE: "double",
    INTEGER: "integer",
    STRING: "string",
};
class InvalidSequenceTokenException extends CloudWatchLogsServiceException {
    name = "InvalidSequenceTokenException";
    $fault = "client";
    expectedSequenceToken;
    constructor(opts) {
        super({
            name: "InvalidSequenceTokenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidSequenceTokenException.prototype);
        this.expectedSequenceToken = opts.expectedSequenceToken;
    }
}
const SuppressionState = {
    SUPPRESSED: "SUPPRESSED",
    UNSUPPRESSED: "UNSUPPRESSED",
};
exports.ResourceConfig = void 0;
(function (ResourceConfig) {
    ResourceConfig.visit = (value, visitor) => {
        if (value.openSearchResourceConfig !== undefined)
            return visitor.openSearchResourceConfig(value.openSearchResourceConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.ResourceConfig || (exports.ResourceConfig = {}));
class UnrecognizedClientException extends CloudWatchLogsServiceException {
    name = "UnrecognizedClientException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnrecognizedClientException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnrecognizedClientException.prototype);
    }
}
class SessionStreamingException extends CloudWatchLogsServiceException {
    name = "SessionStreamingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "SessionStreamingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, SessionStreamingException.prototype);
    }
}
class SessionTimeoutException extends CloudWatchLogsServiceException {
    name = "SessionTimeoutException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "SessionTimeoutException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, SessionTimeoutException.prototype);
    }
}
exports.StartLiveTailResponseStream = void 0;
(function (StartLiveTailResponseStream) {
    StartLiveTailResponseStream.visit = (value, visitor) => {
        if (value.sessionStart !== undefined)
            return visitor.sessionStart(value.sessionStart);
        if (value.sessionUpdate !== undefined)
            return visitor.sessionUpdate(value.sessionUpdate);
        if (value.SessionTimeoutException !== undefined)
            return visitor.SessionTimeoutException(value.SessionTimeoutException);
        if (value.SessionStreamingException !== undefined)
            return visitor.SessionStreamingException(value.SessionStreamingException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.StartLiveTailResponseStream || (exports.StartLiveTailResponseStream = {}));
class MalformedQueryException extends CloudWatchLogsServiceException {
    name = "MalformedQueryException";
    $fault = "client";
    queryCompileError;
    constructor(opts) {
        super({
            name: "MalformedQueryException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MalformedQueryException.prototype);
        this.queryCompileError = opts.queryCompileError;
    }
}
class TooManyTagsException extends CloudWatchLogsServiceException {
    name = "TooManyTagsException";
    $fault = "client";
    resourceName;
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.resourceName = opts.resourceName;
    }
}
const SuppressionUnit = {
    HOURS: "HOURS",
    MINUTES: "MINUTES",
    SECONDS: "SECONDS",
};
const SuppressionType = {
    INFINITE: "INFINITE",
    LIMITED: "LIMITED",
};
const GetLogObjectResponseStreamFilterSensitiveLog = (obj) => {
    if (obj.fields !== undefined)
        return { fields: obj.fields };
    if (obj.InternalStreamingException !== undefined)
        return { InternalStreamingException: obj.InternalStreamingException };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const GetLogObjectResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.fieldStream && { fieldStream: "STREAMING_CONTENT" }),
});
const StartLiveTailResponseStreamFilterSensitiveLog = (obj) => {
    if (obj.sessionStart !== undefined)
        return { sessionStart: obj.sessionStart };
    if (obj.sessionUpdate !== undefined)
        return { sessionUpdate: obj.sessionUpdate };
    if (obj.SessionTimeoutException !== undefined)
        return { SessionTimeoutException: obj.SessionTimeoutException };
    if (obj.SessionStreamingException !== undefined)
        return { SessionStreamingException: obj.SessionStreamingException };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const StartLiveTailResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.responseStream && { responseStream: "STREAMING_CONTENT" }),
});

const se_AssociateKmsKeyCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateKmsKey");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelExportTaskCommand = async (input, context) => {
    const headers = sharedHeaders("CancelExportTask");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateDeliveryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDelivery");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateExportTaskCommand = async (input, context) => {
    const headers = sharedHeaders("CreateExportTask");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLogAnomalyDetectorCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLogAnomalyDetector");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLogGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLogGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLogStreamCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLogStream");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAccountPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAccountPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDataProtectionPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataProtectionPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDeliveryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDelivery");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDeliveryDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDeliveryDestination");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDeliveryDestinationPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDeliveryDestinationPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDeliverySourceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDeliverySource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDestination");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteIndexPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteIndexPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteIntegrationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteIntegration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLogAnomalyDetectorCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLogAnomalyDetector");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLogGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLogGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLogStreamCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLogStream");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteMetricFilterCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMetricFilter");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteQueryDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteQueryDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRetentionPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRetentionPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSubscriptionFilterCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSubscriptionFilter");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransformerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTransformer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAccountPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAccountPolicies");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeConfigurationTemplatesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigurationTemplates");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDeliveriesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDeliveries");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDeliveryDestinationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDeliveryDestinations");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDeliverySourcesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDeliverySources");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDestinationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDestinations");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeExportTasksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeExportTasks");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFieldIndexesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFieldIndexes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIndexPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeIndexPolicies");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLogGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLogGroups");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLogStreamsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLogStreams");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMetricFiltersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMetricFilters");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeQueriesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeQueries");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeQueryDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeQueryDefinitions");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeResourcePoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeResourcePolicies");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSubscriptionFiltersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSubscriptionFilters");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateKmsKeyCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateKmsKey");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_FilterLogEventsCommand = async (input, context) => {
    const headers = sharedHeaders("FilterLogEvents");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDataProtectionPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataProtectionPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDeliveryCommand = async (input, context) => {
    const headers = sharedHeaders("GetDelivery");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDeliveryDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("GetDeliveryDestination");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDeliveryDestinationPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetDeliveryDestinationPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDeliverySourceCommand = async (input, context) => {
    const headers = sharedHeaders("GetDeliverySource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetIntegrationCommand = async (input, context) => {
    const headers = sharedHeaders("GetIntegration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLogAnomalyDetectorCommand = async (input, context) => {
    const headers = sharedHeaders("GetLogAnomalyDetector");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLogEventsCommand = async (input, context) => {
    const headers = sharedHeaders("GetLogEvents");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLogGroupFieldsCommand = async (input, context) => {
    const headers = sharedHeaders("GetLogGroupFields");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLogObjectCommand = async (input, context) => {
    const headers = sharedHeaders("GetLogObject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "streaming-" + resolvedHostname;
        if (!protocolHttp.isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    return buildHttpRpcRequest(context, headers, "/", resolvedHostname, body);
};
const se_GetLogRecordCommand = async (input, context) => {
    const headers = sharedHeaders("GetLogRecord");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetQueryResultsCommand = async (input, context) => {
    const headers = sharedHeaders("GetQueryResults");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTransformerCommand = async (input, context) => {
    const headers = sharedHeaders("GetTransformer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAnomaliesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAnomalies");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListIntegrationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListIntegrations");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListLogAnomalyDetectorsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLogAnomalyDetectors");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListLogGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLogGroups");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListLogGroupsForQueryCommand = async (input, context) => {
    const headers = sharedHeaders("ListLogGroupsForQuery");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsLogGroupCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsLogGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutAccountPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutAccountPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutDataProtectionPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutDataProtectionPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutDeliveryDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("PutDeliveryDestination");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutDeliveryDestinationPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutDeliveryDestinationPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutDeliverySourceCommand = async (input, context) => {
    const headers = sharedHeaders("PutDeliverySource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("PutDestination");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutDestinationPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutDestinationPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutIndexPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutIndexPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutIntegrationCommand = async (input, context) => {
    const headers = sharedHeaders("PutIntegration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutLogEventsCommand = async (input, context) => {
    const headers = sharedHeaders("PutLogEvents");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutMetricFilterCommand = async (input, context) => {
    const headers = sharedHeaders("PutMetricFilter");
    let body;
    body = JSON.stringify(se_PutMetricFilterRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutQueryDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("PutQueryDefinition");
    let body;
    body = JSON.stringify(se_PutQueryDefinitionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutRetentionPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutRetentionPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutSubscriptionFilterCommand = async (input, context) => {
    const headers = sharedHeaders("PutSubscriptionFilter");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutTransformerCommand = async (input, context) => {
    const headers = sharedHeaders("PutTransformer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartLiveTailCommand = async (input, context) => {
    const headers = sharedHeaders("StartLiveTail");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "streaming-" + resolvedHostname;
        if (!protocolHttp.isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    return buildHttpRpcRequest(context, headers, "/", resolvedHostname, body);
};
const se_StartQueryCommand = async (input, context) => {
    const headers = sharedHeaders("StartQuery");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopQueryCommand = async (input, context) => {
    const headers = sharedHeaders("StopQuery");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagLogGroupCommand = async (input, context) => {
    const headers = sharedHeaders("TagLogGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TestMetricFilterCommand = async (input, context) => {
    const headers = sharedHeaders("TestMetricFilter");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TestTransformerCommand = async (input, context) => {
    const headers = sharedHeaders("TestTransformer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagLogGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UntagLogGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAnomalyCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAnomaly");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDeliveryConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDeliveryConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateLogAnomalyDetectorCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateLogAnomalyDetector");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AssociateKmsKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CancelExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateDeliveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLogAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLogGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateLogStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteAccountPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDataProtectionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDeliveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDeliveryDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDeliveryDestinationPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDeliverySourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteIndexPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteIntegrationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLogAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteLogGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteLogStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteMetricFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteQueryDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteRetentionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSubscriptionFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteTransformerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DescribeAccountPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeConfigurationTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDeliveriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDeliveryDestinationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDeliverySourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDestinationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeExportTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFieldIndexesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIndexPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLogGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLogStreamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMetricFiltersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeMetricFiltersResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeQueriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeQueryDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeResourcePoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSubscriptionFiltersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateKmsKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_FilterLogEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDataProtectionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDeliveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDeliveryDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDeliveryDestinationPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDeliverySourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIntegrationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLogAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLogEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLogGroupFieldsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLogObjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = { fieldStream: de_GetLogObjectResponseStream(output.body, context) };
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLogRecordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetQueryResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetQueryResultsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransformerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAnomaliesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListIntegrationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListLogAnomalyDetectorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListLogGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListLogGroupsForQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsLogGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutAccountPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutDataProtectionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutDeliveryDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutDeliveryDestinationPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutDeliverySourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutDestinationPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutIndexPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutIntegrationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutLogEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutMetricFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutQueryDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutRetentionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutSubscriptionFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutTransformerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StartLiveTailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = { responseStream: de_StartLiveTailResponseStream(output.body, context) };
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagLogGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_TestMetricFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TestTransformerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagLogGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateAnomalyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateDeliveryConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateLogAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput);
        case "OperationAbortedException":
        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
            throw await de_OperationAbortedExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "ServiceUnavailableException":
        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput);
        case "InvalidOperationException":
        case "com.amazonaws.cloudwatchlogs#InvalidOperationException":
            throw await de_InvalidOperationExceptionRes(parsedOutput);
        case "AccessDeniedException":
        case "com.amazonaws.cloudwatchlogs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.cloudwatchlogs#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.cloudwatchlogs#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.cloudwatchlogs#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        case "ValidationException":
        case "com.amazonaws.cloudwatchlogs#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.cloudwatchlogs#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput);
        case "DataAlreadyAcceptedException":
        case "com.amazonaws.cloudwatchlogs#DataAlreadyAcceptedException":
            throw await de_DataAlreadyAcceptedExceptionRes(parsedOutput);
        case "InvalidSequenceTokenException":
        case "com.amazonaws.cloudwatchlogs#InvalidSequenceTokenException":
            throw await de_InvalidSequenceTokenExceptionRes(parsedOutput);
        case "UnrecognizedClientException":
        case "com.amazonaws.cloudwatchlogs#UnrecognizedClientException":
            throw await de_UnrecognizedClientExceptionRes(parsedOutput);
        case "MalformedQueryException":
        case "com.amazonaws.cloudwatchlogs#MalformedQueryException":
            throw await de_MalformedQueryExceptionRes(parsedOutput);
        case "TooManyTagsException":
        case "com.amazonaws.cloudwatchlogs#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DataAlreadyAcceptedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new DataAlreadyAcceptedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidSequenceTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidSequenceTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_MalformedQueryExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new MalformedQueryException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_OperationAbortedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new OperationAbortedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnrecognizedClientExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnrecognizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_GetLogObjectResponseStream = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["fields"] != null) {
            return {
                fields: await de_FieldsData_event(event["fields"], context),
            };
        }
        if (event["InternalStreamingException"] != null) {
            return {
                InternalStreamingException: await de_InternalStreamingException_event(event["InternalStreamingException"], context),
            };
        }
        return { $unknown: event };
    });
};
const de_StartLiveTailResponseStream = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["sessionStart"] != null) {
            return {
                sessionStart: await de_LiveTailSessionStart_event(event["sessionStart"], context),
            };
        }
        if (event["sessionUpdate"] != null) {
            return {
                sessionUpdate: await de_LiveTailSessionUpdate_event(event["sessionUpdate"], context),
            };
        }
        if (event["SessionTimeoutException"] != null) {
            return {
                SessionTimeoutException: await de_SessionTimeoutException_event(event["SessionTimeoutException"], context),
            };
        }
        if (event["SessionStreamingException"] != null) {
            return {
                SessionStreamingException: await de_SessionStreamingException_event(event["SessionStreamingException"], context),
            };
        }
        return { $unknown: event };
    });
};
const de_FieldsData_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, de_FieldsData(data, context));
    return contents;
};
const de_InternalStreamingException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_InternalStreamingExceptionRes(parsedOutput);
};
const de_LiveTailSessionStart_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, smithyClient._json(data));
    return contents;
};
const de_LiveTailSessionUpdate_event = async (output, context) => {
    const contents = {};
    const data = await core$1.parseJsonBody(output.body, context);
    Object.assign(contents, smithyClient._json(data));
    return contents;
};
const de_SessionStreamingException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_SessionStreamingExceptionRes(parsedOutput);
};
const de_SessionTimeoutException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonBody(output.body, context),
    };
    return de_SessionTimeoutExceptionRes(parsedOutput);
};
const de_InternalStreamingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InternalStreamingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_SessionStreamingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new SessionStreamingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_SessionTimeoutExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new SessionTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_MetricTransformation = (input, context) => {
    return smithyClient.take(input, {
        defaultValue: smithyClient.serializeFloat,
        dimensions: smithyClient._json,
        metricName: [],
        metricNamespace: [],
        metricValue: [],
        unit: [],
    });
};
const se_MetricTransformations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MetricTransformation(entry);
    });
};
const se_PutMetricFilterRequest = (input, context) => {
    return smithyClient.take(input, {
        applyOnTransformedLogs: [],
        emitSystemFieldDimensions: smithyClient._json,
        fieldSelectionCriteria: [],
        filterName: [],
        filterPattern: [],
        logGroupName: [],
        metricTransformations: (_) => se_MetricTransformations(_),
    });
};
const se_PutQueryDefinitionRequest = (input, context) => {
    return smithyClient.take(input, {
        clientToken: [true, (_) => _ ?? uuid.v4()],
        logGroupNames: smithyClient._json,
        name: [],
        queryDefinitionId: [],
        queryLanguage: [],
        queryString: [],
    });
};
const de_DescribeMetricFiltersResponse = (output, context) => {
    return smithyClient.take(output, {
        metricFilters: (_) => de_MetricFilters(_),
        nextToken: smithyClient.expectString,
    });
};
const de_FieldsData = (output, context) => {
    return smithyClient.take(output, {
        data: context.base64Decoder,
    });
};
const de_GetQueryResultsResponse = (output, context) => {
    return smithyClient.take(output, {
        encryptionKey: smithyClient.expectString,
        queryLanguage: smithyClient.expectString,
        results: smithyClient._json,
        statistics: (_) => de_QueryStatistics(_),
        status: smithyClient.expectString,
    });
};
const de_MetricFilter = (output, context) => {
    return smithyClient.take(output, {
        applyOnTransformedLogs: smithyClient.expectBoolean,
        creationTime: smithyClient.expectLong,
        emitSystemFieldDimensions: smithyClient._json,
        fieldSelectionCriteria: smithyClient.expectString,
        filterName: smithyClient.expectString,
        filterPattern: smithyClient.expectString,
        logGroupName: smithyClient.expectString,
        metricTransformations: (_) => de_MetricTransformations(_),
    });
};
const de_MetricFilters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricFilter(entry);
    });
    return retVal;
};
const de_MetricTransformation = (output, context) => {
    return smithyClient.take(output, {
        defaultValue: smithyClient.limitedParseDouble,
        dimensions: smithyClient._json,
        metricName: smithyClient.expectString,
        metricNamespace: smithyClient.expectString,
        metricValue: smithyClient.expectString,
        unit: smithyClient.expectString,
    });
};
const de_MetricTransformations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricTransformation(entry);
    });
    return retVal;
};
const de_QueryStatistics = (output, context) => {
    return smithyClient.take(output, {
        bytesScanned: smithyClient.limitedParseDouble,
        estimatedBytesSkipped: smithyClient.limitedParseDouble,
        estimatedRecordsSkipped: smithyClient.limitedParseDouble,
        logGroupsScanned: smithyClient.limitedParseDouble,
        recordsMatched: smithyClient.limitedParseDouble,
        recordsScanned: smithyClient.limitedParseDouble,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(CloudWatchLogsServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `Logs_20140328.${operation}`,
    };
}

class AssociateKmsKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "AssociateKmsKey", {})
    .n("CloudWatchLogsClient", "AssociateKmsKeyCommand")
    .f(void 0, void 0)
    .ser(se_AssociateKmsKeyCommand)
    .de(de_AssociateKmsKeyCommand)
    .build() {
}

class CancelExportTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "CancelExportTask", {})
    .n("CloudWatchLogsClient", "CancelExportTaskCommand")
    .f(void 0, void 0)
    .ser(se_CancelExportTaskCommand)
    .de(de_CancelExportTaskCommand)
    .build() {
}

class CreateDeliveryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "CreateDelivery", {})
    .n("CloudWatchLogsClient", "CreateDeliveryCommand")
    .f(void 0, void 0)
    .ser(se_CreateDeliveryCommand)
    .de(de_CreateDeliveryCommand)
    .build() {
}

class CreateExportTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "CreateExportTask", {})
    .n("CloudWatchLogsClient", "CreateExportTaskCommand")
    .f(void 0, void 0)
    .ser(se_CreateExportTaskCommand)
    .de(de_CreateExportTaskCommand)
    .build() {
}

class CreateLogAnomalyDetectorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "CreateLogAnomalyDetector", {})
    .n("CloudWatchLogsClient", "CreateLogAnomalyDetectorCommand")
    .f(void 0, void 0)
    .ser(se_CreateLogAnomalyDetectorCommand)
    .de(de_CreateLogAnomalyDetectorCommand)
    .build() {
}

class CreateLogGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "CreateLogGroup", {})
    .n("CloudWatchLogsClient", "CreateLogGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateLogGroupCommand)
    .de(de_CreateLogGroupCommand)
    .build() {
}

class CreateLogStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "CreateLogStream", {})
    .n("CloudWatchLogsClient", "CreateLogStreamCommand")
    .f(void 0, void 0)
    .ser(se_CreateLogStreamCommand)
    .de(de_CreateLogStreamCommand)
    .build() {
}

class DeleteAccountPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteAccountPolicy", {})
    .n("CloudWatchLogsClient", "DeleteAccountPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAccountPolicyCommand)
    .de(de_DeleteAccountPolicyCommand)
    .build() {
}

class DeleteDataProtectionPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteDataProtectionPolicy", {})
    .n("CloudWatchLogsClient", "DeleteDataProtectionPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDataProtectionPolicyCommand)
    .de(de_DeleteDataProtectionPolicyCommand)
    .build() {
}

class DeleteDeliveryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteDelivery", {})
    .n("CloudWatchLogsClient", "DeleteDeliveryCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDeliveryCommand)
    .de(de_DeleteDeliveryCommand)
    .build() {
}

class DeleteDeliveryDestinationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteDeliveryDestination", {})
    .n("CloudWatchLogsClient", "DeleteDeliveryDestinationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDeliveryDestinationCommand)
    .de(de_DeleteDeliveryDestinationCommand)
    .build() {
}

class DeleteDeliveryDestinationPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteDeliveryDestinationPolicy", {})
    .n("CloudWatchLogsClient", "DeleteDeliveryDestinationPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDeliveryDestinationPolicyCommand)
    .de(de_DeleteDeliveryDestinationPolicyCommand)
    .build() {
}

class DeleteDeliverySourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteDeliverySource", {})
    .n("CloudWatchLogsClient", "DeleteDeliverySourceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDeliverySourceCommand)
    .de(de_DeleteDeliverySourceCommand)
    .build() {
}

class DeleteDestinationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteDestination", {})
    .n("CloudWatchLogsClient", "DeleteDestinationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDestinationCommand)
    .de(de_DeleteDestinationCommand)
    .build() {
}

class DeleteIndexPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteIndexPolicy", {})
    .n("CloudWatchLogsClient", "DeleteIndexPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIndexPolicyCommand)
    .de(de_DeleteIndexPolicyCommand)
    .build() {
}

class DeleteIntegrationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteIntegration", {})
    .n("CloudWatchLogsClient", "DeleteIntegrationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIntegrationCommand)
    .de(de_DeleteIntegrationCommand)
    .build() {
}

class DeleteLogAnomalyDetectorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteLogAnomalyDetector", {})
    .n("CloudWatchLogsClient", "DeleteLogAnomalyDetectorCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLogAnomalyDetectorCommand)
    .de(de_DeleteLogAnomalyDetectorCommand)
    .build() {
}

class DeleteLogGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteLogGroup", {})
    .n("CloudWatchLogsClient", "DeleteLogGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLogGroupCommand)
    .de(de_DeleteLogGroupCommand)
    .build() {
}

class DeleteLogStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteLogStream", {})
    .n("CloudWatchLogsClient", "DeleteLogStreamCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLogStreamCommand)
    .de(de_DeleteLogStreamCommand)
    .build() {
}

class DeleteMetricFilterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteMetricFilter", {})
    .n("CloudWatchLogsClient", "DeleteMetricFilterCommand")
    .f(void 0, void 0)
    .ser(se_DeleteMetricFilterCommand)
    .de(de_DeleteMetricFilterCommand)
    .build() {
}

class DeleteQueryDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteQueryDefinition", {})
    .n("CloudWatchLogsClient", "DeleteQueryDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteQueryDefinitionCommand)
    .de(de_DeleteQueryDefinitionCommand)
    .build() {
}

class DeleteResourcePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteResourcePolicy", {})
    .n("CloudWatchLogsClient", "DeleteResourcePolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteResourcePolicyCommand)
    .de(de_DeleteResourcePolicyCommand)
    .build() {
}

class DeleteRetentionPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteRetentionPolicy", {})
    .n("CloudWatchLogsClient", "DeleteRetentionPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRetentionPolicyCommand)
    .de(de_DeleteRetentionPolicyCommand)
    .build() {
}

class DeleteSubscriptionFilterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteSubscriptionFilter", {})
    .n("CloudWatchLogsClient", "DeleteSubscriptionFilterCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSubscriptionFilterCommand)
    .de(de_DeleteSubscriptionFilterCommand)
    .build() {
}

class DeleteTransformerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DeleteTransformer", {})
    .n("CloudWatchLogsClient", "DeleteTransformerCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransformerCommand)
    .de(de_DeleteTransformerCommand)
    .build() {
}

class DescribeAccountPoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeAccountPolicies", {})
    .n("CloudWatchLogsClient", "DescribeAccountPoliciesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAccountPoliciesCommand)
    .de(de_DescribeAccountPoliciesCommand)
    .build() {
}

class DescribeConfigurationTemplatesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeConfigurationTemplates", {})
    .n("CloudWatchLogsClient", "DescribeConfigurationTemplatesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeConfigurationTemplatesCommand)
    .de(de_DescribeConfigurationTemplatesCommand)
    .build() {
}

class DescribeDeliveriesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeDeliveries", {})
    .n("CloudWatchLogsClient", "DescribeDeliveriesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDeliveriesCommand)
    .de(de_DescribeDeliveriesCommand)
    .build() {
}

class DescribeDeliveryDestinationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeDeliveryDestinations", {})
    .n("CloudWatchLogsClient", "DescribeDeliveryDestinationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDeliveryDestinationsCommand)
    .de(de_DescribeDeliveryDestinationsCommand)
    .build() {
}

class DescribeDeliverySourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeDeliverySources", {})
    .n("CloudWatchLogsClient", "DescribeDeliverySourcesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDeliverySourcesCommand)
    .de(de_DescribeDeliverySourcesCommand)
    .build() {
}

class DescribeDestinationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeDestinations", {})
    .n("CloudWatchLogsClient", "DescribeDestinationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDestinationsCommand)
    .de(de_DescribeDestinationsCommand)
    .build() {
}

class DescribeExportTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeExportTasks", {})
    .n("CloudWatchLogsClient", "DescribeExportTasksCommand")
    .f(void 0, void 0)
    .ser(se_DescribeExportTasksCommand)
    .de(de_DescribeExportTasksCommand)
    .build() {
}

class DescribeFieldIndexesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeFieldIndexes", {})
    .n("CloudWatchLogsClient", "DescribeFieldIndexesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFieldIndexesCommand)
    .de(de_DescribeFieldIndexesCommand)
    .build() {
}

class DescribeIndexPoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeIndexPolicies", {})
    .n("CloudWatchLogsClient", "DescribeIndexPoliciesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIndexPoliciesCommand)
    .de(de_DescribeIndexPoliciesCommand)
    .build() {
}

class DescribeLogGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeLogGroups", {})
    .n("CloudWatchLogsClient", "DescribeLogGroupsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLogGroupsCommand)
    .de(de_DescribeLogGroupsCommand)
    .build() {
}

class DescribeLogStreamsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeLogStreams", {})
    .n("CloudWatchLogsClient", "DescribeLogStreamsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLogStreamsCommand)
    .de(de_DescribeLogStreamsCommand)
    .build() {
}

class DescribeMetricFiltersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeMetricFilters", {})
    .n("CloudWatchLogsClient", "DescribeMetricFiltersCommand")
    .f(void 0, void 0)
    .ser(se_DescribeMetricFiltersCommand)
    .de(de_DescribeMetricFiltersCommand)
    .build() {
}

class DescribeQueriesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeQueries", {})
    .n("CloudWatchLogsClient", "DescribeQueriesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeQueriesCommand)
    .de(de_DescribeQueriesCommand)
    .build() {
}

class DescribeQueryDefinitionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeQueryDefinitions", {})
    .n("CloudWatchLogsClient", "DescribeQueryDefinitionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeQueryDefinitionsCommand)
    .de(de_DescribeQueryDefinitionsCommand)
    .build() {
}

class DescribeResourcePoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeResourcePolicies", {})
    .n("CloudWatchLogsClient", "DescribeResourcePoliciesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeResourcePoliciesCommand)
    .de(de_DescribeResourcePoliciesCommand)
    .build() {
}

class DescribeSubscriptionFiltersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DescribeSubscriptionFilters", {})
    .n("CloudWatchLogsClient", "DescribeSubscriptionFiltersCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSubscriptionFiltersCommand)
    .de(de_DescribeSubscriptionFiltersCommand)
    .build() {
}

class DisassociateKmsKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "DisassociateKmsKey", {})
    .n("CloudWatchLogsClient", "DisassociateKmsKeyCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateKmsKeyCommand)
    .de(de_DisassociateKmsKeyCommand)
    .build() {
}

class FilterLogEventsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "FilterLogEvents", {})
    .n("CloudWatchLogsClient", "FilterLogEventsCommand")
    .f(void 0, void 0)
    .ser(se_FilterLogEventsCommand)
    .de(de_FilterLogEventsCommand)
    .build() {
}

class GetDataProtectionPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetDataProtectionPolicy", {})
    .n("CloudWatchLogsClient", "GetDataProtectionPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetDataProtectionPolicyCommand)
    .de(de_GetDataProtectionPolicyCommand)
    .build() {
}

class GetDeliveryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetDelivery", {})
    .n("CloudWatchLogsClient", "GetDeliveryCommand")
    .f(void 0, void 0)
    .ser(se_GetDeliveryCommand)
    .de(de_GetDeliveryCommand)
    .build() {
}

class GetDeliveryDestinationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetDeliveryDestination", {})
    .n("CloudWatchLogsClient", "GetDeliveryDestinationCommand")
    .f(void 0, void 0)
    .ser(se_GetDeliveryDestinationCommand)
    .de(de_GetDeliveryDestinationCommand)
    .build() {
}

class GetDeliveryDestinationPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetDeliveryDestinationPolicy", {})
    .n("CloudWatchLogsClient", "GetDeliveryDestinationPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetDeliveryDestinationPolicyCommand)
    .de(de_GetDeliveryDestinationPolicyCommand)
    .build() {
}

class GetDeliverySourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetDeliverySource", {})
    .n("CloudWatchLogsClient", "GetDeliverySourceCommand")
    .f(void 0, void 0)
    .ser(se_GetDeliverySourceCommand)
    .de(de_GetDeliverySourceCommand)
    .build() {
}

class GetIntegrationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetIntegration", {})
    .n("CloudWatchLogsClient", "GetIntegrationCommand")
    .f(void 0, void 0)
    .ser(se_GetIntegrationCommand)
    .de(de_GetIntegrationCommand)
    .build() {
}

class GetLogAnomalyDetectorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetLogAnomalyDetector", {})
    .n("CloudWatchLogsClient", "GetLogAnomalyDetectorCommand")
    .f(void 0, void 0)
    .ser(se_GetLogAnomalyDetectorCommand)
    .de(de_GetLogAnomalyDetectorCommand)
    .build() {
}

class GetLogEventsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetLogEvents", {})
    .n("CloudWatchLogsClient", "GetLogEventsCommand")
    .f(void 0, void 0)
    .ser(se_GetLogEventsCommand)
    .de(de_GetLogEventsCommand)
    .build() {
}

class GetLogGroupFieldsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetLogGroupFields", {})
    .n("CloudWatchLogsClient", "GetLogGroupFieldsCommand")
    .f(void 0, void 0)
    .ser(se_GetLogGroupFieldsCommand)
    .de(de_GetLogGroupFieldsCommand)
    .build() {
}

class GetLogObjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetLogObject", {
    eventStream: {
        output: true,
    },
})
    .n("CloudWatchLogsClient", "GetLogObjectCommand")
    .f(void 0, GetLogObjectResponseFilterSensitiveLog)
    .ser(se_GetLogObjectCommand)
    .de(de_GetLogObjectCommand)
    .build() {
}

class GetLogRecordCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetLogRecord", {})
    .n("CloudWatchLogsClient", "GetLogRecordCommand")
    .f(void 0, void 0)
    .ser(se_GetLogRecordCommand)
    .de(de_GetLogRecordCommand)
    .build() {
}

class GetQueryResultsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetQueryResults", {})
    .n("CloudWatchLogsClient", "GetQueryResultsCommand")
    .f(void 0, void 0)
    .ser(se_GetQueryResultsCommand)
    .de(de_GetQueryResultsCommand)
    .build() {
}

class GetTransformerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "GetTransformer", {})
    .n("CloudWatchLogsClient", "GetTransformerCommand")
    .f(void 0, void 0)
    .ser(se_GetTransformerCommand)
    .de(de_GetTransformerCommand)
    .build() {
}

class ListAnomaliesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "ListAnomalies", {})
    .n("CloudWatchLogsClient", "ListAnomaliesCommand")
    .f(void 0, void 0)
    .ser(se_ListAnomaliesCommand)
    .de(de_ListAnomaliesCommand)
    .build() {
}

class ListIntegrationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "ListIntegrations", {})
    .n("CloudWatchLogsClient", "ListIntegrationsCommand")
    .f(void 0, void 0)
    .ser(se_ListIntegrationsCommand)
    .de(de_ListIntegrationsCommand)
    .build() {
}

class ListLogAnomalyDetectorsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "ListLogAnomalyDetectors", {})
    .n("CloudWatchLogsClient", "ListLogAnomalyDetectorsCommand")
    .f(void 0, void 0)
    .ser(se_ListLogAnomalyDetectorsCommand)
    .de(de_ListLogAnomalyDetectorsCommand)
    .build() {
}

class ListLogGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "ListLogGroups", {})
    .n("CloudWatchLogsClient", "ListLogGroupsCommand")
    .f(void 0, void 0)
    .ser(se_ListLogGroupsCommand)
    .de(de_ListLogGroupsCommand)
    .build() {
}

class ListLogGroupsForQueryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "ListLogGroupsForQuery", {})
    .n("CloudWatchLogsClient", "ListLogGroupsForQueryCommand")
    .f(void 0, void 0)
    .ser(se_ListLogGroupsForQueryCommand)
    .de(de_ListLogGroupsForQueryCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "ListTagsForResource", {})
    .n("CloudWatchLogsClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListTagsLogGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "ListTagsLogGroup", {})
    .n("CloudWatchLogsClient", "ListTagsLogGroupCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsLogGroupCommand)
    .de(de_ListTagsLogGroupCommand)
    .build() {
}

class PutAccountPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutAccountPolicy", {})
    .n("CloudWatchLogsClient", "PutAccountPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutAccountPolicyCommand)
    .de(de_PutAccountPolicyCommand)
    .build() {
}

class PutDataProtectionPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutDataProtectionPolicy", {})
    .n("CloudWatchLogsClient", "PutDataProtectionPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutDataProtectionPolicyCommand)
    .de(de_PutDataProtectionPolicyCommand)
    .build() {
}

class PutDeliveryDestinationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutDeliveryDestination", {})
    .n("CloudWatchLogsClient", "PutDeliveryDestinationCommand")
    .f(void 0, void 0)
    .ser(se_PutDeliveryDestinationCommand)
    .de(de_PutDeliveryDestinationCommand)
    .build() {
}

class PutDeliveryDestinationPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutDeliveryDestinationPolicy", {})
    .n("CloudWatchLogsClient", "PutDeliveryDestinationPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutDeliveryDestinationPolicyCommand)
    .de(de_PutDeliveryDestinationPolicyCommand)
    .build() {
}

class PutDeliverySourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutDeliverySource", {})
    .n("CloudWatchLogsClient", "PutDeliverySourceCommand")
    .f(void 0, void 0)
    .ser(se_PutDeliverySourceCommand)
    .de(de_PutDeliverySourceCommand)
    .build() {
}

class PutDestinationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutDestination", {})
    .n("CloudWatchLogsClient", "PutDestinationCommand")
    .f(void 0, void 0)
    .ser(se_PutDestinationCommand)
    .de(de_PutDestinationCommand)
    .build() {
}

class PutDestinationPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutDestinationPolicy", {})
    .n("CloudWatchLogsClient", "PutDestinationPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutDestinationPolicyCommand)
    .de(de_PutDestinationPolicyCommand)
    .build() {
}

class PutIndexPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutIndexPolicy", {})
    .n("CloudWatchLogsClient", "PutIndexPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutIndexPolicyCommand)
    .de(de_PutIndexPolicyCommand)
    .build() {
}

class PutIntegrationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutIntegration", {})
    .n("CloudWatchLogsClient", "PutIntegrationCommand")
    .f(void 0, void 0)
    .ser(se_PutIntegrationCommand)
    .de(de_PutIntegrationCommand)
    .build() {
}

class PutLogEventsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutLogEvents", {})
    .n("CloudWatchLogsClient", "PutLogEventsCommand")
    .f(void 0, void 0)
    .ser(se_PutLogEventsCommand)
    .de(de_PutLogEventsCommand)
    .build() {
}

class PutMetricFilterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutMetricFilter", {})
    .n("CloudWatchLogsClient", "PutMetricFilterCommand")
    .f(void 0, void 0)
    .ser(se_PutMetricFilterCommand)
    .de(de_PutMetricFilterCommand)
    .build() {
}

class PutQueryDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutQueryDefinition", {})
    .n("CloudWatchLogsClient", "PutQueryDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_PutQueryDefinitionCommand)
    .de(de_PutQueryDefinitionCommand)
    .build() {
}

class PutResourcePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutResourcePolicy", {})
    .n("CloudWatchLogsClient", "PutResourcePolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutResourcePolicyCommand)
    .de(de_PutResourcePolicyCommand)
    .build() {
}

class PutRetentionPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutRetentionPolicy", {})
    .n("CloudWatchLogsClient", "PutRetentionPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutRetentionPolicyCommand)
    .de(de_PutRetentionPolicyCommand)
    .build() {
}

class PutSubscriptionFilterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutSubscriptionFilter", {})
    .n("CloudWatchLogsClient", "PutSubscriptionFilterCommand")
    .f(void 0, void 0)
    .ser(se_PutSubscriptionFilterCommand)
    .de(de_PutSubscriptionFilterCommand)
    .build() {
}

class PutTransformerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "PutTransformer", {})
    .n("CloudWatchLogsClient", "PutTransformerCommand")
    .f(void 0, void 0)
    .ser(se_PutTransformerCommand)
    .de(de_PutTransformerCommand)
    .build() {
}

class StartLiveTailCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "StartLiveTail", {
    eventStream: {
        output: true,
    },
})
    .n("CloudWatchLogsClient", "StartLiveTailCommand")
    .f(void 0, StartLiveTailResponseFilterSensitiveLog)
    .ser(se_StartLiveTailCommand)
    .de(de_StartLiveTailCommand)
    .build() {
}

class StartQueryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "StartQuery", {})
    .n("CloudWatchLogsClient", "StartQueryCommand")
    .f(void 0, void 0)
    .ser(se_StartQueryCommand)
    .de(de_StartQueryCommand)
    .build() {
}

class StopQueryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "StopQuery", {})
    .n("CloudWatchLogsClient", "StopQueryCommand")
    .f(void 0, void 0)
    .ser(se_StopQueryCommand)
    .de(de_StopQueryCommand)
    .build() {
}

class TagLogGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "TagLogGroup", {})
    .n("CloudWatchLogsClient", "TagLogGroupCommand")
    .f(void 0, void 0)
    .ser(se_TagLogGroupCommand)
    .de(de_TagLogGroupCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "TagResource", {})
    .n("CloudWatchLogsClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class TestMetricFilterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "TestMetricFilter", {})
    .n("CloudWatchLogsClient", "TestMetricFilterCommand")
    .f(void 0, void 0)
    .ser(se_TestMetricFilterCommand)
    .de(de_TestMetricFilterCommand)
    .build() {
}

class TestTransformerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "TestTransformer", {})
    .n("CloudWatchLogsClient", "TestTransformerCommand")
    .f(void 0, void 0)
    .ser(se_TestTransformerCommand)
    .de(de_TestTransformerCommand)
    .build() {
}

class UntagLogGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "UntagLogGroup", {})
    .n("CloudWatchLogsClient", "UntagLogGroupCommand")
    .f(void 0, void 0)
    .ser(se_UntagLogGroupCommand)
    .de(de_UntagLogGroupCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "UntagResource", {})
    .n("CloudWatchLogsClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateAnomalyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "UpdateAnomaly", {})
    .n("CloudWatchLogsClient", "UpdateAnomalyCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAnomalyCommand)
    .de(de_UpdateAnomalyCommand)
    .build() {
}

class UpdateDeliveryConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "UpdateDeliveryConfiguration", {})
    .n("CloudWatchLogsClient", "UpdateDeliveryConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDeliveryConfigurationCommand)
    .de(de_UpdateDeliveryConfigurationCommand)
    .build() {
}

class UpdateLogAnomalyDetectorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Logs_20140328", "UpdateLogAnomalyDetector", {})
    .n("CloudWatchLogsClient", "UpdateLogAnomalyDetectorCommand")
    .f(void 0, void 0)
    .ser(se_UpdateLogAnomalyDetectorCommand)
    .de(de_UpdateLogAnomalyDetectorCommand)
    .build() {
}

const commands = {
    AssociateKmsKeyCommand,
    CancelExportTaskCommand,
    CreateDeliveryCommand,
    CreateExportTaskCommand,
    CreateLogAnomalyDetectorCommand,
    CreateLogGroupCommand,
    CreateLogStreamCommand,
    DeleteAccountPolicyCommand,
    DeleteDataProtectionPolicyCommand,
    DeleteDeliveryCommand,
    DeleteDeliveryDestinationCommand,
    DeleteDeliveryDestinationPolicyCommand,
    DeleteDeliverySourceCommand,
    DeleteDestinationCommand,
    DeleteIndexPolicyCommand,
    DeleteIntegrationCommand,
    DeleteLogAnomalyDetectorCommand,
    DeleteLogGroupCommand,
    DeleteLogStreamCommand,
    DeleteMetricFilterCommand,
    DeleteQueryDefinitionCommand,
    DeleteResourcePolicyCommand,
    DeleteRetentionPolicyCommand,
    DeleteSubscriptionFilterCommand,
    DeleteTransformerCommand,
    DescribeAccountPoliciesCommand,
    DescribeConfigurationTemplatesCommand,
    DescribeDeliveriesCommand,
    DescribeDeliveryDestinationsCommand,
    DescribeDeliverySourcesCommand,
    DescribeDestinationsCommand,
    DescribeExportTasksCommand,
    DescribeFieldIndexesCommand,
    DescribeIndexPoliciesCommand,
    DescribeLogGroupsCommand,
    DescribeLogStreamsCommand,
    DescribeMetricFiltersCommand,
    DescribeQueriesCommand,
    DescribeQueryDefinitionsCommand,
    DescribeResourcePoliciesCommand,
    DescribeSubscriptionFiltersCommand,
    DisassociateKmsKeyCommand,
    FilterLogEventsCommand,
    GetDataProtectionPolicyCommand,
    GetDeliveryCommand,
    GetDeliveryDestinationCommand,
    GetDeliveryDestinationPolicyCommand,
    GetDeliverySourceCommand,
    GetIntegrationCommand,
    GetLogAnomalyDetectorCommand,
    GetLogEventsCommand,
    GetLogGroupFieldsCommand,
    GetLogObjectCommand,
    GetLogRecordCommand,
    GetQueryResultsCommand,
    GetTransformerCommand,
    ListAnomaliesCommand,
    ListIntegrationsCommand,
    ListLogAnomalyDetectorsCommand,
    ListLogGroupsCommand,
    ListLogGroupsForQueryCommand,
    ListTagsForResourceCommand,
    ListTagsLogGroupCommand,
    PutAccountPolicyCommand,
    PutDataProtectionPolicyCommand,
    PutDeliveryDestinationCommand,
    PutDeliveryDestinationPolicyCommand,
    PutDeliverySourceCommand,
    PutDestinationCommand,
    PutDestinationPolicyCommand,
    PutIndexPolicyCommand,
    PutIntegrationCommand,
    PutLogEventsCommand,
    PutMetricFilterCommand,
    PutQueryDefinitionCommand,
    PutResourcePolicyCommand,
    PutRetentionPolicyCommand,
    PutSubscriptionFilterCommand,
    PutTransformerCommand,
    StartLiveTailCommand,
    StartQueryCommand,
    StopQueryCommand,
    TagLogGroupCommand,
    TagResourceCommand,
    TestMetricFilterCommand,
    TestTransformerCommand,
    UntagLogGroupCommand,
    UntagResourceCommand,
    UpdateAnomalyCommand,
    UpdateDeliveryConfigurationCommand,
    UpdateLogAnomalyDetectorCommand,
};
class CloudWatchLogs extends CloudWatchLogsClient {
}
smithyClient.createAggregatedClient(commands, CloudWatchLogs);

const paginateDescribeConfigurationTemplates = core.createPaginator(CloudWatchLogsClient, DescribeConfigurationTemplatesCommand, "nextToken", "nextToken", "limit");

const paginateDescribeDeliveries = core.createPaginator(CloudWatchLogsClient, DescribeDeliveriesCommand, "nextToken", "nextToken", "limit");

const paginateDescribeDeliveryDestinations = core.createPaginator(CloudWatchLogsClient, DescribeDeliveryDestinationsCommand, "nextToken", "nextToken", "limit");

const paginateDescribeDeliverySources = core.createPaginator(CloudWatchLogsClient, DescribeDeliverySourcesCommand, "nextToken", "nextToken", "limit");

const paginateDescribeDestinations = core.createPaginator(CloudWatchLogsClient, DescribeDestinationsCommand, "nextToken", "nextToken", "limit");

const paginateDescribeLogGroups = core.createPaginator(CloudWatchLogsClient, DescribeLogGroupsCommand, "nextToken", "nextToken", "limit");

const paginateDescribeLogStreams = core.createPaginator(CloudWatchLogsClient, DescribeLogStreamsCommand, "nextToken", "nextToken", "limit");

const paginateDescribeMetricFilters = core.createPaginator(CloudWatchLogsClient, DescribeMetricFiltersCommand, "nextToken", "nextToken", "limit");

const paginateDescribeSubscriptionFilters = core.createPaginator(CloudWatchLogsClient, DescribeSubscriptionFiltersCommand, "nextToken", "nextToken", "limit");

const paginateFilterLogEvents = core.createPaginator(CloudWatchLogsClient, FilterLogEventsCommand, "nextToken", "nextToken", "limit");

const paginateGetLogEvents = core.createPaginator(CloudWatchLogsClient, GetLogEventsCommand, "nextToken", "nextForwardToken", "limit");

const paginateListAnomalies = core.createPaginator(CloudWatchLogsClient, ListAnomaliesCommand, "nextToken", "nextToken", "limit");

const paginateListLogAnomalyDetectors = core.createPaginator(CloudWatchLogsClient, ListLogAnomalyDetectorsCommand, "nextToken", "nextToken", "limit");

const paginateListLogGroupsForQuery = core.createPaginator(CloudWatchLogsClient, ListLogGroupsForQueryCommand, "nextToken", "nextToken", "maxResults");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccessDeniedException = AccessDeniedException;
exports.AnomalyDetectorStatus = AnomalyDetectorStatus;
exports.AssociateKmsKeyCommand = AssociateKmsKeyCommand;
exports.CancelExportTaskCommand = CancelExportTaskCommand;
exports.CloudWatchLogs = CloudWatchLogs;
exports.CloudWatchLogsClient = CloudWatchLogsClient;
exports.CloudWatchLogsServiceException = CloudWatchLogsServiceException;
exports.ConflictException = ConflictException;
exports.CreateDeliveryCommand = CreateDeliveryCommand;
exports.CreateExportTaskCommand = CreateExportTaskCommand;
exports.CreateLogAnomalyDetectorCommand = CreateLogAnomalyDetectorCommand;
exports.CreateLogGroupCommand = CreateLogGroupCommand;
exports.CreateLogStreamCommand = CreateLogStreamCommand;
exports.DataAlreadyAcceptedException = DataAlreadyAcceptedException;
exports.DataProtectionStatus = DataProtectionStatus;
exports.DeleteAccountPolicyCommand = DeleteAccountPolicyCommand;
exports.DeleteDataProtectionPolicyCommand = DeleteDataProtectionPolicyCommand;
exports.DeleteDeliveryCommand = DeleteDeliveryCommand;
exports.DeleteDeliveryDestinationCommand = DeleteDeliveryDestinationCommand;
exports.DeleteDeliveryDestinationPolicyCommand = DeleteDeliveryDestinationPolicyCommand;
exports.DeleteDeliverySourceCommand = DeleteDeliverySourceCommand;
exports.DeleteDestinationCommand = DeleteDestinationCommand;
exports.DeleteIndexPolicyCommand = DeleteIndexPolicyCommand;
exports.DeleteIntegrationCommand = DeleteIntegrationCommand;
exports.DeleteLogAnomalyDetectorCommand = DeleteLogAnomalyDetectorCommand;
exports.DeleteLogGroupCommand = DeleteLogGroupCommand;
exports.DeleteLogStreamCommand = DeleteLogStreamCommand;
exports.DeleteMetricFilterCommand = DeleteMetricFilterCommand;
exports.DeleteQueryDefinitionCommand = DeleteQueryDefinitionCommand;
exports.DeleteResourcePolicyCommand = DeleteResourcePolicyCommand;
exports.DeleteRetentionPolicyCommand = DeleteRetentionPolicyCommand;
exports.DeleteSubscriptionFilterCommand = DeleteSubscriptionFilterCommand;
exports.DeleteTransformerCommand = DeleteTransformerCommand;
exports.DeliveryDestinationType = DeliveryDestinationType;
exports.DescribeAccountPoliciesCommand = DescribeAccountPoliciesCommand;
exports.DescribeConfigurationTemplatesCommand = DescribeConfigurationTemplatesCommand;
exports.DescribeDeliveriesCommand = DescribeDeliveriesCommand;
exports.DescribeDeliveryDestinationsCommand = DescribeDeliveryDestinationsCommand;
exports.DescribeDeliverySourcesCommand = DescribeDeliverySourcesCommand;
exports.DescribeDestinationsCommand = DescribeDestinationsCommand;
exports.DescribeExportTasksCommand = DescribeExportTasksCommand;
exports.DescribeFieldIndexesCommand = DescribeFieldIndexesCommand;
exports.DescribeIndexPoliciesCommand = DescribeIndexPoliciesCommand;
exports.DescribeLogGroupsCommand = DescribeLogGroupsCommand;
exports.DescribeLogStreamsCommand = DescribeLogStreamsCommand;
exports.DescribeMetricFiltersCommand = DescribeMetricFiltersCommand;
exports.DescribeQueriesCommand = DescribeQueriesCommand;
exports.DescribeQueryDefinitionsCommand = DescribeQueryDefinitionsCommand;
exports.DescribeResourcePoliciesCommand = DescribeResourcePoliciesCommand;
exports.DescribeSubscriptionFiltersCommand = DescribeSubscriptionFiltersCommand;
exports.DisassociateKmsKeyCommand = DisassociateKmsKeyCommand;
exports.Distribution = Distribution;
exports.EntityRejectionErrorType = EntityRejectionErrorType;
exports.EvaluationFrequency = EvaluationFrequency;
exports.EventSource = EventSource;
exports.ExportTaskStatusCode = ExportTaskStatusCode;
exports.FilterLogEventsCommand = FilterLogEventsCommand;
exports.FlattenedElement = FlattenedElement;
exports.GetDataProtectionPolicyCommand = GetDataProtectionPolicyCommand;
exports.GetDeliveryCommand = GetDeliveryCommand;
exports.GetDeliveryDestinationCommand = GetDeliveryDestinationCommand;
exports.GetDeliveryDestinationPolicyCommand = GetDeliveryDestinationPolicyCommand;
exports.GetDeliverySourceCommand = GetDeliverySourceCommand;
exports.GetIntegrationCommand = GetIntegrationCommand;
exports.GetLogAnomalyDetectorCommand = GetLogAnomalyDetectorCommand;
exports.GetLogEventsCommand = GetLogEventsCommand;
exports.GetLogGroupFieldsCommand = GetLogGroupFieldsCommand;
exports.GetLogObjectCommand = GetLogObjectCommand;
exports.GetLogObjectResponseFilterSensitiveLog = GetLogObjectResponseFilterSensitiveLog;
exports.GetLogObjectResponseStreamFilterSensitiveLog = GetLogObjectResponseStreamFilterSensitiveLog;
exports.GetLogRecordCommand = GetLogRecordCommand;
exports.GetQueryResultsCommand = GetQueryResultsCommand;
exports.GetTransformerCommand = GetTransformerCommand;
exports.IndexSource = IndexSource;
exports.InheritedProperty = InheritedProperty;
exports.IntegrationStatus = IntegrationStatus;
exports.IntegrationType = IntegrationType;
exports.InternalStreamingException = InternalStreamingException;
exports.InvalidOperationException = InvalidOperationException;
exports.InvalidParameterException = InvalidParameterException;
exports.InvalidSequenceTokenException = InvalidSequenceTokenException;
exports.LimitExceededException = LimitExceededException;
exports.ListAnomaliesCommand = ListAnomaliesCommand;
exports.ListIntegrationsCommand = ListIntegrationsCommand;
exports.ListLogAnomalyDetectorsCommand = ListLogAnomalyDetectorsCommand;
exports.ListLogGroupsCommand = ListLogGroupsCommand;
exports.ListLogGroupsForQueryCommand = ListLogGroupsForQueryCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListTagsLogGroupCommand = ListTagsLogGroupCommand;
exports.LogGroupClass = LogGroupClass;
exports.MalformedQueryException = MalformedQueryException;
exports.OCSFVersion = OCSFVersion;
exports.OpenSearchResourceStatusType = OpenSearchResourceStatusType;
exports.OperationAbortedException = OperationAbortedException;
exports.OrderBy = OrderBy;
exports.OutputFormat = OutputFormat;
exports.PolicyScope = PolicyScope;
exports.PolicyType = PolicyType;
exports.PutAccountPolicyCommand = PutAccountPolicyCommand;
exports.PutDataProtectionPolicyCommand = PutDataProtectionPolicyCommand;
exports.PutDeliveryDestinationCommand = PutDeliveryDestinationCommand;
exports.PutDeliveryDestinationPolicyCommand = PutDeliveryDestinationPolicyCommand;
exports.PutDeliverySourceCommand = PutDeliverySourceCommand;
exports.PutDestinationCommand = PutDestinationCommand;
exports.PutDestinationPolicyCommand = PutDestinationPolicyCommand;
exports.PutIndexPolicyCommand = PutIndexPolicyCommand;
exports.PutIntegrationCommand = PutIntegrationCommand;
exports.PutLogEventsCommand = PutLogEventsCommand;
exports.PutMetricFilterCommand = PutMetricFilterCommand;
exports.PutQueryDefinitionCommand = PutQueryDefinitionCommand;
exports.PutResourcePolicyCommand = PutResourcePolicyCommand;
exports.PutRetentionPolicyCommand = PutRetentionPolicyCommand;
exports.PutSubscriptionFilterCommand = PutSubscriptionFilterCommand;
exports.PutTransformerCommand = PutTransformerCommand;
exports.QueryLanguage = QueryLanguage;
exports.QueryStatus = QueryStatus;
exports.ResourceAlreadyExistsException = ResourceAlreadyExistsException;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.Scope = Scope;
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.ServiceUnavailableException = ServiceUnavailableException;
exports.SessionStreamingException = SessionStreamingException;
exports.SessionTimeoutException = SessionTimeoutException;
exports.StandardUnit = StandardUnit;
exports.StartLiveTailCommand = StartLiveTailCommand;
exports.StartLiveTailResponseFilterSensitiveLog = StartLiveTailResponseFilterSensitiveLog;
exports.StartLiveTailResponseStreamFilterSensitiveLog = StartLiveTailResponseStreamFilterSensitiveLog;
exports.StartQueryCommand = StartQueryCommand;
exports.State = State;
exports.StopQueryCommand = StopQueryCommand;
exports.SuppressionState = SuppressionState;
exports.SuppressionType = SuppressionType;
exports.SuppressionUnit = SuppressionUnit;
exports.TagLogGroupCommand = TagLogGroupCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.TestMetricFilterCommand = TestMetricFilterCommand;
exports.TestTransformerCommand = TestTransformerCommand;
exports.ThrottlingException = ThrottlingException;
exports.TooManyTagsException = TooManyTagsException;
exports.Type = Type;
exports.UnrecognizedClientException = UnrecognizedClientException;
exports.UntagLogGroupCommand = UntagLogGroupCommand;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateAnomalyCommand = UpdateAnomalyCommand;
exports.UpdateDeliveryConfigurationCommand = UpdateDeliveryConfigurationCommand;
exports.UpdateLogAnomalyDetectorCommand = UpdateLogAnomalyDetectorCommand;
exports.ValidationException = ValidationException;
exports.paginateDescribeConfigurationTemplates = paginateDescribeConfigurationTemplates;
exports.paginateDescribeDeliveries = paginateDescribeDeliveries;
exports.paginateDescribeDeliveryDestinations = paginateDescribeDeliveryDestinations;
exports.paginateDescribeDeliverySources = paginateDescribeDeliverySources;
exports.paginateDescribeDestinations = paginateDescribeDestinations;
exports.paginateDescribeLogGroups = paginateDescribeLogGroups;
exports.paginateDescribeLogStreams = paginateDescribeLogStreams;
exports.paginateDescribeMetricFilters = paginateDescribeMetricFilters;
exports.paginateDescribeSubscriptionFilters = paginateDescribeSubscriptionFilters;
exports.paginateFilterLogEvents = paginateFilterLogEvents;
exports.paginateGetLogEvents = paginateGetLogEvents;
exports.paginateListAnomalies = paginateListAnomalies;
exports.paginateListLogAnomalyDetectors = paginateListLogAnomalyDetectors;
exports.paginateListLogGroupsForQuery = paginateListLogGroupsForQuery;
