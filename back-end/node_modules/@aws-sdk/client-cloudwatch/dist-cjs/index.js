'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareCompression = require('@smithy/middleware-compression');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "monitoring",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class CloudWatchClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = middlewareCompression.resolveCompressionConfig(_config_7);
        const _config_9 = resolveRuntimeExtensions(_config_8, configuration?.extensions || []);
        this.config = _config_9;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultCloudWatchHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class CloudWatchServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, CloudWatchServiceException.prototype);
    }
}

const ActionsSuppressedBy = {
    Alarm: "Alarm",
    ExtensionPeriod: "ExtensionPeriod",
    WaitPeriod: "WaitPeriod",
};
const AlarmType = {
    CompositeAlarm: "CompositeAlarm",
    MetricAlarm: "MetricAlarm",
};
const HistoryItemType = {
    Action: "Action",
    AlarmContributorAction: "AlarmContributorAction",
    AlarmContributorStateUpdate: "AlarmContributorStateUpdate",
    ConfigurationUpdate: "ConfigurationUpdate",
    StateUpdate: "StateUpdate",
};
const StandardUnit = {
    Bits: "Bits",
    Bits_Second: "Bits/Second",
    Bytes: "Bytes",
    Bytes_Second: "Bytes/Second",
    Count: "Count",
    Count_Second: "Count/Second",
    Gigabits: "Gigabits",
    Gigabits_Second: "Gigabits/Second",
    Gigabytes: "Gigabytes",
    Gigabytes_Second: "Gigabytes/Second",
    Kilobits: "Kilobits",
    Kilobits_Second: "Kilobits/Second",
    Kilobytes: "Kilobytes",
    Kilobytes_Second: "Kilobytes/Second",
    Megabits: "Megabits",
    Megabits_Second: "Megabits/Second",
    Megabytes: "Megabytes",
    Megabytes_Second: "Megabytes/Second",
    Microseconds: "Microseconds",
    Milliseconds: "Milliseconds",
    None: "None",
    Percent: "Percent",
    Seconds: "Seconds",
    Terabits: "Terabits",
    Terabits_Second: "Terabits/Second",
    Terabytes: "Terabytes",
    Terabytes_Second: "Terabytes/Second",
};
const AnomalyDetectorStateValue = {
    PENDING_TRAINING: "PENDING_TRAINING",
    TRAINED: "TRAINED",
    TRAINED_INSUFFICIENT_DATA: "TRAINED_INSUFFICIENT_DATA",
};
const AnomalyDetectorType = {
    METRIC_MATH: "METRIC_MATH",
    SINGLE_METRIC: "SINGLE_METRIC",
};
const ComparisonOperator = {
    GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold",
    GreaterThanThreshold: "GreaterThanThreshold",
    GreaterThanUpperThreshold: "GreaterThanUpperThreshold",
    LessThanLowerOrGreaterThanUpperThreshold: "LessThanLowerOrGreaterThanUpperThreshold",
    LessThanLowerThreshold: "LessThanLowerThreshold",
    LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold",
    LessThanThreshold: "LessThanThreshold",
};
const StateValue = {
    ALARM: "ALARM",
    INSUFFICIENT_DATA: "INSUFFICIENT_DATA",
    OK: "OK",
};
class ConcurrentModificationException extends CloudWatchServiceException {
    name = "ConcurrentModificationException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
class ConflictException extends CloudWatchServiceException {
    name = "ConflictException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
class DashboardInvalidInputError extends CloudWatchServiceException {
    name = "DashboardInvalidInputError";
    $fault = "client";
    dashboardValidationMessages;
    constructor(opts) {
        super({
            name: "DashboardInvalidInputError",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DashboardInvalidInputError.prototype);
        this.dashboardValidationMessages = opts.dashboardValidationMessages;
    }
}
class DashboardNotFoundError extends CloudWatchServiceException {
    name = "DashboardNotFoundError";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DashboardNotFoundError",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DashboardNotFoundError.prototype);
    }
}
class ResourceNotFound extends CloudWatchServiceException {
    name = "ResourceNotFound";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFound",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFound.prototype);
    }
}
class InternalServiceFault extends CloudWatchServiceException {
    name = "InternalServiceFault";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalServiceFault",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServiceFault.prototype);
        this.Message = opts.Message;
    }
}
class InvalidParameterCombinationException extends CloudWatchServiceException {
    name = "InvalidParameterCombinationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidParameterCombinationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterCombinationException.prototype);
    }
}
class InvalidParameterValueException extends CloudWatchServiceException {
    name = "InvalidParameterValueException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
    }
}
class MissingRequiredParameterException extends CloudWatchServiceException {
    name = "MissingRequiredParameterException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "MissingRequiredParameterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MissingRequiredParameterException.prototype);
    }
}
class ResourceNotFoundException extends CloudWatchServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    ResourceType;
    ResourceId;
    Message;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.ResourceType = opts.ResourceType;
        this.ResourceId = opts.ResourceId;
        this.Message = opts.Message;
    }
}
class InvalidNextToken extends CloudWatchServiceException {
    name = "InvalidNextToken";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidNextToken",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidNextToken.prototype);
    }
}
const ScanBy = {
    TIMESTAMP_ASCENDING: "TimestampAscending",
    TIMESTAMP_DESCENDING: "TimestampDescending",
};
const EvaluationState = {
    PARTIAL_DATA: "PARTIAL_DATA",
};
const Statistic = {
    Average: "Average",
    Maximum: "Maximum",
    Minimum: "Minimum",
    SampleCount: "SampleCount",
    Sum: "Sum",
};
class LimitExceededException extends CloudWatchServiceException {
    name = "LimitExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
const StatusCode = {
    COMPLETE: "Complete",
    FORBIDDEN: "Forbidden",
    INTERNAL_ERROR: "InternalError",
    PARTIAL_DATA: "PartialData",
};
const MetricStreamOutputFormat = {
    JSON: "json",
    OPEN_TELEMETRY_0_7: "opentelemetry0.7",
    OPEN_TELEMETRY_1_0: "opentelemetry1.0",
};
const RecentlyActive = {
    PT3H: "PT3H",
};
class LimitExceededFault extends CloudWatchServiceException {
    name = "LimitExceededFault";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededFault",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededFault.prototype);
    }
}
class InvalidFormatFault extends CloudWatchServiceException {
    name = "InvalidFormatFault";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidFormatFault",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidFormatFault.prototype);
    }
}

const se_DeleteAlarmsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteAlarmsInput(input),
        [_A]: _DA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAnomalyDetectorCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteAnomalyDetectorInput(input),
        [_A]: _DAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDashboardsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDashboardsInput(input),
        [_A]: _DD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteInsightRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteInsightRulesInput(input),
        [_A]: _DIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteMetricStreamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteMetricStreamInput(input),
        [_A]: _DMS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAlarmContributorsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAlarmContributorsInput(input),
        [_A]: _DAC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAlarmHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAlarmHistoryInput(input),
        [_A]: _DAH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAlarmsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAlarmsInput(input),
        [_A]: _DAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAlarmsForMetricCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAlarmsForMetricInput(input),
        [_A]: _DAFM,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAnomalyDetectorsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAnomalyDetectorsInput(input),
        [_A]: _DADe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInsightRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInsightRulesInput(input),
        [_A]: _DIRe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableAlarmActionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableAlarmActionsInput(input),
        [_A]: _DAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableInsightRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableInsightRulesInput(input),
        [_A]: _DIRi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableAlarmActionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableAlarmActionsInput(input),
        [_A]: _EAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableInsightRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableInsightRulesInput(input),
        [_A]: _EIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDashboardCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetDashboardInput(input),
        [_A]: _GD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetInsightRuleReportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetInsightRuleReportInput(input),
        [_A]: _GIRR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMetricDataCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetMetricDataInput(input),
        [_A]: _GMD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMetricStatisticsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetMetricStatisticsInput(input),
        [_A]: _GMS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMetricStreamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetMetricStreamInput(input),
        [_A]: _GMSe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMetricWidgetImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetMetricWidgetImageInput(input),
        [_A]: _GMWI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDashboardsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListDashboardsInput(input),
        [_A]: _LD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListManagedInsightRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListManagedInsightRulesInput(input),
        [_A]: _LMIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMetricsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListMetricsInput(input),
        [_A]: _LM,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMetricStreamsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListMetricStreamsInput(input),
        [_A]: _LMS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListTagsForResourceInput(input),
        [_A]: _LTFR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutAnomalyDetectorCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutAnomalyDetectorInput(input),
        [_A]: _PAD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutCompositeAlarmCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutCompositeAlarmInput(input),
        [_A]: _PCA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutDashboardCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutDashboardInput(input),
        [_A]: _PD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutInsightRuleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutInsightRuleInput(input),
        [_A]: _PIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutManagedInsightRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutManagedInsightRulesInput(input),
        [_A]: _PMIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutMetricAlarmCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutMetricAlarmInput(input),
        [_A]: _PMA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutMetricDataCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutMetricDataInput(input),
        [_A]: _PMD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutMetricStreamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PutMetricStreamInput(input),
        [_A]: _PMS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetAlarmStateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SetAlarmStateInput(input),
        [_A]: _SAS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartMetricStreamsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartMetricStreamsInput(input),
        [_A]: _SMS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopMetricStreamsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StopMetricStreamsInput(input),
        [_A]: _SMSt,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TagResourceInput(input),
        [_A]: _TR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UntagResourceInput(input),
        [_A]: _UR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_DeleteAlarmsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteAnomalyDetectorOutput(data.DeleteAnomalyDetectorResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteDashboardsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteDashboardsOutput(data.DeleteDashboardsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteInsightRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteInsightRulesOutput(data.DeleteInsightRulesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteMetricStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteMetricStreamOutput(data.DeleteMetricStreamResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAlarmContributorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAlarmContributorsOutput(data.DescribeAlarmContributorsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAlarmHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAlarmHistoryOutput(data.DescribeAlarmHistoryResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAlarmsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAlarmsOutput(data.DescribeAlarmsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAlarmsForMetricCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAlarmsForMetricOutput(data.DescribeAlarmsForMetricResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAnomalyDetectorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAnomalyDetectorsOutput(data.DescribeAnomalyDetectorsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInsightRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInsightRulesOutput(data.DescribeInsightRulesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableAlarmActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisableInsightRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableInsightRulesOutput(data.DisableInsightRulesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableAlarmActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_EnableInsightRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableInsightRulesOutput(data.EnableInsightRulesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDashboardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetDashboardOutput(data.GetDashboardResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetInsightRuleReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetInsightRuleReportOutput(data.GetInsightRuleReportResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetMetricDataOutput(data.GetMetricDataResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetMetricStatisticsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetMetricStatisticsOutput(data.GetMetricStatisticsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetMetricStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetMetricStreamOutput(data.GetMetricStreamResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetMetricWidgetImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetMetricWidgetImageOutput(data.GetMetricWidgetImageResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDashboardsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListDashboardsOutput(data.ListDashboardsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListManagedInsightRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListManagedInsightRulesOutput(data.ListManagedInsightRulesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMetricsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListMetricsOutput(data.ListMetricsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMetricStreamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListMetricStreamsOutput(data.ListMetricStreamsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListTagsForResourceOutput(data.ListTagsForResourceResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PutAnomalyDetectorOutput(data.PutAnomalyDetectorResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutCompositeAlarmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutDashboardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PutDashboardOutput(data.PutDashboardResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutInsightRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PutInsightRuleOutput(data.PutInsightRuleResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutManagedInsightRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PutManagedInsightRulesOutput(data.PutManagedInsightRulesResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutMetricAlarmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_PutMetricStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PutMetricStreamOutput(data.PutMetricStreamResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetAlarmStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StartMetricStreamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_StartMetricStreamsOutput(data.StartMetricStreamsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopMetricStreamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_StopMetricStreamsOutput(data.StopMetricStreamsResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_TagResourceOutput(data.TagResourceResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UntagResourceOutput(data.UntagResourceResult);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseXmlErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.cloudwatch#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput);
        case "InternalServiceError":
        case "com.amazonaws.cloudwatch#InternalServiceFault":
            throw await de_InternalServiceFaultRes(parsedOutput);
        case "InvalidParameterCombination":
        case "com.amazonaws.cloudwatch#InvalidParameterCombinationException":
            throw await de_InvalidParameterCombinationExceptionRes(parsedOutput);
        case "InvalidParameterValue":
        case "com.amazonaws.cloudwatch#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput);
        case "MissingParameter":
        case "com.amazonaws.cloudwatch#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.cloudwatch#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.cloudwatch#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "InvalidNextToken":
        case "com.amazonaws.cloudwatch#InvalidNextToken":
            throw await de_InvalidNextTokenRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.cloudwatch#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "LimitExceeded":
        case "com.amazonaws.cloudwatch#LimitExceededFault":
            throw await de_LimitExceededFaultRes(parsedOutput);
        case "InvalidParameterInput":
        case "com.amazonaws.cloudwatch#DashboardInvalidInputError":
            throw await de_DashboardInvalidInputErrorRes(parsedOutput);
        case "ConcurrentModificationException":
        case "com.amazonaws.cloudwatch#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput);
        case "InvalidFormat":
        case "com.amazonaws.cloudwatch#InvalidFormatFault":
            throw await de_InvalidFormatFaultRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ConcurrentModificationException(body.Error);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ConflictException(body.Error);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DashboardInvalidInputErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DashboardInvalidInputError(body.Error);
    const exception = new DashboardInvalidInputError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InternalServiceFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InternalServiceFault(body.Error);
    const exception = new InternalServiceFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidFormatFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidFormatFault(body.Error);
    const exception = new InvalidFormatFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidNextTokenRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidNextToken(body.Error);
    const exception = new InvalidNextToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidParameterCombinationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidParameterCombinationException(body.Error);
    const exception = new InvalidParameterCombinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidParameterValueException(body.Error);
    const exception = new InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_LimitExceededException(body.Error);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_LimitExceededFault(body.Error);
    const exception = new LimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_MissingRequiredParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MissingRequiredParameterException(body.Error);
    const exception = new MissingRequiredParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotFound(body.Error);
    const exception = new ResourceNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotFoundException(body.Error);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_AlarmNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AlarmTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AnomalyDetectorConfiguration = (input, context) => {
    const entries = {};
    if (input[_ETR] != null) {
        const memberEntries = se_AnomalyDetectorExcludedTimeRanges(input[_ETR]);
        if (input[_ETR]?.length === 0) {
            entries.ExcludedTimeRanges = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedTimeRanges.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MT] != null) {
        entries[_MT] = input[_MT];
    }
    return entries;
};
const se_AnomalyDetectorExcludedTimeRanges = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Range(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_AnomalyDetectorTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_Counts = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = smithyClient.serializeFloat(entry);
        counter++;
    }
    return entries;
};
const se_DashboardNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DeleteAlarmsInput = (input, context) => {
    const entries = {};
    if (input[_AN] != null) {
        const memberEntries = se_AlarmNames(input[_AN]);
        if (input[_AN]?.length === 0) {
            entries.AlarmNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AlarmNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteAnomalyDetectorInput = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_MN] != null) {
        entries[_MN] = input[_MN];
    }
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D]);
        if (input[_D]?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    if (input[_SMAD] != null) {
        const memberEntries = se_SingleMetricAnomalyDetector(input[_SMAD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SingleMetricAnomalyDetector.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MMAD] != null) {
        const memberEntries = se_MetricMathAnomalyDetector(input[_MMAD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricMathAnomalyDetector.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteDashboardsInput = (input, context) => {
    const entries = {};
    if (input[_DN] != null) {
        const memberEntries = se_DashboardNames(input[_DN]);
        if (input[_DN]?.length === 0) {
            entries.DashboardNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DashboardNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteInsightRulesInput = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        const memberEntries = se_InsightRuleNames(input[_RN]);
        if (input[_RN]?.length === 0) {
            entries.RuleNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RuleNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteMetricStreamInput = (input, context) => {
    const entries = {};
    if (input[_Na] != null) {
        entries[_Na] = input[_Na];
    }
    return entries;
};
const se_DescribeAlarmContributorsInput = (input, context) => {
    const entries = {};
    if (input[_ANl] != null) {
        entries[_ANl] = input[_ANl];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeAlarmHistoryInput = (input, context) => {
    const entries = {};
    if (input[_ANl] != null) {
        entries[_ANl] = input[_ANl];
    }
    if (input[_ACI] != null) {
        entries[_ACI] = input[_ACI];
    }
    if (input[_AT] != null) {
        const memberEntries = se_AlarmTypes(input[_AT]);
        if (input[_AT]?.length === 0) {
            entries.AlarmTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AlarmTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_HIT] != null) {
        entries[_HIT] = input[_HIT];
    }
    if (input[_SD] != null) {
        entries[_SD] = smithyClient.serializeDateTime(input[_SD]);
    }
    if (input[_ED] != null) {
        entries[_ED] = smithyClient.serializeDateTime(input[_ED]);
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_SB] != null) {
        entries[_SB] = input[_SB];
    }
    return entries;
};
const se_DescribeAlarmsForMetricInput = (input, context) => {
    const entries = {};
    if (input[_MN] != null) {
        entries[_MN] = input[_MN];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_St] != null) {
        entries[_St] = input[_St];
    }
    if (input[_ES] != null) {
        entries[_ES] = input[_ES];
    }
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D]);
        if (input[_D]?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_U] != null) {
        entries[_U] = input[_U];
    }
    return entries;
};
const se_DescribeAlarmsInput = (input, context) => {
    const entries = {};
    if (input[_AN] != null) {
        const memberEntries = se_AlarmNames(input[_AN]);
        if (input[_AN]?.length === 0) {
            entries.AlarmNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AlarmNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ANP] != null) {
        entries[_ANP] = input[_ANP];
    }
    if (input[_AT] != null) {
        const memberEntries = se_AlarmTypes(input[_AT]);
        if (input[_AT]?.length === 0) {
            entries.AlarmTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AlarmTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_COAN] != null) {
        entries[_COAN] = input[_COAN];
    }
    if (input[_POAN] != null) {
        entries[_POAN] = input[_POAN];
    }
    if (input[_SV] != null) {
        entries[_SV] = input[_SV];
    }
    if (input[_AP] != null) {
        entries[_AP] = input[_AP];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeAnomalyDetectorsInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MRa] != null) {
        entries[_MRa] = input[_MRa];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_MN] != null) {
        entries[_MN] = input[_MN];
    }
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D]);
        if (input[_D]?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ADT] != null) {
        const memberEntries = se_AnomalyDetectorTypes(input[_ADT]);
        if (input[_ADT]?.length === 0) {
            entries.AnomalyDetectorTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AnomalyDetectorTypes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeInsightRulesInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MRa] != null) {
        entries[_MRa] = input[_MRa];
    }
    return entries;
};
const se_Dimension = (input, context) => {
    const entries = {};
    if (input[_Na] != null) {
        entries[_Na] = input[_Na];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_DimensionFilter = (input, context) => {
    const entries = {};
    if (input[_Na] != null) {
        entries[_Na] = input[_Na];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_DimensionFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_DimensionFilter(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Dimensions = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Dimension(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_DisableAlarmActionsInput = (input, context) => {
    const entries = {};
    if (input[_AN] != null) {
        const memberEntries = se_AlarmNames(input[_AN]);
        if (input[_AN]?.length === 0) {
            entries.AlarmNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AlarmNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DisableInsightRulesInput = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        const memberEntries = se_InsightRuleNames(input[_RN]);
        if (input[_RN]?.length === 0) {
            entries.RuleNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RuleNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_EnableAlarmActionsInput = (input, context) => {
    const entries = {};
    if (input[_AN] != null) {
        const memberEntries = se_AlarmNames(input[_AN]);
        if (input[_AN]?.length === 0) {
            entries.AlarmNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AlarmNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_EnableInsightRulesInput = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        const memberEntries = se_InsightRuleNames(input[_RN]);
        if (input[_RN]?.length === 0) {
            entries.RuleNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RuleNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_Entity = (input, context) => {
    const entries = {};
    if (input[_KA] != null) {
        const memberEntries = se_EntityKeyAttributesMap(input[_KA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `KeyAttributes.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_At] != null) {
        const memberEntries = se_EntityAttributesMap(input[_At]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Attributes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_EntityAttributesMap = (input, context) => {
    const entries = {};
    let counter = 1;
    Object.keys(input)
        .filter((key) => input[key] != null)
        .forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
    });
    return entries;
};
const se_EntityKeyAttributesMap = (input, context) => {
    const entries = {};
    let counter = 1;
    Object.keys(input)
        .filter((key) => input[key] != null)
        .forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
    });
    return entries;
};
const se_EntityMetricData = (input, context) => {
    const entries = {};
    if (input[_E] != null) {
        const memberEntries = se_Entity(input[_E]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Entity.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MD] != null) {
        const memberEntries = se_MetricData(input[_MD]);
        if (input[_MD]?.length === 0) {
            entries.MetricData = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricData.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_EntityMetricDataList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_EntityMetricData(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ExtendedStatistics = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_GetDashboardInput = (input, context) => {
    const entries = {};
    if (input[_DNa] != null) {
        entries[_DNa] = input[_DNa];
    }
    return entries;
};
const se_GetInsightRuleReportInput = (input, context) => {
    const entries = {};
    if (input[_RNu] != null) {
        entries[_RNu] = input[_RNu];
    }
    if (input[_ST] != null) {
        entries[_ST] = smithyClient.serializeDateTime(input[_ST]);
    }
    if (input[_ET] != null) {
        entries[_ET] = smithyClient.serializeDateTime(input[_ET]);
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_MCC] != null) {
        entries[_MCC] = input[_MCC];
    }
    if (input[_M] != null) {
        const memberEntries = se_InsightRuleMetricList(input[_M]);
        if (input[_M]?.length === 0) {
            entries.Metrics = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Metrics.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OB] != null) {
        entries[_OB] = input[_OB];
    }
    return entries;
};
const se_GetMetricDataInput = (input, context) => {
    const entries = {};
    if (input[_MDQ] != null) {
        const memberEntries = se_MetricDataQueries(input[_MDQ]);
        if (input[_MDQ]?.length === 0) {
            entries.MetricDataQueries = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricDataQueries.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ST] != null) {
        entries[_ST] = smithyClient.serializeDateTime(input[_ST]);
    }
    if (input[_ET] != null) {
        entries[_ET] = smithyClient.serializeDateTime(input[_ET]);
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_SB] != null) {
        entries[_SB] = input[_SB];
    }
    if (input[_MDa] != null) {
        entries[_MDa] = input[_MDa];
    }
    if (input[_LO] != null) {
        const memberEntries = se_LabelOptions(input[_LO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LabelOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetMetricStatisticsInput = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_MN] != null) {
        entries[_MN] = input[_MN];
    }
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D]);
        if (input[_D]?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ST] != null) {
        entries[_ST] = smithyClient.serializeDateTime(input[_ST]);
    }
    if (input[_ET] != null) {
        entries[_ET] = smithyClient.serializeDateTime(input[_ET]);
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_Sta] != null) {
        const memberEntries = se_Statistics(input[_Sta]);
        if (input[_Sta]?.length === 0) {
            entries.Statistics = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Statistics.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ESx] != null) {
        const memberEntries = se_ExtendedStatistics(input[_ESx]);
        if (input[_ESx]?.length === 0) {
            entries.ExtendedStatistics = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExtendedStatistics.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_U] != null) {
        entries[_U] = input[_U];
    }
    return entries;
};
const se_GetMetricStreamInput = (input, context) => {
    const entries = {};
    if (input[_Na] != null) {
        entries[_Na] = input[_Na];
    }
    return entries;
};
const se_GetMetricWidgetImageInput = (input, context) => {
    const entries = {};
    if (input[_MW] != null) {
        entries[_MW] = input[_MW];
    }
    if (input[_OF] != null) {
        entries[_OF] = input[_OF];
    }
    return entries;
};
const se_InsightRuleMetricList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InsightRuleNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LabelOptions = (input, context) => {
    const entries = {};
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    return entries;
};
const se_ListDashboardsInput = (input, context) => {
    const entries = {};
    if (input[_DNP] != null) {
        entries[_DNP] = input[_DNP];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListManagedInsightRulesInput = (input, context) => {
    const entries = {};
    if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MRa] != null) {
        entries[_MRa] = input[_MRa];
    }
    return entries;
};
const se_ListMetricsInput = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_MN] != null) {
        entries[_MN] = input[_MN];
    }
    if (input[_D] != null) {
        const memberEntries = se_DimensionFilters(input[_D]);
        if (input[_D]?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_RA] != null) {
        entries[_RA] = input[_RA];
    }
    if (input[_ILA] != null) {
        entries[_ILA] = input[_ILA];
    }
    if (input[_OA] != null) {
        entries[_OA] = input[_OA];
    }
    return entries;
};
const se_ListMetricStreamsInput = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MRa] != null) {
        entries[_MRa] = input[_MRa];
    }
    return entries;
};
const se_ListTagsForResourceInput = (input, context) => {
    const entries = {};
    if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
    }
    return entries;
};
const se_ManagedRule = (input, context) => {
    const entries = {};
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ManagedRules = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ManagedRule(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Metric = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_MN] != null) {
        entries[_MN] = input[_MN];
    }
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D]);
        if (input[_D]?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_MetricCharacteristics = (input, context) => {
    const entries = {};
    if (input[_PS] != null) {
        entries[_PS] = input[_PS];
    }
    return entries;
};
const se_MetricData = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_MetricDatum(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_MetricDataQueries = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_MetricDataQuery(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_MetricDataQuery = (input, context) => {
    const entries = {};
    if (input[_I] != null) {
        entries[_I] = input[_I];
    }
    if (input[_MS] != null) {
        const memberEntries = se_MetricStat(input[_MS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricStat.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ex] != null) {
        entries[_Ex] = input[_Ex];
    }
    if (input[_L] != null) {
        entries[_L] = input[_L];
    }
    if (input[_RD] != null) {
        entries[_RD] = input[_RD];
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_AI] != null) {
        entries[_AI] = input[_AI];
    }
    return entries;
};
const se_MetricDatum = (input, context) => {
    const entries = {};
    if (input[_MN] != null) {
        entries[_MN] = input[_MN];
    }
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D]);
        if (input[_D]?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ti] != null) {
        entries[_Ti] = smithyClient.serializeDateTime(input[_Ti]);
    }
    if (input[_Va] != null) {
        entries[_Va] = smithyClient.serializeFloat(input[_Va]);
    }
    if (input[_SVt] != null) {
        const memberEntries = se_StatisticSet(input[_SVt]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StatisticValues.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Val] != null) {
        const memberEntries = se_Values(input[_Val]);
        if (input[_Val]?.length === 0) {
            entries.Values = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_C] != null) {
        const memberEntries = se_Counts(input[_C]);
        if (input[_C]?.length === 0) {
            entries.Counts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Counts.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_U] != null) {
        entries[_U] = input[_U];
    }
    if (input[_SR] != null) {
        entries[_SR] = input[_SR];
    }
    return entries;
};
const se_MetricMathAnomalyDetector = (input, context) => {
    const entries = {};
    if (input[_MDQ] != null) {
        const memberEntries = se_MetricDataQueries(input[_MDQ]);
        if (input[_MDQ]?.length === 0) {
            entries.MetricDataQueries = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricDataQueries.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_MetricStat = (input, context) => {
    const entries = {};
    if (input[_Me] != null) {
        const memberEntries = se_Metric(input[_Me]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Metric.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    if (input[_U] != null) {
        entries[_U] = input[_U];
    }
    return entries;
};
const se_MetricStreamFilter = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_MNe] != null) {
        const memberEntries = se_MetricStreamFilterMetricNames(input[_MNe]);
        if (input[_MNe]?.length === 0) {
            entries.MetricNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_MetricStreamFilterMetricNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_MetricStreamFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_MetricStreamFilter(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_MetricStreamNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_MetricStreamStatisticsAdditionalStatistics = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_MetricStreamStatisticsConfiguration = (input, context) => {
    const entries = {};
    if (input[_IM] != null) {
        const memberEntries = se_MetricStreamStatisticsIncludeMetrics(input[_IM]);
        if (input[_IM]?.length === 0) {
            entries.IncludeMetrics = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IncludeMetrics.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AS] != null) {
        const memberEntries = se_MetricStreamStatisticsAdditionalStatistics(input[_AS]);
        if (input[_AS]?.length === 0) {
            entries.AdditionalStatistics = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AdditionalStatistics.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_MetricStreamStatisticsConfigurations = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_MetricStreamStatisticsConfiguration(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_MetricStreamStatisticsIncludeMetrics = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_MetricStreamStatisticsMetric(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_MetricStreamStatisticsMetric = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_MN] != null) {
        entries[_MN] = input[_MN];
    }
    return entries;
};
const se_PutAnomalyDetectorInput = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_MN] != null) {
        entries[_MN] = input[_MN];
    }
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D]);
        if (input[_D]?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    if (input[_Co] != null) {
        const memberEntries = se_AnomalyDetectorConfiguration(input[_Co]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Configuration.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MC] != null) {
        const memberEntries = se_MetricCharacteristics(input[_MC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricCharacteristics.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SMAD] != null) {
        const memberEntries = se_SingleMetricAnomalyDetector(input[_SMAD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SingleMetricAnomalyDetector.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MMAD] != null) {
        const memberEntries = se_MetricMathAnomalyDetector(input[_MMAD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricMathAnomalyDetector.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PutCompositeAlarmInput = (input, context) => {
    const entries = {};
    if (input[_AE] != null) {
        entries[_AE] = input[_AE];
    }
    if (input[_AA] != null) {
        const memberEntries = se_ResourceList(input[_AA]);
        if (input[_AA]?.length === 0) {
            entries.AlarmActions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AlarmActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AD] != null) {
        entries[_AD] = input[_AD];
    }
    if (input[_ANl] != null) {
        entries[_ANl] = input[_ANl];
    }
    if (input[_AR] != null) {
        entries[_AR] = input[_AR];
    }
    if (input[_IDA] != null) {
        const memberEntries = se_ResourceList(input[_IDA]);
        if (input[_IDA]?.length === 0) {
            entries.InsufficientDataActions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InsufficientDataActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OKA] != null) {
        const memberEntries = se_ResourceList(input[_OKA]);
        if (input[_OKA]?.length === 0) {
            entries.OKActions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OKActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ASc] != null) {
        entries[_ASc] = input[_ASc];
    }
    if (input[_ASWP] != null) {
        entries[_ASWP] = input[_ASWP];
    }
    if (input[_ASEP] != null) {
        entries[_ASEP] = input[_ASEP];
    }
    return entries;
};
const se_PutDashboardInput = (input, context) => {
    const entries = {};
    if (input[_DNa] != null) {
        entries[_DNa] = input[_DNa];
    }
    if (input[_DB] != null) {
        entries[_DB] = input[_DB];
    }
    return entries;
};
const se_PutInsightRuleInput = (input, context) => {
    const entries = {};
    if (input[_RNu] != null) {
        entries[_RNu] = input[_RNu];
    }
    if (input[_RS] != null) {
        entries[_RS] = input[_RS];
    }
    if (input[_RDu] != null) {
        entries[_RDu] = input[_RDu];
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AOTL] != null) {
        entries[_AOTL] = input[_AOTL];
    }
    return entries;
};
const se_PutManagedInsightRulesInput = (input, context) => {
    const entries = {};
    if (input[_MRan] != null) {
        const memberEntries = se_ManagedRules(input[_MRan]);
        if (input[_MRan]?.length === 0) {
            entries.ManagedRules = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ManagedRules.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PutMetricAlarmInput = (input, context) => {
    const entries = {};
    if (input[_ANl] != null) {
        entries[_ANl] = input[_ANl];
    }
    if (input[_AD] != null) {
        entries[_AD] = input[_AD];
    }
    if (input[_AE] != null) {
        entries[_AE] = input[_AE];
    }
    if (input[_OKA] != null) {
        const memberEntries = se_ResourceList(input[_OKA]);
        if (input[_OKA]?.length === 0) {
            entries.OKActions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OKActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AA] != null) {
        const memberEntries = se_ResourceList(input[_AA]);
        if (input[_AA]?.length === 0) {
            entries.AlarmActions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AlarmActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IDA] != null) {
        const memberEntries = se_ResourceList(input[_IDA]);
        if (input[_IDA]?.length === 0) {
            entries.InsufficientDataActions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InsufficientDataActions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MN] != null) {
        entries[_MN] = input[_MN];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_St] != null) {
        entries[_St] = input[_St];
    }
    if (input[_ES] != null) {
        entries[_ES] = input[_ES];
    }
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D]);
        if (input[_D]?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_U] != null) {
        entries[_U] = input[_U];
    }
    if (input[_EP] != null) {
        entries[_EP] = input[_EP];
    }
    if (input[_DTA] != null) {
        entries[_DTA] = input[_DTA];
    }
    if (input[_Th] != null) {
        entries[_Th] = smithyClient.serializeFloat(input[_Th]);
    }
    if (input[_CO] != null) {
        entries[_CO] = input[_CO];
    }
    if (input[_TMD] != null) {
        entries[_TMD] = input[_TMD];
    }
    if (input[_ELSCP] != null) {
        entries[_ELSCP] = input[_ELSCP];
    }
    if (input[_M] != null) {
        const memberEntries = se_MetricDataQueries(input[_M]);
        if (input[_M]?.length === 0) {
            entries.Metrics = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Metrics.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TMI] != null) {
        entries[_TMI] = input[_TMI];
    }
    return entries;
};
const se_PutMetricDataInput = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_MD] != null) {
        const memberEntries = se_MetricData(input[_MD]);
        if (input[_MD]?.length === 0) {
            entries.MetricData = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetricData.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EMD] != null) {
        const memberEntries = se_EntityMetricDataList(input[_EMD]);
        if (input[_EMD]?.length === 0) {
            entries.EntityMetricData = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EntityMetricData.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SEV] != null) {
        entries[_SEV] = input[_SEV];
    }
    return entries;
};
const se_PutMetricStreamInput = (input, context) => {
    const entries = {};
    if (input[_Na] != null) {
        entries[_Na] = input[_Na];
    }
    if (input[_IF] != null) {
        const memberEntries = se_MetricStreamFilters(input[_IF]);
        if (input[_IF]?.length === 0) {
            entries.IncludeFilters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IncludeFilters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EF] != null) {
        const memberEntries = se_MetricStreamFilters(input[_EF]);
        if (input[_EF]?.length === 0) {
            entries.ExcludeFilters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludeFilters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_FA] != null) {
        entries[_FA] = input[_FA];
    }
    if (input[_RAo] != null) {
        entries[_RAo] = input[_RAo];
    }
    if (input[_OF] != null) {
        entries[_OF] = input[_OF];
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SC] != null) {
        const memberEntries = se_MetricStreamStatisticsConfigurations(input[_SC]);
        if (input[_SC]?.length === 0) {
            entries.StatisticsConfigurations = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StatisticsConfigurations.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ILAM] != null) {
        entries[_ILAM] = input[_ILAM];
    }
    return entries;
};
const se_Range = (input, context) => {
    const entries = {};
    if (input[_ST] != null) {
        entries[_ST] = smithyClient.serializeDateTime(input[_ST]);
    }
    if (input[_ET] != null) {
        entries[_ET] = smithyClient.serializeDateTime(input[_ET]);
    }
    return entries;
};
const se_ResourceList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SetAlarmStateInput = (input, context) => {
    const entries = {};
    if (input[_ANl] != null) {
        entries[_ANl] = input[_ANl];
    }
    if (input[_SV] != null) {
        entries[_SV] = input[_SV];
    }
    if (input[_SRt] != null) {
        entries[_SRt] = input[_SRt];
    }
    if (input[_SRD] != null) {
        entries[_SRD] = input[_SRD];
    }
    return entries;
};
const se_SingleMetricAnomalyDetector = (input, context) => {
    const entries = {};
    if (input[_AI] != null) {
        entries[_AI] = input[_AI];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_MN] != null) {
        entries[_MN] = input[_MN];
    }
    if (input[_D] != null) {
        const memberEntries = se_Dimensions(input[_D]);
        if (input[_D]?.length === 0) {
            entries.Dimensions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Dimensions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    return entries;
};
const se_StartMetricStreamsInput = (input, context) => {
    const entries = {};
    if (input[_Nam] != null) {
        const memberEntries = se_MetricStreamNames(input[_Nam]);
        if (input[_Nam]?.length === 0) {
            entries.Names = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Names.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_Statistics = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_StatisticSet = (input, context) => {
    const entries = {};
    if (input[_SCa] != null) {
        entries[_SCa] = smithyClient.serializeFloat(input[_SCa]);
    }
    if (input[_Su] != null) {
        entries[_Su] = smithyClient.serializeFloat(input[_Su]);
    }
    if (input[_Mi] != null) {
        entries[_Mi] = smithyClient.serializeFloat(input[_Mi]);
    }
    if (input[_Ma] != null) {
        entries[_Ma] = smithyClient.serializeFloat(input[_Ma]);
    }
    return entries;
};
const se_StopMetricStreamsInput = (input, context) => {
    const entries = {};
    if (input[_Nam] != null) {
        const memberEntries = se_MetricStreamNames(input[_Nam]);
        if (input[_Nam]?.length === 0) {
            entries.Names = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Names.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_Tag = (input, context) => {
    const entries = {};
    if (input[_K] != null) {
        entries[_K] = input[_K];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_TagKeyList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TagResourceInput = (input, context) => {
    const entries = {};
    if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        if (input[_Ta]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UntagResourceInput = (input, context) => {
    const entries = {};
    if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
    }
    if (input[_TK] != null) {
        const memberEntries = se_TagKeyList(input[_TK]);
        if (input[_TK]?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_Values = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = smithyClient.serializeFloat(entry);
        counter++;
    }
    return entries;
};
const de_AlarmContributor = (output, context) => {
    const contents = {};
    if (output[_CI] != null) {
        contents[_CI] = smithyClient.expectString(output[_CI]);
    }
    if (String(output.ContributorAttributes).trim() === "") {
        contents[_CA] = {};
    }
    else if (output[_CA] != null && output[_CA][_e] != null) {
        contents[_CA] = de_ContributorAttributes(smithyClient.getArrayIfSingleItem(output[_CA][_e]));
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_STT] != null) {
        contents[_STT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_STT]));
    }
    return contents;
};
const de_AlarmContributors = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AlarmContributor(entry);
    });
};
const de_AlarmHistoryItem = (output, context) => {
    const contents = {};
    if (output[_ANl] != null) {
        contents[_ANl] = smithyClient.expectString(output[_ANl]);
    }
    if (output[_ACI] != null) {
        contents[_ACI] = smithyClient.expectString(output[_ACI]);
    }
    if (output[_ATl] != null) {
        contents[_ATl] = smithyClient.expectString(output[_ATl]);
    }
    if (output[_Ti] != null) {
        contents[_Ti] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_Ti]));
    }
    if (output[_HIT] != null) {
        contents[_HIT] = smithyClient.expectString(output[_HIT]);
    }
    if (output[_HS] != null) {
        contents[_HS] = smithyClient.expectString(output[_HS]);
    }
    if (output[_HD] != null) {
        contents[_HD] = smithyClient.expectString(output[_HD]);
    }
    if (String(output.AlarmContributorAttributes).trim() === "") {
        contents[_ACA] = {};
    }
    else if (output[_ACA] != null && output[_ACA][_e] != null) {
        contents[_ACA] = de_ContributorAttributes(smithyClient.getArrayIfSingleItem(output[_ACA][_e]));
    }
    return contents;
};
const de_AlarmHistoryItems = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AlarmHistoryItem(entry);
    });
};
const de_AnomalyDetector = (output, context) => {
    const contents = {};
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_MN] != null) {
        contents[_MN] = smithyClient.expectString(output[_MN]);
    }
    if (String(output.Dimensions).trim() === "") {
        contents[_D] = [];
    }
    else if (output[_D] != null && output[_D][_m] != null) {
        contents[_D] = de_Dimensions(smithyClient.getArrayIfSingleItem(output[_D][_m]));
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_Co] != null) {
        contents[_Co] = de_AnomalyDetectorConfiguration(output[_Co]);
    }
    if (output[_SV] != null) {
        contents[_SV] = smithyClient.expectString(output[_SV]);
    }
    if (output[_MC] != null) {
        contents[_MC] = de_MetricCharacteristics(output[_MC]);
    }
    if (output[_SMAD] != null) {
        contents[_SMAD] = de_SingleMetricAnomalyDetector(output[_SMAD]);
    }
    if (output[_MMAD] != null) {
        contents[_MMAD] = de_MetricMathAnomalyDetector(output[_MMAD]);
    }
    return contents;
};
const de_AnomalyDetectorConfiguration = (output, context) => {
    const contents = {};
    if (String(output.ExcludedTimeRanges).trim() === "") {
        contents[_ETR] = [];
    }
    else if (output[_ETR] != null && output[_ETR][_m] != null) {
        contents[_ETR] = de_AnomalyDetectorExcludedTimeRanges(smithyClient.getArrayIfSingleItem(output[_ETR][_m]));
    }
    if (output[_MT] != null) {
        contents[_MT] = smithyClient.expectString(output[_MT]);
    }
    return contents;
};
const de_AnomalyDetectorExcludedTimeRanges = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Range(entry);
    });
};
const de_AnomalyDetectors = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnomalyDetector(entry);
    });
};
const de_BatchFailures = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PartialFailure(entry);
    });
};
const de_CompositeAlarm = (output, context) => {
    const contents = {};
    if (output[_AE] != null) {
        contents[_AE] = smithyClient.parseBoolean(output[_AE]);
    }
    if (String(output.AlarmActions).trim() === "") {
        contents[_AA] = [];
    }
    else if (output[_AA] != null && output[_AA][_m] != null) {
        contents[_AA] = de_ResourceList(smithyClient.getArrayIfSingleItem(output[_AA][_m]));
    }
    if (output[_AAl] != null) {
        contents[_AAl] = smithyClient.expectString(output[_AAl]);
    }
    if (output[_ACUT] != null) {
        contents[_ACUT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ACUT]));
    }
    if (output[_AD] != null) {
        contents[_AD] = smithyClient.expectString(output[_AD]);
    }
    if (output[_ANl] != null) {
        contents[_ANl] = smithyClient.expectString(output[_ANl]);
    }
    if (output[_AR] != null) {
        contents[_AR] = smithyClient.expectString(output[_AR]);
    }
    if (String(output.InsufficientDataActions).trim() === "") {
        contents[_IDA] = [];
    }
    else if (output[_IDA] != null && output[_IDA][_m] != null) {
        contents[_IDA] = de_ResourceList(smithyClient.getArrayIfSingleItem(output[_IDA][_m]));
    }
    if (String(output.OKActions).trim() === "") {
        contents[_OKA] = [];
    }
    else if (output[_OKA] != null && output[_OKA][_m] != null) {
        contents[_OKA] = de_ResourceList(smithyClient.getArrayIfSingleItem(output[_OKA][_m]));
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_SRD] != null) {
        contents[_SRD] = smithyClient.expectString(output[_SRD]);
    }
    if (output[_SUT] != null) {
        contents[_SUT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_SUT]));
    }
    if (output[_SV] != null) {
        contents[_SV] = smithyClient.expectString(output[_SV]);
    }
    if (output[_STT] != null) {
        contents[_STT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_STT]));
    }
    if (output[_ASB] != null) {
        contents[_ASB] = smithyClient.expectString(output[_ASB]);
    }
    if (output[_ASR] != null) {
        contents[_ASR] = smithyClient.expectString(output[_ASR]);
    }
    if (output[_ASc] != null) {
        contents[_ASc] = smithyClient.expectString(output[_ASc]);
    }
    if (output[_ASWP] != null) {
        contents[_ASWP] = smithyClient.strictParseInt32(output[_ASWP]);
    }
    if (output[_ASEP] != null) {
        contents[_ASEP] = smithyClient.strictParseInt32(output[_ASEP]);
    }
    return contents;
};
const de_CompositeAlarms = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CompositeAlarm(entry);
    });
};
const de_ConcurrentModificationException = (output, context) => {
    const contents = {};
    if (output[_Mes] != null) {
        contents[_Mes] = smithyClient.expectString(output[_Mes]);
    }
    return contents;
};
const de_ConflictException = (output, context) => {
    const contents = {};
    if (output[_Mes] != null) {
        contents[_Mes] = smithyClient.expectString(output[_Mes]);
    }
    return contents;
};
const de_ContributorAttributes = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        acc[pair["key"]] = smithyClient.expectString(pair["value"]);
        return acc;
    }, {});
};
const de_DashboardEntries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DashboardEntry(entry);
    });
};
const de_DashboardEntry = (output, context) => {
    const contents = {};
    if (output[_DNa] != null) {
        contents[_DNa] = smithyClient.expectString(output[_DNa]);
    }
    if (output[_DAa] != null) {
        contents[_DAa] = smithyClient.expectString(output[_DAa]);
    }
    if (output[_LMa] != null) {
        contents[_LMa] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LMa]));
    }
    if (output[_Si] != null) {
        contents[_Si] = smithyClient.strictParseLong(output[_Si]);
    }
    return contents;
};
const de_DashboardInvalidInputError = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = smithyClient.expectString(output[_me]);
    }
    if (String(output.dashboardValidationMessages).trim() === "") {
        contents[_dVM] = [];
    }
    else if (output[_dVM] != null && output[_dVM][_m] != null) {
        contents[_dVM] = de_DashboardValidationMessages(smithyClient.getArrayIfSingleItem(output[_dVM][_m]));
    }
    return contents;
};
const de_DashboardValidationMessage = (output, context) => {
    const contents = {};
    if (output[_DP] != null) {
        contents[_DP] = smithyClient.expectString(output[_DP]);
    }
    if (output[_Mes] != null) {
        contents[_Mes] = smithyClient.expectString(output[_Mes]);
    }
    return contents;
};
const de_DashboardValidationMessages = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DashboardValidationMessage(entry);
    });
};
const de_Datapoint = (output, context) => {
    const contents = {};
    if (output[_Ti] != null) {
        contents[_Ti] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_Ti]));
    }
    if (output[_SCa] != null) {
        contents[_SCa] = smithyClient.strictParseFloat(output[_SCa]);
    }
    if (output[_Av] != null) {
        contents[_Av] = smithyClient.strictParseFloat(output[_Av]);
    }
    if (output[_Su] != null) {
        contents[_Su] = smithyClient.strictParseFloat(output[_Su]);
    }
    if (output[_Mi] != null) {
        contents[_Mi] = smithyClient.strictParseFloat(output[_Mi]);
    }
    if (output[_Ma] != null) {
        contents[_Ma] = smithyClient.strictParseFloat(output[_Ma]);
    }
    if (output[_U] != null) {
        contents[_U] = smithyClient.expectString(output[_U]);
    }
    if (String(output.ExtendedStatistics).trim() === "") {
        contents[_ESx] = {};
    }
    else if (output[_ESx] != null && output[_ESx][_e] != null) {
        contents[_ESx] = de_DatapointValueMap(smithyClient.getArrayIfSingleItem(output[_ESx][_e]));
    }
    return contents;
};
const de_Datapoints = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Datapoint(entry);
    });
};
const de_DatapointValueMap = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        acc[pair["key"]] = smithyClient.strictParseFloat(pair["value"]);
        return acc;
    }, {});
};
const de_DatapointValues = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.strictParseFloat(entry);
    });
};
const de_DeleteAnomalyDetectorOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_DeleteDashboardsOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_DeleteInsightRulesOutput = (output, context) => {
    const contents = {};
    if (String(output.Failures).trim() === "") {
        contents[_F] = [];
    }
    else if (output[_F] != null && output[_F][_m] != null) {
        contents[_F] = de_BatchFailures(smithyClient.getArrayIfSingleItem(output[_F][_m]));
    }
    return contents;
};
const de_DeleteMetricStreamOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_DescribeAlarmContributorsOutput = (output, context) => {
    const contents = {};
    if (String(output.AlarmContributors).trim() === "") {
        contents[_AC] = [];
    }
    else if (output[_AC] != null && output[_AC][_m] != null) {
        contents[_AC] = de_AlarmContributors(smithyClient.getArrayIfSingleItem(output[_AC][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_DescribeAlarmHistoryOutput = (output, context) => {
    const contents = {};
    if (String(output.AlarmHistoryItems).trim() === "") {
        contents[_AHI] = [];
    }
    else if (output[_AHI] != null && output[_AHI][_m] != null) {
        contents[_AHI] = de_AlarmHistoryItems(smithyClient.getArrayIfSingleItem(output[_AHI][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_DescribeAlarmsForMetricOutput = (output, context) => {
    const contents = {};
    if (String(output.MetricAlarms).trim() === "") {
        contents[_MA] = [];
    }
    else if (output[_MA] != null && output[_MA][_m] != null) {
        contents[_MA] = de_MetricAlarms(smithyClient.getArrayIfSingleItem(output[_MA][_m]));
    }
    return contents;
};
const de_DescribeAlarmsOutput = (output, context) => {
    const contents = {};
    if (String(output.CompositeAlarms).trim() === "") {
        contents[_CAo] = [];
    }
    else if (output[_CAo] != null && output[_CAo][_m] != null) {
        contents[_CAo] = de_CompositeAlarms(smithyClient.getArrayIfSingleItem(output[_CAo][_m]));
    }
    if (String(output.MetricAlarms).trim() === "") {
        contents[_MA] = [];
    }
    else if (output[_MA] != null && output[_MA][_m] != null) {
        contents[_MA] = de_MetricAlarms(smithyClient.getArrayIfSingleItem(output[_MA][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_DescribeAnomalyDetectorsOutput = (output, context) => {
    const contents = {};
    if (String(output.AnomalyDetectors).trim() === "") {
        contents[_ADn] = [];
    }
    else if (output[_ADn] != null && output[_ADn][_m] != null) {
        contents[_ADn] = de_AnomalyDetectors(smithyClient.getArrayIfSingleItem(output[_ADn][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_DescribeInsightRulesOutput = (output, context) => {
    const contents = {};
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    if (String(output.InsightRules).trim() === "") {
        contents[_IR] = [];
    }
    else if (output[_IR] != null && output[_IR][_m] != null) {
        contents[_IR] = de_InsightRules(smithyClient.getArrayIfSingleItem(output[_IR][_m]));
    }
    return contents;
};
const de_Dimension = (output, context) => {
    const contents = {};
    if (output[_Na] != null) {
        contents[_Na] = smithyClient.expectString(output[_Na]);
    }
    if (output[_Va] != null) {
        contents[_Va] = smithyClient.expectString(output[_Va]);
    }
    return contents;
};
const de_Dimensions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Dimension(entry);
    });
};
const de_DisableInsightRulesOutput = (output, context) => {
    const contents = {};
    if (String(output.Failures).trim() === "") {
        contents[_F] = [];
    }
    else if (output[_F] != null && output[_F][_m] != null) {
        contents[_F] = de_BatchFailures(smithyClient.getArrayIfSingleItem(output[_F][_m]));
    }
    return contents;
};
const de_EnableInsightRulesOutput = (output, context) => {
    const contents = {};
    if (String(output.Failures).trim() === "") {
        contents[_F] = [];
    }
    else if (output[_F] != null && output[_F][_m] != null) {
        contents[_F] = de_BatchFailures(smithyClient.getArrayIfSingleItem(output[_F][_m]));
    }
    return contents;
};
const de_GetDashboardOutput = (output, context) => {
    const contents = {};
    if (output[_DAa] != null) {
        contents[_DAa] = smithyClient.expectString(output[_DAa]);
    }
    if (output[_DB] != null) {
        contents[_DB] = smithyClient.expectString(output[_DB]);
    }
    if (output[_DNa] != null) {
        contents[_DNa] = smithyClient.expectString(output[_DNa]);
    }
    return contents;
};
const de_GetInsightRuleReportOutput = (output, context) => {
    const contents = {};
    if (String(output.KeyLabels).trim() === "") {
        contents[_KL] = [];
    }
    else if (output[_KL] != null && output[_KL][_m] != null) {
        contents[_KL] = de_InsightRuleContributorKeyLabels(smithyClient.getArrayIfSingleItem(output[_KL][_m]));
    }
    if (output[_ASg] != null) {
        contents[_ASg] = smithyClient.expectString(output[_ASg]);
    }
    if (output[_AV] != null) {
        contents[_AV] = smithyClient.strictParseFloat(output[_AV]);
    }
    if (output[_AUC] != null) {
        contents[_AUC] = smithyClient.strictParseLong(output[_AUC]);
    }
    if (String(output.Contributors).trim() === "") {
        contents[_Con] = [];
    }
    else if (output[_Con] != null && output[_Con][_m] != null) {
        contents[_Con] = de_InsightRuleContributors(smithyClient.getArrayIfSingleItem(output[_Con][_m]));
    }
    if (String(output.MetricDatapoints).trim() === "") {
        contents[_MDe] = [];
    }
    else if (output[_MDe] != null && output[_MDe][_m] != null) {
        contents[_MDe] = de_InsightRuleMetricDatapoints(smithyClient.getArrayIfSingleItem(output[_MDe][_m]));
    }
    return contents;
};
const de_GetMetricDataOutput = (output, context) => {
    const contents = {};
    if (String(output.MetricDataResults).trim() === "") {
        contents[_MDR] = [];
    }
    else if (output[_MDR] != null && output[_MDR][_m] != null) {
        contents[_MDR] = de_MetricDataResults(smithyClient.getArrayIfSingleItem(output[_MDR][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    if (String(output.Messages).trim() === "") {
        contents[_Mess] = [];
    }
    else if (output[_Mess] != null && output[_Mess][_m] != null) {
        contents[_Mess] = de_MetricDataResultMessages(smithyClient.getArrayIfSingleItem(output[_Mess][_m]));
    }
    return contents;
};
const de_GetMetricStatisticsOutput = (output, context) => {
    const contents = {};
    if (output[_L] != null) {
        contents[_L] = smithyClient.expectString(output[_L]);
    }
    if (String(output.Datapoints).trim() === "") {
        contents[_Da] = [];
    }
    else if (output[_Da] != null && output[_Da][_m] != null) {
        contents[_Da] = de_Datapoints(smithyClient.getArrayIfSingleItem(output[_Da][_m]));
    }
    return contents;
};
const de_GetMetricStreamOutput = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_Na] != null) {
        contents[_Na] = smithyClient.expectString(output[_Na]);
    }
    if (String(output.IncludeFilters).trim() === "") {
        contents[_IF] = [];
    }
    else if (output[_IF] != null && output[_IF][_m] != null) {
        contents[_IF] = de_MetricStreamFilters(smithyClient.getArrayIfSingleItem(output[_IF][_m]));
    }
    if (String(output.ExcludeFilters).trim() === "") {
        contents[_EF] = [];
    }
    else if (output[_EF] != null && output[_EF][_m] != null) {
        contents[_EF] = de_MetricStreamFilters(smithyClient.getArrayIfSingleItem(output[_EF][_m]));
    }
    if (output[_FA] != null) {
        contents[_FA] = smithyClient.expectString(output[_FA]);
    }
    if (output[_RAo] != null) {
        contents[_RAo] = smithyClient.expectString(output[_RAo]);
    }
    if (output[_Stat] != null) {
        contents[_Stat] = smithyClient.expectString(output[_Stat]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_LUD] != null) {
        contents[_LUD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LUD]));
    }
    if (output[_OF] != null) {
        contents[_OF] = smithyClient.expectString(output[_OF]);
    }
    if (String(output.StatisticsConfigurations).trim() === "") {
        contents[_SC] = [];
    }
    else if (output[_SC] != null && output[_SC][_m] != null) {
        contents[_SC] = de_MetricStreamStatisticsConfigurations(smithyClient.getArrayIfSingleItem(output[_SC][_m]));
    }
    if (output[_ILAM] != null) {
        contents[_ILAM] = smithyClient.parseBoolean(output[_ILAM]);
    }
    return contents;
};
const de_GetMetricWidgetImageOutput = (output, context) => {
    const contents = {};
    if (output[_MWI] != null) {
        contents[_MWI] = context.base64Decoder(output[_MWI]);
    }
    return contents;
};
const de_InsightRule = (output, context) => {
    const contents = {};
    if (output[_Na] != null) {
        contents[_Na] = smithyClient.expectString(output[_Na]);
    }
    if (output[_Stat] != null) {
        contents[_Stat] = smithyClient.expectString(output[_Stat]);
    }
    if (output[_Sc] != null) {
        contents[_Sc] = smithyClient.expectString(output[_Sc]);
    }
    if (output[_De] != null) {
        contents[_De] = smithyClient.expectString(output[_De]);
    }
    if (output[_MRana] != null) {
        contents[_MRana] = smithyClient.parseBoolean(output[_MRana]);
    }
    if (output[_AOTL] != null) {
        contents[_AOTL] = smithyClient.parseBoolean(output[_AOTL]);
    }
    return contents;
};
const de_InsightRuleContributor = (output, context) => {
    const contents = {};
    if (String(output.Keys).trim() === "") {
        contents[_Ke] = [];
    }
    else if (output[_Ke] != null && output[_Ke][_m] != null) {
        contents[_Ke] = de_InsightRuleContributorKeys(smithyClient.getArrayIfSingleItem(output[_Ke][_m]));
    }
    if (output[_AAV] != null) {
        contents[_AAV] = smithyClient.strictParseFloat(output[_AAV]);
    }
    if (String(output.Datapoints).trim() === "") {
        contents[_Da] = [];
    }
    else if (output[_Da] != null && output[_Da][_m] != null) {
        contents[_Da] = de_InsightRuleContributorDatapoints(smithyClient.getArrayIfSingleItem(output[_Da][_m]));
    }
    return contents;
};
const de_InsightRuleContributorDatapoint = (output, context) => {
    const contents = {};
    if (output[_Ti] != null) {
        contents[_Ti] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_Ti]));
    }
    if (output[_AVp] != null) {
        contents[_AVp] = smithyClient.strictParseFloat(output[_AVp]);
    }
    return contents;
};
const de_InsightRuleContributorDatapoints = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InsightRuleContributorDatapoint(entry);
    });
};
const de_InsightRuleContributorKeyLabels = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_InsightRuleContributorKeys = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_InsightRuleContributors = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InsightRuleContributor(entry);
    });
};
const de_InsightRuleMetricDatapoint = (output, context) => {
    const contents = {};
    if (output[_Ti] != null) {
        contents[_Ti] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_Ti]));
    }
    if (output[_UC] != null) {
        contents[_UC] = smithyClient.strictParseFloat(output[_UC]);
    }
    if (output[_MCV] != null) {
        contents[_MCV] = smithyClient.strictParseFloat(output[_MCV]);
    }
    if (output[_SCa] != null) {
        contents[_SCa] = smithyClient.strictParseFloat(output[_SCa]);
    }
    if (output[_Av] != null) {
        contents[_Av] = smithyClient.strictParseFloat(output[_Av]);
    }
    if (output[_Su] != null) {
        contents[_Su] = smithyClient.strictParseFloat(output[_Su]);
    }
    if (output[_Mi] != null) {
        contents[_Mi] = smithyClient.strictParseFloat(output[_Mi]);
    }
    if (output[_Ma] != null) {
        contents[_Ma] = smithyClient.strictParseFloat(output[_Ma]);
    }
    return contents;
};
const de_InsightRuleMetricDatapoints = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InsightRuleMetricDatapoint(entry);
    });
};
const de_InsightRules = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InsightRule(entry);
    });
};
const de_InternalServiceFault = (output, context) => {
    const contents = {};
    if (output[_Mes] != null) {
        contents[_Mes] = smithyClient.expectString(output[_Mes]);
    }
    return contents;
};
const de_InvalidFormatFault = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_InvalidNextToken = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_InvalidParameterCombinationException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_InvalidParameterValueException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_LimitExceededException = (output, context) => {
    const contents = {};
    if (output[_Mes] != null) {
        contents[_Mes] = smithyClient.expectString(output[_Mes]);
    }
    return contents;
};
const de_LimitExceededFault = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_ListDashboardsOutput = (output, context) => {
    const contents = {};
    if (String(output.DashboardEntries).trim() === "") {
        contents[_DE] = [];
    }
    else if (output[_DE] != null && output[_DE][_m] != null) {
        contents[_DE] = de_DashboardEntries(smithyClient.getArrayIfSingleItem(output[_DE][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListManagedInsightRulesOutput = (output, context) => {
    const contents = {};
    if (String(output.ManagedRules).trim() === "") {
        contents[_MRan] = [];
    }
    else if (output[_MRan] != null && output[_MRan][_m] != null) {
        contents[_MRan] = de_ManagedRuleDescriptions(smithyClient.getArrayIfSingleItem(output[_MRan][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    return contents;
};
const de_ListMetricsOutput = (output, context) => {
    const contents = {};
    if (String(output.Metrics).trim() === "") {
        contents[_M] = [];
    }
    else if (output[_M] != null && output[_M][_m] != null) {
        contents[_M] = de_Metrics(smithyClient.getArrayIfSingleItem(output[_M][_m]));
    }
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    if (String(output.OwningAccounts).trim() === "") {
        contents[_OAw] = [];
    }
    else if (output[_OAw] != null && output[_OAw][_m] != null) {
        contents[_OAw] = de_OwningAccounts(smithyClient.getArrayIfSingleItem(output[_OAw][_m]));
    }
    return contents;
};
const de_ListMetricStreamsOutput = (output, context) => {
    const contents = {};
    if (output[_NT] != null) {
        contents[_NT] = smithyClient.expectString(output[_NT]);
    }
    if (String(output.Entries).trim() === "") {
        contents[_En] = [];
    }
    else if (output[_En] != null && output[_En][_m] != null) {
        contents[_En] = de_MetricStreamEntries(smithyClient.getArrayIfSingleItem(output[_En][_m]));
    }
    return contents;
};
const de_ListTagsForResourceOutput = (output, context) => {
    const contents = {};
    if (String(output.Tags).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_Ta] != null && output[_Ta][_m] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_Ta][_m]));
    }
    return contents;
};
const de_ManagedRuleDescription = (output, context) => {
    const contents = {};
    if (output[_TN] != null) {
        contents[_TN] = smithyClient.expectString(output[_TN]);
    }
    if (output[_RARN] != null) {
        contents[_RARN] = smithyClient.expectString(output[_RARN]);
    }
    if (output[_RS] != null) {
        contents[_RS] = de_ManagedRuleState(output[_RS]);
    }
    return contents;
};
const de_ManagedRuleDescriptions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ManagedRuleDescription(entry);
    });
};
const de_ManagedRuleState = (output, context) => {
    const contents = {};
    if (output[_RNu] != null) {
        contents[_RNu] = smithyClient.expectString(output[_RNu]);
    }
    if (output[_Stat] != null) {
        contents[_Stat] = smithyClient.expectString(output[_Stat]);
    }
    return contents;
};
const de_MessageData = (output, context) => {
    const contents = {};
    if (output[_Cod] != null) {
        contents[_Cod] = smithyClient.expectString(output[_Cod]);
    }
    if (output[_Va] != null) {
        contents[_Va] = smithyClient.expectString(output[_Va]);
    }
    return contents;
};
const de_Metric = (output, context) => {
    const contents = {};
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_MN] != null) {
        contents[_MN] = smithyClient.expectString(output[_MN]);
    }
    if (String(output.Dimensions).trim() === "") {
        contents[_D] = [];
    }
    else if (output[_D] != null && output[_D][_m] != null) {
        contents[_D] = de_Dimensions(smithyClient.getArrayIfSingleItem(output[_D][_m]));
    }
    return contents;
};
const de_MetricAlarm = (output, context) => {
    const contents = {};
    if (output[_ANl] != null) {
        contents[_ANl] = smithyClient.expectString(output[_ANl]);
    }
    if (output[_AAl] != null) {
        contents[_AAl] = smithyClient.expectString(output[_AAl]);
    }
    if (output[_AD] != null) {
        contents[_AD] = smithyClient.expectString(output[_AD]);
    }
    if (output[_ACUT] != null) {
        contents[_ACUT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ACUT]));
    }
    if (output[_AE] != null) {
        contents[_AE] = smithyClient.parseBoolean(output[_AE]);
    }
    if (String(output.OKActions).trim() === "") {
        contents[_OKA] = [];
    }
    else if (output[_OKA] != null && output[_OKA][_m] != null) {
        contents[_OKA] = de_ResourceList(smithyClient.getArrayIfSingleItem(output[_OKA][_m]));
    }
    if (String(output.AlarmActions).trim() === "") {
        contents[_AA] = [];
    }
    else if (output[_AA] != null && output[_AA][_m] != null) {
        contents[_AA] = de_ResourceList(smithyClient.getArrayIfSingleItem(output[_AA][_m]));
    }
    if (String(output.InsufficientDataActions).trim() === "") {
        contents[_IDA] = [];
    }
    else if (output[_IDA] != null && output[_IDA][_m] != null) {
        contents[_IDA] = de_ResourceList(smithyClient.getArrayIfSingleItem(output[_IDA][_m]));
    }
    if (output[_SV] != null) {
        contents[_SV] = smithyClient.expectString(output[_SV]);
    }
    if (output[_SRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_SRt]);
    }
    if (output[_SRD] != null) {
        contents[_SRD] = smithyClient.expectString(output[_SRD]);
    }
    if (output[_SUT] != null) {
        contents[_SUT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_SUT]));
    }
    if (output[_MN] != null) {
        contents[_MN] = smithyClient.expectString(output[_MN]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    if (output[_ES] != null) {
        contents[_ES] = smithyClient.expectString(output[_ES]);
    }
    if (String(output.Dimensions).trim() === "") {
        contents[_D] = [];
    }
    else if (output[_D] != null && output[_D][_m] != null) {
        contents[_D] = de_Dimensions(smithyClient.getArrayIfSingleItem(output[_D][_m]));
    }
    if (output[_P] != null) {
        contents[_P] = smithyClient.strictParseInt32(output[_P]);
    }
    if (output[_U] != null) {
        contents[_U] = smithyClient.expectString(output[_U]);
    }
    if (output[_EP] != null) {
        contents[_EP] = smithyClient.strictParseInt32(output[_EP]);
    }
    if (output[_DTA] != null) {
        contents[_DTA] = smithyClient.strictParseInt32(output[_DTA]);
    }
    if (output[_Th] != null) {
        contents[_Th] = smithyClient.strictParseFloat(output[_Th]);
    }
    if (output[_CO] != null) {
        contents[_CO] = smithyClient.expectString(output[_CO]);
    }
    if (output[_TMD] != null) {
        contents[_TMD] = smithyClient.expectString(output[_TMD]);
    }
    if (output[_ELSCP] != null) {
        contents[_ELSCP] = smithyClient.expectString(output[_ELSCP]);
    }
    if (String(output.Metrics).trim() === "") {
        contents[_M] = [];
    }
    else if (output[_M] != null && output[_M][_m] != null) {
        contents[_M] = de_MetricDataQueries(smithyClient.getArrayIfSingleItem(output[_M][_m]));
    }
    if (output[_TMI] != null) {
        contents[_TMI] = smithyClient.expectString(output[_TMI]);
    }
    if (output[_ESv] != null) {
        contents[_ESv] = smithyClient.expectString(output[_ESv]);
    }
    if (output[_STT] != null) {
        contents[_STT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_STT]));
    }
    return contents;
};
const de_MetricAlarms = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricAlarm(entry);
    });
};
const de_MetricCharacteristics = (output, context) => {
    const contents = {};
    if (output[_PS] != null) {
        contents[_PS] = smithyClient.parseBoolean(output[_PS]);
    }
    return contents;
};
const de_MetricDataQueries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricDataQuery(entry);
    });
};
const de_MetricDataQuery = (output, context) => {
    const contents = {};
    if (output[_I] != null) {
        contents[_I] = smithyClient.expectString(output[_I]);
    }
    if (output[_MS] != null) {
        contents[_MS] = de_MetricStat(output[_MS]);
    }
    if (output[_Ex] != null) {
        contents[_Ex] = smithyClient.expectString(output[_Ex]);
    }
    if (output[_L] != null) {
        contents[_L] = smithyClient.expectString(output[_L]);
    }
    if (output[_RD] != null) {
        contents[_RD] = smithyClient.parseBoolean(output[_RD]);
    }
    if (output[_P] != null) {
        contents[_P] = smithyClient.strictParseInt32(output[_P]);
    }
    if (output[_AI] != null) {
        contents[_AI] = smithyClient.expectString(output[_AI]);
    }
    return contents;
};
const de_MetricDataResult = (output, context) => {
    const contents = {};
    if (output[_I] != null) {
        contents[_I] = smithyClient.expectString(output[_I]);
    }
    if (output[_L] != null) {
        contents[_L] = smithyClient.expectString(output[_L]);
    }
    if (String(output.Timestamps).trim() === "") {
        contents[_Tim] = [];
    }
    else if (output[_Tim] != null && output[_Tim][_m] != null) {
        contents[_Tim] = de_Timestamps(smithyClient.getArrayIfSingleItem(output[_Tim][_m]));
    }
    if (String(output.Values).trim() === "") {
        contents[_Val] = [];
    }
    else if (output[_Val] != null && output[_Val][_m] != null) {
        contents[_Val] = de_DatapointValues(smithyClient.getArrayIfSingleItem(output[_Val][_m]));
    }
    if (output[_SCt] != null) {
        contents[_SCt] = smithyClient.expectString(output[_SCt]);
    }
    if (String(output.Messages).trim() === "") {
        contents[_Mess] = [];
    }
    else if (output[_Mess] != null && output[_Mess][_m] != null) {
        contents[_Mess] = de_MetricDataResultMessages(smithyClient.getArrayIfSingleItem(output[_Mess][_m]));
    }
    return contents;
};
const de_MetricDataResultMessages = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MessageData(entry);
    });
};
const de_MetricDataResults = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricDataResult(entry);
    });
};
const de_MetricMathAnomalyDetector = (output, context) => {
    const contents = {};
    if (String(output.MetricDataQueries).trim() === "") {
        contents[_MDQ] = [];
    }
    else if (output[_MDQ] != null && output[_MDQ][_m] != null) {
        contents[_MDQ] = de_MetricDataQueries(smithyClient.getArrayIfSingleItem(output[_MDQ][_m]));
    }
    return contents;
};
const de_Metrics = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Metric(entry);
    });
};
const de_MetricStat = (output, context) => {
    const contents = {};
    if (output[_Me] != null) {
        contents[_Me] = de_Metric(output[_Me]);
    }
    if (output[_P] != null) {
        contents[_P] = smithyClient.strictParseInt32(output[_P]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_U] != null) {
        contents[_U] = smithyClient.expectString(output[_U]);
    }
    return contents;
};
const de_MetricStreamEntries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricStreamEntry(entry);
    });
};
const de_MetricStreamEntry = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_LUD] != null) {
        contents[_LUD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LUD]));
    }
    if (output[_Na] != null) {
        contents[_Na] = smithyClient.expectString(output[_Na]);
    }
    if (output[_FA] != null) {
        contents[_FA] = smithyClient.expectString(output[_FA]);
    }
    if (output[_Stat] != null) {
        contents[_Stat] = smithyClient.expectString(output[_Stat]);
    }
    if (output[_OF] != null) {
        contents[_OF] = smithyClient.expectString(output[_OF]);
    }
    return contents;
};
const de_MetricStreamFilter = (output, context) => {
    const contents = {};
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (String(output.MetricNames).trim() === "") {
        contents[_MNe] = [];
    }
    else if (output[_MNe] != null && output[_MNe][_m] != null) {
        contents[_MNe] = de_MetricStreamFilterMetricNames(smithyClient.getArrayIfSingleItem(output[_MNe][_m]));
    }
    return contents;
};
const de_MetricStreamFilterMetricNames = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_MetricStreamFilters = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricStreamFilter(entry);
    });
};
const de_MetricStreamStatisticsAdditionalStatistics = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_MetricStreamStatisticsConfiguration = (output, context) => {
    const contents = {};
    if (String(output.IncludeMetrics).trim() === "") {
        contents[_IM] = [];
    }
    else if (output[_IM] != null && output[_IM][_m] != null) {
        contents[_IM] = de_MetricStreamStatisticsIncludeMetrics(smithyClient.getArrayIfSingleItem(output[_IM][_m]));
    }
    if (String(output.AdditionalStatistics).trim() === "") {
        contents[_AS] = [];
    }
    else if (output[_AS] != null && output[_AS][_m] != null) {
        contents[_AS] = de_MetricStreamStatisticsAdditionalStatistics(smithyClient.getArrayIfSingleItem(output[_AS][_m]));
    }
    return contents;
};
const de_MetricStreamStatisticsConfigurations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricStreamStatisticsConfiguration(entry);
    });
};
const de_MetricStreamStatisticsIncludeMetrics = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricStreamStatisticsMetric(entry);
    });
};
const de_MetricStreamStatisticsMetric = (output, context) => {
    const contents = {};
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_MN] != null) {
        contents[_MN] = smithyClient.expectString(output[_MN]);
    }
    return contents;
};
const de_MissingRequiredParameterException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_OwningAccounts = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_PartialFailure = (output, context) => {
    const contents = {};
    if (output[_FR] != null) {
        contents[_FR] = smithyClient.expectString(output[_FR]);
    }
    if (output[_ETx] != null) {
        contents[_ETx] = smithyClient.expectString(output[_ETx]);
    }
    if (output[_FC] != null) {
        contents[_FC] = smithyClient.expectString(output[_FC]);
    }
    if (output[_FD] != null) {
        contents[_FD] = smithyClient.expectString(output[_FD]);
    }
    return contents;
};
const de_PutAnomalyDetectorOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_PutDashboardOutput = (output, context) => {
    const contents = {};
    if (String(output.DashboardValidationMessages).trim() === "") {
        contents[_DVM] = [];
    }
    else if (output[_DVM] != null && output[_DVM][_m] != null) {
        contents[_DVM] = de_DashboardValidationMessages(smithyClient.getArrayIfSingleItem(output[_DVM][_m]));
    }
    return contents;
};
const de_PutInsightRuleOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_PutManagedInsightRulesOutput = (output, context) => {
    const contents = {};
    if (String(output.Failures).trim() === "") {
        contents[_F] = [];
    }
    else if (output[_F] != null && output[_F][_m] != null) {
        contents[_F] = de_BatchFailures(smithyClient.getArrayIfSingleItem(output[_F][_m]));
    }
    return contents;
};
const de_PutMetricStreamOutput = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    return contents;
};
const de_Range = (output, context) => {
    const contents = {};
    if (output[_ST] != null) {
        contents[_ST] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ST]));
    }
    if (output[_ET] != null) {
        contents[_ET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ET]));
    }
    return contents;
};
const de_ResourceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ResourceNotFound = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_ResourceNotFoundException = (output, context) => {
    const contents = {};
    if (output[_RT] != null) {
        contents[_RT] = smithyClient.expectString(output[_RT]);
    }
    if (output[_RI] != null) {
        contents[_RI] = smithyClient.expectString(output[_RI]);
    }
    if (output[_Mes] != null) {
        contents[_Mes] = smithyClient.expectString(output[_Mes]);
    }
    return contents;
};
const de_SingleMetricAnomalyDetector = (output, context) => {
    const contents = {};
    if (output[_AI] != null) {
        contents[_AI] = smithyClient.expectString(output[_AI]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_MN] != null) {
        contents[_MN] = smithyClient.expectString(output[_MN]);
    }
    if (String(output.Dimensions).trim() === "") {
        contents[_D] = [];
    }
    else if (output[_D] != null && output[_D][_m] != null) {
        contents[_D] = de_Dimensions(smithyClient.getArrayIfSingleItem(output[_D][_m]));
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    return contents;
};
const de_StartMetricStreamsOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_StopMetricStreamsOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_Tag = (output, context) => {
    const contents = {};
    if (output[_K] != null) {
        contents[_K] = smithyClient.expectString(output[_K]);
    }
    if (output[_Va] != null) {
        contents[_Va] = smithyClient.expectString(output[_Va]);
    }
    return contents;
};
const de_TagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry);
    });
};
const de_TagResourceOutput = (output, context) => {
    const contents = {};
    return contents;
};
const de_Timestamps = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(entry));
    });
};
const de_UntagResourceOutput = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(CloudWatchServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded",
};
const _ = "2010-08-01";
const _A = "Action";
const _AA = "AlarmActions";
const _AAV = "ApproximateAggregateValue";
const _AAl = "AlarmArn";
const _AC = "AlarmContributors";
const _ACA = "AlarmContributorAttributes";
const _ACI = "AlarmContributorId";
const _ACUT = "AlarmConfigurationUpdatedTimestamp";
const _AD = "AlarmDescription";
const _ADT = "AnomalyDetectorTypes";
const _ADn = "AnomalyDetectors";
const _AE = "ActionsEnabled";
const _AHI = "AlarmHistoryItems";
const _AI = "AccountId";
const _AN = "AlarmNames";
const _ANP = "AlarmNamePrefix";
const _ANl = "AlarmName";
const _AOTL = "ApplyOnTransformedLogs";
const _AP = "ActionPrefix";
const _AR = "AlarmRule";
const _AS = "AdditionalStatistics";
const _ASB = "ActionsSuppressedBy";
const _ASEP = "ActionsSuppressorExtensionPeriod";
const _ASR = "ActionsSuppressedReason";
const _ASWP = "ActionsSuppressorWaitPeriod";
const _ASc = "ActionsSuppressor";
const _ASg = "AggregationStatistic";
const _AT = "AlarmTypes";
const _ATl = "AlarmType";
const _AUC = "ApproximateUniqueCount";
const _AV = "AggregateValue";
const _AVp = "ApproximateValue";
const _Ar = "Arn";
const _At = "Attributes";
const _Av = "Average";
const _C = "Counts";
const _CA = "ContributorAttributes";
const _CAo = "CompositeAlarms";
const _CD = "CreationDate";
const _CI = "ContributorId";
const _CO = "ComparisonOperator";
const _COAN = "ChildrenOfAlarmName";
const _Co = "Configuration";
const _Cod = "Code";
const _Con = "Contributors";
const _D = "Dimensions";
const _DA = "DeleteAlarms";
const _DAA = "DisableAlarmActions";
const _DAC = "DescribeAlarmContributors";
const _DAD = "DeleteAnomalyDetector";
const _DADe = "DescribeAnomalyDetectors";
const _DAFM = "DescribeAlarmsForMetric";
const _DAH = "DescribeAlarmHistory";
const _DAa = "DashboardArn";
const _DAe = "DescribeAlarms";
const _DB = "DashboardBody";
const _DD = "DeleteDashboards";
const _DE = "DashboardEntries";
const _DIR = "DeleteInsightRules";
const _DIRe = "DescribeInsightRules";
const _DIRi = "DisableInsightRules";
const _DMS = "DeleteMetricStream";
const _DN = "DashboardNames";
const _DNP = "DashboardNamePrefix";
const _DNa = "DashboardName";
const _DP = "DataPath";
const _DTA = "DatapointsToAlarm";
const _DVM = "DashboardValidationMessages";
const _Da = "Datapoints";
const _De = "Definition";
const _E = "Entity";
const _EAA = "EnableAlarmActions";
const _ED = "EndDate";
const _EF = "ExcludeFilters";
const _EIR = "EnableInsightRules";
const _ELSCP = "EvaluateLowSampleCountPercentile";
const _EMD = "EntityMetricData";
const _EP = "EvaluationPeriods";
const _ES = "ExtendedStatistic";
const _ESv = "EvaluationState";
const _ESx = "ExtendedStatistics";
const _ET = "EndTime";
const _ETR = "ExcludedTimeRanges";
const _ETx = "ExceptionType";
const _En = "Entries";
const _Ex = "Expression";
const _F = "Failures";
const _FA = "FirehoseArn";
const _FC = "FailureCode";
const _FD = "FailureDescription";
const _FR = "FailureResource";
const _GD = "GetDashboard";
const _GIRR = "GetInsightRuleReport";
const _GMD = "GetMetricData";
const _GMS = "GetMetricStatistics";
const _GMSe = "GetMetricStream";
const _GMWI = "GetMetricWidgetImage";
const _HD = "HistoryData";
const _HIT = "HistoryItemType";
const _HS = "HistorySummary";
const _I = "Id";
const _IDA = "InsufficientDataActions";
const _IF = "IncludeFilters";
const _ILA = "IncludeLinkedAccounts";
const _ILAM = "IncludeLinkedAccountsMetrics";
const _IM = "IncludeMetrics";
const _IR = "InsightRules";
const _K = "Key";
const _KA = "KeyAttributes";
const _KL = "KeyLabels";
const _Ke = "Keys";
const _L = "Label";
const _LD = "ListDashboards";
const _LM = "ListMetrics";
const _LMIR = "ListManagedInsightRules";
const _LMS = "ListMetricStreams";
const _LMa = "LastModified";
const _LO = "LabelOptions";
const _LTFR = "ListTagsForResource";
const _LUD = "LastUpdateDate";
const _M = "Metrics";
const _MA = "MetricAlarms";
const _MC = "MetricCharacteristics";
const _MCC = "MaxContributorCount";
const _MCV = "MaxContributorValue";
const _MD = "MetricData";
const _MDQ = "MetricDataQueries";
const _MDR = "MetricDataResults";
const _MDa = "MaxDatapoints";
const _MDe = "MetricDatapoints";
const _MMAD = "MetricMathAnomalyDetector";
const _MN = "MetricName";
const _MNe = "MetricNames";
const _MR = "MaxRecords";
const _MRa = "MaxResults";
const _MRan = "ManagedRules";
const _MRana = "ManagedRule";
const _MS = "MetricStat";
const _MT = "MetricTimezone";
const _MW = "MetricWidget";
const _MWI = "MetricWidgetImage";
const _Ma = "Maximum";
const _Me = "Metric";
const _Mes = "Message";
const _Mess = "Messages";
const _Mi = "Minimum";
const _N = "Namespace";
const _NT = "NextToken";
const _Na = "Name";
const _Nam = "Names";
const _OA = "OwningAccount";
const _OAw = "OwningAccounts";
const _OB = "OrderBy";
const _OF = "OutputFormat";
const _OKA = "OKActions";
const _P = "Period";
const _PAD = "PutAnomalyDetector";
const _PCA = "PutCompositeAlarm";
const _PD = "PutDashboard";
const _PIR = "PutInsightRule";
const _PMA = "PutMetricAlarm";
const _PMD = "PutMetricData";
const _PMIR = "PutManagedInsightRules";
const _PMS = "PutMetricStream";
const _POAN = "ParentsOfAlarmName";
const _PS = "PeriodicSpikes";
const _RA = "RecentlyActive";
const _RARN = "ResourceARN";
const _RAo = "RoleArn";
const _RD = "ReturnData";
const _RDu = "RuleDefinition";
const _RI = "ResourceId";
const _RN = "RuleNames";
const _RNu = "RuleName";
const _RS = "RuleState";
const _RT = "ResourceType";
const _S = "Stat";
const _SAS = "SetAlarmState";
const _SB = "ScanBy";
const _SC = "StatisticsConfigurations";
const _SCa = "SampleCount";
const _SCt = "StatusCode";
const _SD = "StartDate";
const _SEV = "StrictEntityValidation";
const _SMAD = "SingleMetricAnomalyDetector";
const _SMS = "StartMetricStreams";
const _SMSt = "StopMetricStreams";
const _SR = "StorageResolution";
const _SRD = "StateReasonData";
const _SRt = "StateReason";
const _ST = "StartTime";
const _STT = "StateTransitionedTimestamp";
const _SUT = "StateUpdatedTimestamp";
const _SV = "StateValue";
const _SVt = "StatisticValues";
const _Sc = "Schema";
const _Si = "Size";
const _St = "Statistic";
const _Sta = "Statistics";
const _Stat = "State";
const _Su = "Sum";
const _T = "Timezone";
const _TK = "TagKeys";
const _TMD = "TreatMissingData";
const _TMI = "ThresholdMetricId";
const _TN = "TemplateName";
const _TR = "TagResource";
const _Ta = "Tags";
const _Th = "Threshold";
const _Ti = "Timestamp";
const _Tim = "Timestamps";
const _U = "Unit";
const _UC = "UniqueContributors";
const _UR = "UntagResource";
const _V = "Version";
const _Va = "Value";
const _Val = "Values";
const _dVM = "dashboardValidationMessages";
const _e = "entry";
const _m = "member";
const _me = "message";
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => smithyClient.extendedEncodeURIComponent(key) + "=" + smithyClient.extendedEncodeURIComponent(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error?.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};

class DeleteAlarmsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DeleteAlarms", {})
    .n("CloudWatchClient", "DeleteAlarmsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAlarmsCommand)
    .de(de_DeleteAlarmsCommand)
    .build() {
}

class DeleteAnomalyDetectorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DeleteAnomalyDetector", {})
    .n("CloudWatchClient", "DeleteAnomalyDetectorCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAnomalyDetectorCommand)
    .de(de_DeleteAnomalyDetectorCommand)
    .build() {
}

class DeleteDashboardsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DeleteDashboards", {})
    .n("CloudWatchClient", "DeleteDashboardsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDashboardsCommand)
    .de(de_DeleteDashboardsCommand)
    .build() {
}

class DeleteInsightRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DeleteInsightRules", {})
    .n("CloudWatchClient", "DeleteInsightRulesCommand")
    .f(void 0, void 0)
    .ser(se_DeleteInsightRulesCommand)
    .de(de_DeleteInsightRulesCommand)
    .build() {
}

class DeleteMetricStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DeleteMetricStream", {})
    .n("CloudWatchClient", "DeleteMetricStreamCommand")
    .f(void 0, void 0)
    .ser(se_DeleteMetricStreamCommand)
    .de(de_DeleteMetricStreamCommand)
    .build() {
}

class DescribeAlarmContributorsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DescribeAlarmContributors", {})
    .n("CloudWatchClient", "DescribeAlarmContributorsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAlarmContributorsCommand)
    .de(de_DescribeAlarmContributorsCommand)
    .build() {
}

class DescribeAlarmHistoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DescribeAlarmHistory", {})
    .n("CloudWatchClient", "DescribeAlarmHistoryCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAlarmHistoryCommand)
    .de(de_DescribeAlarmHistoryCommand)
    .build() {
}

class DescribeAlarmsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DescribeAlarms", {})
    .n("CloudWatchClient", "DescribeAlarmsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAlarmsCommand)
    .de(de_DescribeAlarmsCommand)
    .build() {
}

class DescribeAlarmsForMetricCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DescribeAlarmsForMetric", {})
    .n("CloudWatchClient", "DescribeAlarmsForMetricCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAlarmsForMetricCommand)
    .de(de_DescribeAlarmsForMetricCommand)
    .build() {
}

class DescribeAnomalyDetectorsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DescribeAnomalyDetectors", {})
    .n("CloudWatchClient", "DescribeAnomalyDetectorsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAnomalyDetectorsCommand)
    .de(de_DescribeAnomalyDetectorsCommand)
    .build() {
}

class DescribeInsightRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DescribeInsightRules", {})
    .n("CloudWatchClient", "DescribeInsightRulesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInsightRulesCommand)
    .de(de_DescribeInsightRulesCommand)
    .build() {
}

class DisableAlarmActionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DisableAlarmActions", {})
    .n("CloudWatchClient", "DisableAlarmActionsCommand")
    .f(void 0, void 0)
    .ser(se_DisableAlarmActionsCommand)
    .de(de_DisableAlarmActionsCommand)
    .build() {
}

class DisableInsightRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "DisableInsightRules", {})
    .n("CloudWatchClient", "DisableInsightRulesCommand")
    .f(void 0, void 0)
    .ser(se_DisableInsightRulesCommand)
    .de(de_DisableInsightRulesCommand)
    .build() {
}

class EnableAlarmActionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "EnableAlarmActions", {})
    .n("CloudWatchClient", "EnableAlarmActionsCommand")
    .f(void 0, void 0)
    .ser(se_EnableAlarmActionsCommand)
    .de(de_EnableAlarmActionsCommand)
    .build() {
}

class EnableInsightRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "EnableInsightRules", {})
    .n("CloudWatchClient", "EnableInsightRulesCommand")
    .f(void 0, void 0)
    .ser(se_EnableInsightRulesCommand)
    .de(de_EnableInsightRulesCommand)
    .build() {
}

class GetDashboardCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "GetDashboard", {})
    .n("CloudWatchClient", "GetDashboardCommand")
    .f(void 0, void 0)
    .ser(se_GetDashboardCommand)
    .de(de_GetDashboardCommand)
    .build() {
}

class GetInsightRuleReportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "GetInsightRuleReport", {})
    .n("CloudWatchClient", "GetInsightRuleReportCommand")
    .f(void 0, void 0)
    .ser(se_GetInsightRuleReportCommand)
    .de(de_GetInsightRuleReportCommand)
    .build() {
}

class GetMetricDataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "GetMetricData", {})
    .n("CloudWatchClient", "GetMetricDataCommand")
    .f(void 0, void 0)
    .ser(se_GetMetricDataCommand)
    .de(de_GetMetricDataCommand)
    .build() {
}

class GetMetricStatisticsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "GetMetricStatistics", {})
    .n("CloudWatchClient", "GetMetricStatisticsCommand")
    .f(void 0, void 0)
    .ser(se_GetMetricStatisticsCommand)
    .de(de_GetMetricStatisticsCommand)
    .build() {
}

class GetMetricStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "GetMetricStream", {})
    .n("CloudWatchClient", "GetMetricStreamCommand")
    .f(void 0, void 0)
    .ser(se_GetMetricStreamCommand)
    .de(de_GetMetricStreamCommand)
    .build() {
}

class GetMetricWidgetImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "GetMetricWidgetImage", {})
    .n("CloudWatchClient", "GetMetricWidgetImageCommand")
    .f(void 0, void 0)
    .ser(se_GetMetricWidgetImageCommand)
    .de(de_GetMetricWidgetImageCommand)
    .build() {
}

class ListDashboardsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "ListDashboards", {})
    .n("CloudWatchClient", "ListDashboardsCommand")
    .f(void 0, void 0)
    .ser(se_ListDashboardsCommand)
    .de(de_ListDashboardsCommand)
    .build() {
}

class ListManagedInsightRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "ListManagedInsightRules", {})
    .n("CloudWatchClient", "ListManagedInsightRulesCommand")
    .f(void 0, void 0)
    .ser(se_ListManagedInsightRulesCommand)
    .de(de_ListManagedInsightRulesCommand)
    .build() {
}

class ListMetricsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "ListMetrics", {})
    .n("CloudWatchClient", "ListMetricsCommand")
    .f(void 0, void 0)
    .ser(se_ListMetricsCommand)
    .de(de_ListMetricsCommand)
    .build() {
}

class ListMetricStreamsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "ListMetricStreams", {})
    .n("CloudWatchClient", "ListMetricStreamsCommand")
    .f(void 0, void 0)
    .ser(se_ListMetricStreamsCommand)
    .de(de_ListMetricStreamsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "ListTagsForResource", {})
    .n("CloudWatchClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class PutAnomalyDetectorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "PutAnomalyDetector", {})
    .n("CloudWatchClient", "PutAnomalyDetectorCommand")
    .f(void 0, void 0)
    .ser(se_PutAnomalyDetectorCommand)
    .de(de_PutAnomalyDetectorCommand)
    .build() {
}

class PutCompositeAlarmCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "PutCompositeAlarm", {})
    .n("CloudWatchClient", "PutCompositeAlarmCommand")
    .f(void 0, void 0)
    .ser(se_PutCompositeAlarmCommand)
    .de(de_PutCompositeAlarmCommand)
    .build() {
}

class PutDashboardCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "PutDashboard", {})
    .n("CloudWatchClient", "PutDashboardCommand")
    .f(void 0, void 0)
    .ser(se_PutDashboardCommand)
    .de(de_PutDashboardCommand)
    .build() {
}

class PutInsightRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "PutInsightRule", {})
    .n("CloudWatchClient", "PutInsightRuleCommand")
    .f(void 0, void 0)
    .ser(se_PutInsightRuleCommand)
    .de(de_PutInsightRuleCommand)
    .build() {
}

class PutManagedInsightRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "PutManagedInsightRules", {})
    .n("CloudWatchClient", "PutManagedInsightRulesCommand")
    .f(void 0, void 0)
    .ser(se_PutManagedInsightRulesCommand)
    .de(de_PutManagedInsightRulesCommand)
    .build() {
}

class PutMetricAlarmCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "PutMetricAlarm", {})
    .n("CloudWatchClient", "PutMetricAlarmCommand")
    .f(void 0, void 0)
    .ser(se_PutMetricAlarmCommand)
    .de(de_PutMetricAlarmCommand)
    .build() {
}

class PutMetricDataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareCompression.getCompressionPlugin(config, {
            encodings: ["gzip"],
        }),
    ];
})
    .s("GraniteServiceVersion20100801", "PutMetricData", {})
    .n("CloudWatchClient", "PutMetricDataCommand")
    .f(void 0, void 0)
    .ser(se_PutMetricDataCommand)
    .de(de_PutMetricDataCommand)
    .build() {
}

class PutMetricStreamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "PutMetricStream", {})
    .n("CloudWatchClient", "PutMetricStreamCommand")
    .f(void 0, void 0)
    .ser(se_PutMetricStreamCommand)
    .de(de_PutMetricStreamCommand)
    .build() {
}

class SetAlarmStateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "SetAlarmState", {})
    .n("CloudWatchClient", "SetAlarmStateCommand")
    .f(void 0, void 0)
    .ser(se_SetAlarmStateCommand)
    .de(de_SetAlarmStateCommand)
    .build() {
}

class StartMetricStreamsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "StartMetricStreams", {})
    .n("CloudWatchClient", "StartMetricStreamsCommand")
    .f(void 0, void 0)
    .ser(se_StartMetricStreamsCommand)
    .de(de_StartMetricStreamsCommand)
    .build() {
}

class StopMetricStreamsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "StopMetricStreams", {})
    .n("CloudWatchClient", "StopMetricStreamsCommand")
    .f(void 0, void 0)
    .ser(se_StopMetricStreamsCommand)
    .de(de_StopMetricStreamsCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "TagResource", {})
    .n("CloudWatchClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("GraniteServiceVersion20100801", "UntagResource", {})
    .n("CloudWatchClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

const commands = {
    DeleteAlarmsCommand,
    DeleteAnomalyDetectorCommand,
    DeleteDashboardsCommand,
    DeleteInsightRulesCommand,
    DeleteMetricStreamCommand,
    DescribeAlarmContributorsCommand,
    DescribeAlarmHistoryCommand,
    DescribeAlarmsCommand,
    DescribeAlarmsForMetricCommand,
    DescribeAnomalyDetectorsCommand,
    DescribeInsightRulesCommand,
    DisableAlarmActionsCommand,
    DisableInsightRulesCommand,
    EnableAlarmActionsCommand,
    EnableInsightRulesCommand,
    GetDashboardCommand,
    GetInsightRuleReportCommand,
    GetMetricDataCommand,
    GetMetricStatisticsCommand,
    GetMetricStreamCommand,
    GetMetricWidgetImageCommand,
    ListDashboardsCommand,
    ListManagedInsightRulesCommand,
    ListMetricsCommand,
    ListMetricStreamsCommand,
    ListTagsForResourceCommand,
    PutAnomalyDetectorCommand,
    PutCompositeAlarmCommand,
    PutDashboardCommand,
    PutInsightRuleCommand,
    PutManagedInsightRulesCommand,
    PutMetricAlarmCommand,
    PutMetricDataCommand,
    PutMetricStreamCommand,
    SetAlarmStateCommand,
    StartMetricStreamsCommand,
    StopMetricStreamsCommand,
    TagResourceCommand,
    UntagResourceCommand,
};
class CloudWatch extends CloudWatchClient {
}
smithyClient.createAggregatedClient(commands, CloudWatch);

const paginateDescribeAlarmHistory = core.createPaginator(CloudWatchClient, DescribeAlarmHistoryCommand, "NextToken", "NextToken", "MaxRecords");

const paginateDescribeAlarms = core.createPaginator(CloudWatchClient, DescribeAlarmsCommand, "NextToken", "NextToken", "MaxRecords");

const paginateDescribeAnomalyDetectors = core.createPaginator(CloudWatchClient, DescribeAnomalyDetectorsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeInsightRules = core.createPaginator(CloudWatchClient, DescribeInsightRulesCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetMetricData = core.createPaginator(CloudWatchClient, GetMetricDataCommand, "NextToken", "NextToken", "MaxDatapoints");

const paginateListDashboards = core.createPaginator(CloudWatchClient, ListDashboardsCommand, "NextToken", "NextToken", "");

const paginateListManagedInsightRules = core.createPaginator(CloudWatchClient, ListManagedInsightRulesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListMetricStreams = core.createPaginator(CloudWatchClient, ListMetricStreamsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListMetrics = core.createPaginator(CloudWatchClient, ListMetricsCommand, "NextToken", "NextToken", "");

const checkState$1 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeAlarmsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.MetricAlarms);
                return flat_1.length > 0.0;
            };
            if (returnComparator() == true) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForAlarmExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
};
const waitUntilAlarmExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
    return utilWaiter.checkExceptions(result);
};

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeAlarmsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.CompositeAlarms);
                return flat_1.length > 0.0;
            };
            if (returnComparator() == true) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForCompositeAlarmExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilCompositeAlarmExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.ActionsSuppressedBy = ActionsSuppressedBy;
exports.AlarmType = AlarmType;
exports.AnomalyDetectorStateValue = AnomalyDetectorStateValue;
exports.AnomalyDetectorType = AnomalyDetectorType;
exports.CloudWatch = CloudWatch;
exports.CloudWatchClient = CloudWatchClient;
exports.CloudWatchServiceException = CloudWatchServiceException;
exports.ComparisonOperator = ComparisonOperator;
exports.ConcurrentModificationException = ConcurrentModificationException;
exports.ConflictException = ConflictException;
exports.DashboardInvalidInputError = DashboardInvalidInputError;
exports.DashboardNotFoundError = DashboardNotFoundError;
exports.DeleteAlarmsCommand = DeleteAlarmsCommand;
exports.DeleteAnomalyDetectorCommand = DeleteAnomalyDetectorCommand;
exports.DeleteDashboardsCommand = DeleteDashboardsCommand;
exports.DeleteInsightRulesCommand = DeleteInsightRulesCommand;
exports.DeleteMetricStreamCommand = DeleteMetricStreamCommand;
exports.DescribeAlarmContributorsCommand = DescribeAlarmContributorsCommand;
exports.DescribeAlarmHistoryCommand = DescribeAlarmHistoryCommand;
exports.DescribeAlarmsCommand = DescribeAlarmsCommand;
exports.DescribeAlarmsForMetricCommand = DescribeAlarmsForMetricCommand;
exports.DescribeAnomalyDetectorsCommand = DescribeAnomalyDetectorsCommand;
exports.DescribeInsightRulesCommand = DescribeInsightRulesCommand;
exports.DisableAlarmActionsCommand = DisableAlarmActionsCommand;
exports.DisableInsightRulesCommand = DisableInsightRulesCommand;
exports.EnableAlarmActionsCommand = EnableAlarmActionsCommand;
exports.EnableInsightRulesCommand = EnableInsightRulesCommand;
exports.EvaluationState = EvaluationState;
exports.GetDashboardCommand = GetDashboardCommand;
exports.GetInsightRuleReportCommand = GetInsightRuleReportCommand;
exports.GetMetricDataCommand = GetMetricDataCommand;
exports.GetMetricStatisticsCommand = GetMetricStatisticsCommand;
exports.GetMetricStreamCommand = GetMetricStreamCommand;
exports.GetMetricWidgetImageCommand = GetMetricWidgetImageCommand;
exports.HistoryItemType = HistoryItemType;
exports.InternalServiceFault = InternalServiceFault;
exports.InvalidFormatFault = InvalidFormatFault;
exports.InvalidNextToken = InvalidNextToken;
exports.InvalidParameterCombinationException = InvalidParameterCombinationException;
exports.InvalidParameterValueException = InvalidParameterValueException;
exports.LimitExceededException = LimitExceededException;
exports.LimitExceededFault = LimitExceededFault;
exports.ListDashboardsCommand = ListDashboardsCommand;
exports.ListManagedInsightRulesCommand = ListManagedInsightRulesCommand;
exports.ListMetricStreamsCommand = ListMetricStreamsCommand;
exports.ListMetricsCommand = ListMetricsCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.MetricStreamOutputFormat = MetricStreamOutputFormat;
exports.MissingRequiredParameterException = MissingRequiredParameterException;
exports.PutAnomalyDetectorCommand = PutAnomalyDetectorCommand;
exports.PutCompositeAlarmCommand = PutCompositeAlarmCommand;
exports.PutDashboardCommand = PutDashboardCommand;
exports.PutInsightRuleCommand = PutInsightRuleCommand;
exports.PutManagedInsightRulesCommand = PutManagedInsightRulesCommand;
exports.PutMetricAlarmCommand = PutMetricAlarmCommand;
exports.PutMetricDataCommand = PutMetricDataCommand;
exports.PutMetricStreamCommand = PutMetricStreamCommand;
exports.RecentlyActive = RecentlyActive;
exports.ResourceNotFound = ResourceNotFound;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ScanBy = ScanBy;
exports.SetAlarmStateCommand = SetAlarmStateCommand;
exports.StandardUnit = StandardUnit;
exports.StartMetricStreamsCommand = StartMetricStreamsCommand;
exports.StateValue = StateValue;
exports.Statistic = Statistic;
exports.StatusCode = StatusCode;
exports.StopMetricStreamsCommand = StopMetricStreamsCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.UntagResourceCommand = UntagResourceCommand;
exports.paginateDescribeAlarmHistory = paginateDescribeAlarmHistory;
exports.paginateDescribeAlarms = paginateDescribeAlarms;
exports.paginateDescribeAnomalyDetectors = paginateDescribeAnomalyDetectors;
exports.paginateDescribeInsightRules = paginateDescribeInsightRules;
exports.paginateGetMetricData = paginateGetMetricData;
exports.paginateListDashboards = paginateListDashboards;
exports.paginateListManagedInsightRules = paginateListManagedInsightRules;
exports.paginateListMetricStreams = paginateListMetricStreams;
exports.paginateListMetrics = paginateListMetrics;
exports.waitForAlarmExists = waitForAlarmExists;
exports.waitForCompositeAlarmExists = waitForCompositeAlarmExists;
exports.waitUntilAlarmExists = waitUntilAlarmExists;
exports.waitUntilCompositeAlarmExists = waitUntilCompositeAlarmExists;
