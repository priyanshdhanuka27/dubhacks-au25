AWSTemplateFormatVersion: '2010-09-09'
Description: 'EventSync Platform Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name
  
  DomainName:
    Type: String
    Description: Domain name for the application
    Default: eventsync.example.com
  
  CertificateArn:
    Type: String
    Description: ARN of the SSL certificate for HTTPS
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the application
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for the application (at least 2 for ALB)

Resources:
  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'eventsync-${Environment}-users'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: EventSync

  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'eventsync-${Environment}-events'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: eventId
          AttributeType: S
        - AttributeName: createdBy
          AttributeType: S
        - AttributeName: category
          AttributeType: S
        - AttributeName: startDateTime
          AttributeType: S
      KeySchema:
        - AttributeName: eventId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserEventsIndex
          KeySchema:
            - AttributeName: createdBy
              KeyType: HASH
            - AttributeName: startDateTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
            - AttributeName: startDateTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: EventSync

  # OpenSearch Serverless Collection
  OpenSearchCollection:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Name: !Sub 'eventsync-${Environment}'
      Type: SEARCH
      Description: 'EventSync search collection for semantic search'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: EventSync

  # OpenSearch Security Policy
  OpenSearchSecurityPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: !Sub 'eventsync-${Environment}-security-policy'
      Type: encryption
      Policy: !Sub |
        {
          "Rules": [
            {
              "ResourceType": "collection",
              "Resource": ["collection/eventsync-${Environment}"]
            }
          ],
          "AWSOwnedKey": true
        }

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'eventsync-${Environment}'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 4
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: EventSync

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'eventsync-${Environment}-alb'
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: !Ref SubnetIds
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: EventSync

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'eventsync-${Environment}-alb-sg'
      GroupDescription: Security group for EventSync ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: EventSync

  # ECS Security Group
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'eventsync-${Environment}-ecs-sg'
      GroupDescription: Security group for EventSync ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3001
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: EventSync

  # CloudWatch Log Groups
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/eventsync-${Environment}-backend'
      RetentionInDays: 30

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/eventsync-${Environment}-frontend'
      RetentionInDays: 30

  # IAM Role for ECS Tasks
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'eventsync-${Environment}-ecs-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: EventSyncTaskPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt UsersTable.Arn
                  - !GetAtt EventsTable.Arn
                  - !Sub '${UsersTable.Arn}/index/*'
                  - !Sub '${EventsTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:Retrieve
                  - bedrock:RetrieveAndGenerate
                Resource: '*'
              - Effect: Allow
                Action:
                  - aoss:APIAccessAll
                Resource: !GetAtt OpenSearchCollection.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

Outputs:
  UsersTableName:
    Description: Name of the Users DynamoDB table
    Value: !Ref UsersTable
    Export:
      Name: !Sub '${AWS::StackName}-UsersTable'

  EventsTableName:
    Description: Name of the Events DynamoDB table
    Value: !Ref EventsTable
    Export:
      Name: !Sub '${AWS::StackName}-EventsTable'

  OpenSearchCollectionEndpoint:
    Description: OpenSearch collection endpoint
    Value: !GetAtt OpenSearchCollection.CollectionEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-OpenSearchEndpoint'

  ECSClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ECSCluster'

  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS'

  ECSTaskRoleArn:
    Description: ARN of the ECS task role
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ECSTaskRole'