{"ast":null,"code":"import{apiClient}from'./apiClient';/**\n * Calendar service for frontend calendar integration\n */class CalendarService{/**\n   * Get calendar links for all supported calendar providers\n   * @param eventId - Event ID to generate links for\n   * @returns Promise with calendar links\n   */async getCalendarLinks(eventId){try{const response=await apiClient.get(\"/events/\".concat(eventId,\"/calendar/link\"));if(!response.data.success){throw new Error(response.data.message||'Failed to generate calendar links');}return response.data.data;}catch(error){var _error$response,_error$response$data;console.error('Error fetching calendar links:',error);throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to generate calendar links');}}/**\n   * Get calendar link for a specific provider\n   * @param eventId - Event ID\n   * @param provider - Calendar provider (google, outlook, yahoo, apple, ics)\n   * @returns Promise with calendar link\n   */async getCalendarLink(eventId,provider){try{const response=await apiClient.get(\"/events/\".concat(eventId,\"/calendar/link?type=\").concat(provider));if(!response.data.success){throw new Error(response.data.message||'Failed to generate calendar link');}return response.data.data.link;}catch(error){var _error$response2,_error$response2$data;console.error('Error fetching calendar link:',error);throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to generate calendar link');}}/**\n   * Download .ics calendar file for an event\n   * @param eventId - Event ID\n   * @param eventTitle - Event title for filename\n   */async downloadICSFile(eventId,eventTitle){try{const response=await fetch(\"\".concat(process.env.REACT_APP_API_BASE_URL||'http://localhost:3001/api',\"/events/\").concat(eventId,\"/calendar\"),{method:'GET',headers:{'Accept':'text/calendar'}});if(!response.ok){throw new Error('Failed to download calendar file');}const blob=await response.blob();const url=window.URL.createObjectURL(blob);// Create download link\nconst link=document.createElement('a');link.href=url;// Generate filename\nconst sanitizedTitle=eventTitle.replace(/[^a-zA-Z0-9\\s-]/g,'').replace(/\\s+/g,'-').toLowerCase().substring(0,50);const dateStr=new Date().toISOString().split('T')[0];link.download=\"\".concat(sanitizedTitle,\"-\").concat(dateStr,\".ics\");// Trigger download\ndocument.body.appendChild(link);link.click();document.body.removeChild(link);// Clean up\nwindow.URL.revokeObjectURL(url);}catch(error){console.error('Error downloading .ics file:',error);throw new Error('Failed to download calendar file');}}/**\n   * Open calendar provider in new tab\n   * @param url - Calendar provider URL\n   */openCalendarProvider(url){window.open(url,'_blank','noopener,noreferrer');}/**\n   * Check if calendar integration is supported\n   * @returns boolean indicating support\n   */isCalendarIntegrationSupported(){// Check if we're in a browser environment\nreturn typeof window!=='undefined'&&typeof document!=='undefined';}/**\n   * Get user's preferred calendar provider from localStorage\n   * @returns string with preferred provider or null\n   */getPreferredCalendarProvider(){if(!this.isCalendarIntegrationSupported())return null;try{return localStorage.getItem('preferredCalendarProvider');}catch(error){console.warn('Failed to get preferred calendar provider from localStorage');return null;}}/**\n   * Set user's preferred calendar provider in localStorage\n   * @param provider - Calendar provider to set as preferred\n   */setPreferredCalendarProvider(provider){if(!this.isCalendarIntegrationSupported())return;try{localStorage.setItem('preferredCalendarProvider',provider);}catch(error){console.warn('Failed to save preferred calendar provider to localStorage');}}/**\n   * Quick add to preferred calendar provider\n   * @param eventId - Event ID\n   * @returns Promise that resolves when calendar action is complete\n   */async quickAddToCalendar(eventId){const preferredProvider=this.getPreferredCalendarProvider();if(!preferredProvider){throw new Error('No preferred calendar provider set');}try{const link=await this.getCalendarLink(eventId,preferredProvider);if(preferredProvider==='ics'||preferredProvider==='apple'){// For .ics files, trigger download\nconst response=await fetch(link);const blob=await response.blob();const url=window.URL.createObjectURL(blob);const downloadLink=document.createElement('a');downloadLink.href=url;downloadLink.download=\"event-\".concat(eventId,\".ics\");document.body.appendChild(downloadLink);downloadLink.click();document.body.removeChild(downloadLink);window.URL.revokeObjectURL(url);}else{// For web-based calendars, open in new tab\nthis.openCalendarProvider(link);}}catch(error){console.error('Error in quick add to calendar:',error);throw new Error('Failed to add event to calendar');}}}// Export singleton instance\nexport const calendarService=new CalendarService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}