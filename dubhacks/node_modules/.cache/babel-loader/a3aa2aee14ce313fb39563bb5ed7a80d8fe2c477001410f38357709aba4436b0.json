{"ast":null,"code":"import { InfiniteQueryObserver } from '@tanstack/query-core';\nimport { useBaseQuery } from './useBaseQuery.mjs';\nfunction useSuspenseInfiniteQuery(options) {\n  return useBaseQuery({\n    ...options,\n    enabled: true,\n    suspense: true,\n    useErrorBoundary: true,\n    networkMode: 'always'\n  }, InfiniteQueryObserver);\n}\nexport { useSuspenseInfiniteQuery };","map":{"version":3,"names":["useSuspenseInfiniteQuery","options","useBaseQuery","enabled","suspense","useErrorBoundary","networkMode","InfiniteQueryObserver"],"sources":["/Users/bhuvangundela/Desktop/Projects/dubhacks-au25/dubhacks/node_modules/@tanstack/react-query/src/useSuspenseInfiniteQuery.ts"],"sourcesContent":["import { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  InfiniteQueryObserverSuccessResult,\n  OmitKeyof,\n  QueryKey,\n  QueryObserver,\n  WithRequired,\n} from '@tanstack/query-core'\nimport type {\n  UseInfiniteQueryOptions,\n  UseSuspenseInfiniteQueryResult,\n} from './types'\n\nexport type UseSuspenseInfiniteQueryOptions<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = WithRequired<\n  OmitKeyof<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    | 'suspense'\n    | 'useErrorBoundary'\n    | 'enabled'\n    | 'placeholderData'\n    | 'networkMode'\n    | 'initialData'\n  >,\n  'queryKey'\n>\n\nexport function useSuspenseInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseSuspenseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey\n  >,\n): UseSuspenseInfiniteQueryResult<TData, TError> {\n  return useBaseQuery(\n    {\n      ...options,\n      enabled: true,\n      suspense: true,\n      useErrorBoundary: true,\n      networkMode: 'always',\n    },\n    InfiniteQueryObserver as typeof QueryObserver,\n  ) as InfiniteQueryObserverSuccessResult<TData, TError>\n}\n"],"mappings":";;AAsCO,SAASA,wBAATA,CAMLC,OANK,EAY0C;EAC/C,OAAOC,YAAY,CACjB;IACE,GAAGD,OADL;IAEEE,OAAO,EAAE,IAFX;IAGEC,QAAQ,EAAE,IAHZ;IAIEC,gBAAgB,EAAE,IAJpB;IAKEC,WAAW,EAAE;GANE,EAQjBC,qBARiB,CAAnB;AAUD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}