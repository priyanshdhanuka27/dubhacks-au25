{"ast":null,"code":"import { apiClient } from './apiClient';\nclass UserService {\n  /**\r\n   * Get user profile\r\n   */\n  async getUserProfile(userId) {\n    const response = await apiClient.get(`/users/${userId}/profile`);\n    if (!response.data.success || !response.data.data) {\n      throw new Error(response.data.error || 'Failed to fetch user profile');\n    }\n    return response.data.data;\n  }\n\n  /**\r\n   * Update user profile\r\n   */\n  async updateUserProfile(userId, profileData) {\n    const response = await apiClient.put(`/users/${userId}/profile`, profileData);\n    if (!response.data.success || !response.data.data) {\n      throw new Error(response.data.error || 'Failed to update user profile');\n    }\n    return response.data.data;\n  }\n\n  /**\r\n   * Get user preferences\r\n   */\n  async getUserPreferences(userId) {\n    const response = await apiClient.get(`/users/${userId}/preferences`);\n    if (!response.data.success || !response.data.data) {\n      throw new Error(response.data.error || 'Failed to fetch user preferences');\n    }\n    return response.data.data;\n  }\n\n  /**\r\n   * Update user preferences\r\n   */\n  async updateUserPreferences(userId, preferences) {\n    const response = await apiClient.put(`/users/${userId}/preferences`, preferences);\n    if (!response.data.success || !response.data.data) {\n      throw new Error(response.data.error || 'Failed to update user preferences');\n    }\n    return response.data.data;\n  }\n\n  /**\r\n   * Save an event\r\n   */\n  async saveEvent(userId, eventId) {\n    const response = await apiClient.post(`/users/${userId}/saved-events/${eventId}`);\n    if (!response.data.success) {\n      throw new Error(response.data.error || 'Failed to save event');\n    }\n  }\n\n  /**\r\n   * Remove a saved event\r\n   */\n  async unsaveEvent(userId, eventId) {\n    const response = await apiClient.delete(`/users/${userId}/saved-events/${eventId}`);\n    if (!response.data.success) {\n      throw new Error(response.data.error || 'Failed to remove saved event');\n    }\n  }\n\n  /**\r\n   * Get saved events\r\n   */\n  async getSavedEvents(userId) {\n    const response = await apiClient.get(`/users/${userId}/saved-events`);\n    if (!response.data.success || !response.data.data) {\n      throw new Error(response.data.error || 'Failed to fetch saved events');\n    }\n\n    // Convert date strings to Date objects\n    return response.data.data.map(event => ({\n      ...event,\n      startDateTime: new Date(event.startDateTime),\n      endDateTime: new Date(event.endDateTime),\n      createdAt: new Date(event.createdAt),\n      updatedAt: new Date(event.updatedAt),\n      source: {\n        ...event.source,\n        crawlDate: event.source.crawlDate ? new Date(event.source.crawlDate) : undefined\n      }\n    }));\n  }\n\n  /**\r\n   * Get personalized recommendations\r\n   */\n  async getPersonalizedRecommendations(userId, limit = 20) {\n    const response = await apiClient.get(`/users/${userId}/recommendations?limit=${limit}`);\n    if (!response.data.success || !response.data.data) {\n      throw new Error(response.data.error || 'Failed to fetch recommendations');\n    }\n\n    // Convert date strings to Date objects\n    return response.data.data.map(event => ({\n      ...event,\n      startDateTime: new Date(event.startDateTime),\n      endDateTime: new Date(event.endDateTime),\n      createdAt: new Date(event.createdAt),\n      updatedAt: new Date(event.updatedAt),\n      source: {\n        ...event.source,\n        crawlDate: event.source.crawlDate ? new Date(event.source.crawlDate) : undefined\n      }\n    }));\n  }\n\n  /**\r\n   * Get complete user profile with statistics\r\n   */\n  async getCompleteUserProfile(userId) {\n    const response = await apiClient.get(`/users/${userId}/complete-profile`);\n    if (!response.data.success || !response.data.data) {\n      throw new Error(response.data.error || 'Failed to fetch complete user profile');\n    }\n    return response.data.data;\n  }\n\n  /**\r\n   * Update user interests based on activity\r\n   */\n  async updateUserInterestsFromActivity(userId) {\n    const response = await apiClient.post(`/users/${userId}/update-interests`);\n    if (!response.data.success) {\n      throw new Error(response.data.error || 'Failed to update user interests');\n    }\n  }\n\n  /**\r\n   * Check if an event is saved by the user\r\n   */\n  async isEventSaved(userId, eventId) {\n    try {\n      const savedEvents = await this.getSavedEvents(userId);\n      return savedEvents.some(event => event.eventId === eventId);\n    } catch (error) {\n      console.error('Error checking if event is saved:', error);\n      return false;\n    }\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["apiClient","UserService","getUserProfile","userId","response","get","data","success","Error","error","updateUserProfile","profileData","put","getUserPreferences","updateUserPreferences","preferences","saveEvent","eventId","post","unsaveEvent","delete","getSavedEvents","map","event","startDateTime","Date","endDateTime","createdAt","updatedAt","source","crawlDate","undefined","getPersonalizedRecommendations","limit","getCompleteUserProfile","updateUserInterestsFromActivity","isEventSaved","savedEvents","some","console","userService"],"sources":["C:/Users/priya/OneDrive - UW/Hackathons/auDubhacks25/dubhacks/src/services/userService.ts"],"sourcesContent":["import { apiClient } from './apiClient';\r\nimport { UserProfile, UserPreferences, Event, ApiResponse } from '../types';\r\n\r\nexport interface CompleteUserProfile {\r\n  profile: UserProfile;\r\n  preferences: UserPreferences;\r\n  savedEventsCount: number;\r\n  recentActivity: {\r\n    lastLogin?: Date;\r\n    eventsCreated: number;\r\n    eventsSaved: number;\r\n  };\r\n}\r\n\r\nclass UserService {\r\n  /**\r\n   * Get user profile\r\n   */\r\n  async getUserProfile(userId: string): Promise<UserProfile> {\r\n    const response = await apiClient.get<ApiResponse<UserProfile>>(`/users/${userId}/profile`);\r\n    \r\n    if (!response.data.success || !response.data.data) {\r\n      throw new Error(response.data.error || 'Failed to fetch user profile');\r\n    }\r\n    \r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * Update user profile\r\n   */\r\n  async updateUserProfile(userId: string, profileData: Partial<UserProfile>): Promise<UserProfile> {\r\n    const response = await apiClient.put<ApiResponse<UserProfile>>(`/users/${userId}/profile`, profileData);\r\n    \r\n    if (!response.data.success || !response.data.data) {\r\n      throw new Error(response.data.error || 'Failed to update user profile');\r\n    }\r\n    \r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * Get user preferences\r\n   */\r\n  async getUserPreferences(userId: string): Promise<UserPreferences> {\r\n    const response = await apiClient.get<ApiResponse<UserPreferences>>(`/users/${userId}/preferences`);\r\n    \r\n    if (!response.data.success || !response.data.data) {\r\n      throw new Error(response.data.error || 'Failed to fetch user preferences');\r\n    }\r\n    \r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * Update user preferences\r\n   */\r\n  async updateUserPreferences(userId: string, preferences: Partial<UserPreferences>): Promise<UserPreferences> {\r\n    const response = await apiClient.put<ApiResponse<UserPreferences>>(`/users/${userId}/preferences`, preferences);\r\n    \r\n    if (!response.data.success || !response.data.data) {\r\n      throw new Error(response.data.error || 'Failed to update user preferences');\r\n    }\r\n    \r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * Save an event\r\n   */\r\n  async saveEvent(userId: string, eventId: string): Promise<void> {\r\n    const response = await apiClient.post<ApiResponse<{ eventId: string }>>(`/users/${userId}/saved-events/${eventId}`);\r\n    \r\n    if (!response.data.success) {\r\n      throw new Error(response.data.error || 'Failed to save event');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a saved event\r\n   */\r\n  async unsaveEvent(userId: string, eventId: string): Promise<void> {\r\n    const response = await apiClient.delete<ApiResponse<{ eventId: string }>>(`/users/${userId}/saved-events/${eventId}`);\r\n    \r\n    if (!response.data.success) {\r\n      throw new Error(response.data.error || 'Failed to remove saved event');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get saved events\r\n   */\r\n  async getSavedEvents(userId: string): Promise<Event[]> {\r\n    const response = await apiClient.get<ApiResponse<Event[]>>(`/users/${userId}/saved-events`);\r\n    \r\n    if (!response.data.success || !response.data.data) {\r\n      throw new Error(response.data.error || 'Failed to fetch saved events');\r\n    }\r\n    \r\n    // Convert date strings to Date objects\r\n    return response.data.data.map(event => ({\r\n      ...event,\r\n      startDateTime: new Date(event.startDateTime),\r\n      endDateTime: new Date(event.endDateTime),\r\n      createdAt: new Date(event.createdAt),\r\n      updatedAt: new Date(event.updatedAt),\r\n      source: {\r\n        ...event.source,\r\n        crawlDate: event.source.crawlDate ? new Date(event.source.crawlDate) : undefined,\r\n      },\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get personalized recommendations\r\n   */\r\n  async getPersonalizedRecommendations(userId: string, limit: number = 20): Promise<Event[]> {\r\n    const response = await apiClient.get<ApiResponse<Event[]>>(`/users/${userId}/recommendations?limit=${limit}`);\r\n    \r\n    if (!response.data.success || !response.data.data) {\r\n      throw new Error(response.data.error || 'Failed to fetch recommendations');\r\n    }\r\n    \r\n    // Convert date strings to Date objects\r\n    return response.data.data.map(event => ({\r\n      ...event,\r\n      startDateTime: new Date(event.startDateTime),\r\n      endDateTime: new Date(event.endDateTime),\r\n      createdAt: new Date(event.createdAt),\r\n      updatedAt: new Date(event.updatedAt),\r\n      source: {\r\n        ...event.source,\r\n        crawlDate: event.source.crawlDate ? new Date(event.source.crawlDate) : undefined,\r\n      },\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get complete user profile with statistics\r\n   */\r\n  async getCompleteUserProfile(userId: string): Promise<CompleteUserProfile> {\r\n    const response = await apiClient.get<ApiResponse<CompleteUserProfile>>(`/users/${userId}/complete-profile`);\r\n    \r\n    if (!response.data.success || !response.data.data) {\r\n      throw new Error(response.data.error || 'Failed to fetch complete user profile');\r\n    }\r\n    \r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * Update user interests based on activity\r\n   */\r\n  async updateUserInterestsFromActivity(userId: string): Promise<void> {\r\n    const response = await apiClient.post<ApiResponse<null>>(`/users/${userId}/update-interests`);\r\n    \r\n    if (!response.data.success) {\r\n      throw new Error(response.data.error || 'Failed to update user interests');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if an event is saved by the user\r\n   */\r\n  async isEventSaved(userId: string, eventId: string): Promise<boolean> {\r\n    try {\r\n      const savedEvents = await this.getSavedEvents(userId);\r\n      return savedEvents.some(event => event.eventId === eventId);\r\n    } catch (error) {\r\n      console.error('Error checking if event is saved:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport const userService = new UserService();"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AAcvC,MAAMC,WAAW,CAAC;EAChB;AACF;AACA;EACE,MAAMC,cAAcA,CAACC,MAAc,EAAwB;IACzD,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACK,GAAG,CAA2B,UAAUF,MAAM,UAAU,CAAC;IAE1F,IAAI,CAACC,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAI,CAACH,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;MACjD,MAAM,IAAIE,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,KAAK,IAAI,8BAA8B,CAAC;IACxE;IAEA,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,MAAMI,iBAAiBA,CAACP,MAAc,EAAEQ,WAAiC,EAAwB;IAC/F,MAAMP,QAAQ,GAAG,MAAMJ,SAAS,CAACY,GAAG,CAA2B,UAAUT,MAAM,UAAU,EAAEQ,WAAW,CAAC;IAEvG,IAAI,CAACP,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAI,CAACH,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;MACjD,MAAM,IAAIE,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,KAAK,IAAI,+BAA+B,CAAC;IACzE;IAEA,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,MAAMO,kBAAkBA,CAACV,MAAc,EAA4B;IACjE,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACK,GAAG,CAA+B,UAAUF,MAAM,cAAc,CAAC;IAElG,IAAI,CAACC,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAI,CAACH,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;MACjD,MAAM,IAAIE,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,KAAK,IAAI,kCAAkC,CAAC;IAC5E;IAEA,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,MAAMQ,qBAAqBA,CAACX,MAAc,EAAEY,WAAqC,EAA4B;IAC3G,MAAMX,QAAQ,GAAG,MAAMJ,SAAS,CAACY,GAAG,CAA+B,UAAUT,MAAM,cAAc,EAAEY,WAAW,CAAC;IAE/G,IAAI,CAACX,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAI,CAACH,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;MACjD,MAAM,IAAIE,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,KAAK,IAAI,mCAAmC,CAAC;IAC7E;IAEA,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,MAAMU,SAASA,CAACb,MAAc,EAAEc,OAAe,EAAiB;IAC9D,MAAMb,QAAQ,GAAG,MAAMJ,SAAS,CAACkB,IAAI,CAAmC,UAAUf,MAAM,iBAAiBc,OAAO,EAAE,CAAC;IAEnH,IAAI,CAACb,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MAC1B,MAAM,IAAIC,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,KAAK,IAAI,sBAAsB,CAAC;IAChE;EACF;;EAEA;AACF;AACA;EACE,MAAMU,WAAWA,CAAChB,MAAc,EAAEc,OAAe,EAAiB;IAChE,MAAMb,QAAQ,GAAG,MAAMJ,SAAS,CAACoB,MAAM,CAAmC,UAAUjB,MAAM,iBAAiBc,OAAO,EAAE,CAAC;IAErH,IAAI,CAACb,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MAC1B,MAAM,IAAIC,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,KAAK,IAAI,8BAA8B,CAAC;IACxE;EACF;;EAEA;AACF;AACA;EACE,MAAMY,cAAcA,CAAClB,MAAc,EAAoB;IACrD,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACK,GAAG,CAAuB,UAAUF,MAAM,eAAe,CAAC;IAE3F,IAAI,CAACC,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAI,CAACH,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;MACjD,MAAM,IAAIE,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,KAAK,IAAI,8BAA8B,CAAC;IACxE;;IAEA;IACA,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACgB,GAAG,CAACC,KAAK,KAAK;MACtC,GAAGA,KAAK;MACRC,aAAa,EAAE,IAAIC,IAAI,CAACF,KAAK,CAACC,aAAa,CAAC;MAC5CE,WAAW,EAAE,IAAID,IAAI,CAACF,KAAK,CAACG,WAAW,CAAC;MACxCC,SAAS,EAAE,IAAIF,IAAI,CAACF,KAAK,CAACI,SAAS,CAAC;MACpCC,SAAS,EAAE,IAAIH,IAAI,CAACF,KAAK,CAACK,SAAS,CAAC;MACpCC,MAAM,EAAE;QACN,GAAGN,KAAK,CAACM,MAAM;QACfC,SAAS,EAAEP,KAAK,CAACM,MAAM,CAACC,SAAS,GAAG,IAAIL,IAAI,CAACF,KAAK,CAACM,MAAM,CAACC,SAAS,CAAC,GAAGC;MACzE;IACF,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;EACE,MAAMC,8BAA8BA,CAAC7B,MAAc,EAAE8B,KAAa,GAAG,EAAE,EAAoB;IACzF,MAAM7B,QAAQ,GAAG,MAAMJ,SAAS,CAACK,GAAG,CAAuB,UAAUF,MAAM,0BAA0B8B,KAAK,EAAE,CAAC;IAE7G,IAAI,CAAC7B,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAI,CAACH,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;MACjD,MAAM,IAAIE,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,KAAK,IAAI,iCAAiC,CAAC;IAC3E;;IAEA;IACA,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACgB,GAAG,CAACC,KAAK,KAAK;MACtC,GAAGA,KAAK;MACRC,aAAa,EAAE,IAAIC,IAAI,CAACF,KAAK,CAACC,aAAa,CAAC;MAC5CE,WAAW,EAAE,IAAID,IAAI,CAACF,KAAK,CAACG,WAAW,CAAC;MACxCC,SAAS,EAAE,IAAIF,IAAI,CAACF,KAAK,CAACI,SAAS,CAAC;MACpCC,SAAS,EAAE,IAAIH,IAAI,CAACF,KAAK,CAACK,SAAS,CAAC;MACpCC,MAAM,EAAE;QACN,GAAGN,KAAK,CAACM,MAAM;QACfC,SAAS,EAAEP,KAAK,CAACM,MAAM,CAACC,SAAS,GAAG,IAAIL,IAAI,CAACF,KAAK,CAACM,MAAM,CAACC,SAAS,CAAC,GAAGC;MACzE;IACF,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;EACE,MAAMG,sBAAsBA,CAAC/B,MAAc,EAAgC;IACzE,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACK,GAAG,CAAmC,UAAUF,MAAM,mBAAmB,CAAC;IAE3G,IAAI,CAACC,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAI,CAACH,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;MACjD,MAAM,IAAIE,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,KAAK,IAAI,uCAAuC,CAAC;IACjF;IAEA,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,MAAM6B,+BAA+BA,CAAChC,MAAc,EAAiB;IACnE,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACkB,IAAI,CAAoB,UAAUf,MAAM,mBAAmB,CAAC;IAE7F,IAAI,CAACC,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MAC1B,MAAM,IAAIC,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,KAAK,IAAI,iCAAiC,CAAC;IAC3E;EACF;;EAEA;AACF;AACA;EACE,MAAM2B,YAAYA,CAACjC,MAAc,EAAEc,OAAe,EAAoB;IACpE,IAAI;MACF,MAAMoB,WAAW,GAAG,MAAM,IAAI,CAAChB,cAAc,CAAClB,MAAM,CAAC;MACrD,OAAOkC,WAAW,CAACC,IAAI,CAACf,KAAK,IAAIA,KAAK,CAACN,OAAO,KAAKA,OAAO,CAAC;IAC7D,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd8B,OAAO,CAAC9B,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,OAAO,KAAK;IACd;EACF;AACF;AAEA,OAAO,MAAM+B,WAAW,GAAG,IAAIvC,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}