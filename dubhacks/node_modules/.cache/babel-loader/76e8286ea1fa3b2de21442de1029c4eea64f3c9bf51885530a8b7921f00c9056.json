{"ast":null,"code":"import axios from'axios';import{config}from'../config';class AuthService{constructor(){this.baseURL=void 0;this.baseURL=config.api.baseUrl;}/**\n   * Register a new user\n   */async register(userData){try{const response=await axios.post(\"\".concat(this.baseURL,\"/auth/register\"),{email:userData.email,password:userData.password,firstName:userData.firstName,lastName:userData.lastName,timezone:userData.timezone},{timeout:config.api.timeout,headers:{'Content-Type':'application/json'}});if(response.data.success&&response.data.data){const authResult=response.data.data;// Store tokens and user data\nif(authResult.token){this.storeAuthData(authResult.token,authResult.user);}return authResult;}return{success:false,error:response.data.error||'Registration failed'};}catch(error){var _error$response,_error$response$data;console.error('Registration error:',error);if((_error$response=error.response)!==null&&_error$response!==void 0&&(_error$response$data=_error$response.data)!==null&&_error$response$data!==void 0&&_error$response$data.message){return{success:false,error:error.response.data.message};}return{success:false,error:'Network error. Please check your connection and try again.'};}}/**\n   * Login user with credentials\n   */async login(credentials){try{const response=await axios.post(\"\".concat(this.baseURL,\"/auth/login\"),credentials,{timeout:config.api.timeout,headers:{'Content-Type':'application/json'}});if(response.data.success&&response.data.data){const authResult=response.data.data;// Store tokens and user data\nif(authResult.token){this.storeAuthData(authResult.token,authResult.user);}return authResult;}return{success:false,error:response.data.error||'Login failed'};}catch(error){var _error$response2,_error$response2$data;console.error('Login error:',error);if((_error$response2=error.response)!==null&&_error$response2!==void 0&&(_error$response2$data=_error$response2.data)!==null&&_error$response2$data!==void 0&&_error$response2$data.message){return{success:false,error:error.response.data.message};}return{success:false,error:'Network error. Please check your connection and try again.'};}}/**\n   * Logout user\n   */async logout(){try{const token=this.getStoredToken();if(token){// Call logout endpoint\nawait axios.delete(\"\".concat(this.baseURL,\"/auth/logout\"),{headers:{'Authorization':\"Bearer \".concat(token)},timeout:config.api.timeout});}}catch(error){console.error('Logout API error:',error);// Continue with local logout even if API call fails\n}finally{// Always clear local storage\nthis.clearAuthData();}}/**\n   * Refresh access token\n   */async refreshToken(){try{const refreshToken=this.getStoredRefreshToken();if(!refreshToken){return{success:false,error:'No refresh token available'};}const response=await axios.post(\"\".concat(this.baseURL,\"/auth/refresh\"),{refreshToken},{timeout:config.api.timeout,headers:{'Content-Type':'application/json'}});if(response.data.success&&response.data.data){const authResult=response.data.data;// Store new tokens and user data\nif(authResult.token){this.storeAuthData(authResult.token,authResult.user);}return authResult;}// If refresh fails, clear stored data\nthis.clearAuthData();return{success:false,error:response.data.error||'Token refresh failed'};}catch(error){console.error('Token refresh error:',error);// Clear stored data on refresh failure\nthis.clearAuthData();return{success:false,error:'Session expired. Please log in again.'};}}/**\n   * Get current user from storage\n   */getCurrentUser(){try{const userData=localStorage.getItem(config.auth.userKey);return userData?JSON.parse(userData):null;}catch(error){console.error('Error getting current user:',error);return null;}}/**\n   * Get stored access token\n   */getStoredToken(){return localStorage.getItem(config.auth.tokenKey);}/**\n   * Get stored refresh token\n   */getStoredRefreshToken(){return localStorage.getItem(config.auth.refreshTokenKey);}/**\n   * Check if user is authenticated\n   */isAuthenticated(){const token=this.getStoredToken();const user=this.getCurrentUser();return!!(token&&user);}/**\n   * Store authentication data in localStorage\n   */storeAuthData(authToken,user){try{localStorage.setItem(config.auth.tokenKey,authToken.token);localStorage.setItem(config.auth.refreshTokenKey,authToken.refreshToken);if(user){localStorage.setItem(config.auth.userKey,JSON.stringify(user));}}catch(error){console.error('Error storing auth data:',error);}}/**\n   * Clear authentication data from localStorage\n   */clearAuthData(){try{localStorage.removeItem(config.auth.tokenKey);localStorage.removeItem(config.auth.refreshTokenKey);localStorage.removeItem(config.auth.userKey);}catch(error){console.error('Error clearing auth data:',error);}}/**\n   * Validate registration data\n   */validateRegistrationData(data){const errors=[];// Email validation\nconst emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;if(!data.email||!emailRegex.test(data.email)){errors.push('Please enter a valid email address');}// Password validation\nif(!data.password||data.password.length<8){errors.push('Password must be at least 8 characters long');}if(!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(data.password)){errors.push('Password must contain at least one uppercase letter, one lowercase letter, and one number');}// Confirm password validation\nif(data.password!==data.confirmPassword){errors.push('Passwords do not match');}// Name validation\nif(!data.firstName||data.firstName.trim().length<2){errors.push('First name must be at least 2 characters long');}if(!data.lastName||data.lastName.trim().length<2){errors.push('Last name must be at least 2 characters long');}// Timezone validation\nif(!data.timezone){errors.push('Please select a timezone');}return{isValid:errors.length===0,errors};}/**\n   * Validate login credentials\n   */validateLoginCredentials(credentials){const errors=[];if(!credentials.email){errors.push('Email is required');}if(!credentials.password){errors.push('Password is required');}return{isValid:errors.length===0,errors};}}export const authService=new AuthService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}