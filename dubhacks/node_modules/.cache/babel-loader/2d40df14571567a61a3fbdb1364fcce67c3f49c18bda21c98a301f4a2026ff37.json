{"ast":null,"code":"import axios from'axios';import{config}from'../config';import{authService}from'./authService';class ApiClient{constructor(){this.client=void 0;this.client=axios.create({baseURL:config.api.baseUrl,timeout:config.api.timeout,headers:{'Content-Type':'application/json'}});this.setupInterceptors();}setupInterceptors(){// Request interceptor to add auth token\nthis.client.interceptors.request.use(// Use a loose type here because Axios internal request config types\n// can differ between versions of axios. Casting to any keeps this\n// compatible across environments.\ncfg=>{const token=authService.getStoredToken();if(token&&cfg.headers){cfg.headers.Authorization=\"Bearer \".concat(token);}return cfg;},error=>{return Promise.reject(error);});// Response interceptor to handle token refresh\nthis.client.interceptors.response.use(response=>{return response;},async error=>{var _error$response;const originalRequest=error.config;// If we get a 401 and haven't already tried to refresh\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!originalRequest._retry){originalRequest._retry=true;try{// Attempt to refresh the token\nconst refreshResult=await authService.refreshToken();if(refreshResult.success&&refreshResult.token){// Update the authorization header and retry the request\noriginalRequest.headers.Authorization=\"Bearer \".concat(refreshResult.token.token);return this.client(originalRequest);}}catch(refreshError){// Refresh failed, redirect to login\nconsole.error('Token refresh failed:',refreshError);// Clear auth data and redirect to login\nawait authService.logout();window.location.href='/auth';return Promise.reject(refreshError);}}return Promise.reject(error);});}// HTTP methods\nasync get(url,config){return this.client.get(url,config);}async post(url,data,config){return this.client.post(url,data,config);}async put(url,data,config){return this.client.put(url,data,config);}async patch(url,data,config){return this.client.patch(url,data,config);}async delete(url,config){return this.client.delete(url,config);}// Get the underlying axios instance if needed\ngetInstance(){return this.client;}}export const apiClient=new ApiClient();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}