{"ast":null,"code":"var _jsxFileName = \"/Users/rishivora/Documents/Coding/Hackathons/dubhacks-au25/dubhacks/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services/authService';\n\n// Auth Actions\n\n// Auth Context Interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Initial state\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  token: null,\n  loading: true,\n  // Start with loading true to check stored auth\n  error: null\n};\n\n// Auth reducer\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'AUTH_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'AUTH_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case 'AUTH_FAILURE':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: null\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// Create context\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// Auth Provider Props\n\n// Auth Provider Component\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check for stored authentication on mount\n  useEffect(() => {\n    const checkStoredAuth = () => {\n      try {\n        const token = authService.getStoredToken();\n        const user = authService.getCurrentUser();\n        if (token && user) {\n          dispatch({\n            type: 'AUTH_SUCCESS',\n            payload: {\n              user,\n              token\n            }\n          });\n        } else {\n          dispatch({\n            type: 'SET_LOADING',\n            payload: false\n          });\n        }\n      } catch (error) {\n        console.error('Error checking stored auth:', error);\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    };\n    checkStoredAuth();\n  }, []);\n\n  // Login function\n  const login = async credentials => {\n    dispatch({\n      type: 'AUTH_START'\n    });\n    try {\n      // Validate credentials\n      const validation = authService.validateLoginCredentials(credentials);\n      if (!validation.isValid) {\n        const error = validation.errors.join(', ');\n        dispatch({\n          type: 'AUTH_FAILURE',\n          payload: error\n        });\n        return {\n          success: false,\n          error\n        };\n      }\n\n      // Attempt login\n      const result = await authService.login(credentials);\n      if (result.success && result.user && result.token) {\n        dispatch({\n          type: 'AUTH_SUCCESS',\n          payload: {\n            user: result.user,\n            token: result.token.token\n          }\n        });\n      } else {\n        dispatch({\n          type: 'AUTH_FAILURE',\n          payload: result.error || 'Login failed'\n        });\n      }\n      return result;\n    } catch (error) {\n      const errorMessage = 'An unexpected error occurred during login';\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    dispatch({\n      type: 'AUTH_START'\n    });\n    try {\n      // Validate registration data\n      const validation = authService.validateRegistrationData(userData);\n      if (!validation.isValid) {\n        const error = validation.errors.join(', ');\n        dispatch({\n          type: 'AUTH_FAILURE',\n          payload: error\n        });\n        return {\n          success: false,\n          error\n        };\n      }\n\n      // Attempt registration\n      const result = await authService.register(userData);\n      if (result.success && result.user && result.token) {\n        dispatch({\n          type: 'AUTH_SUCCESS',\n          payload: {\n            user: result.user,\n            token: result.token.token\n          }\n        });\n      } else {\n        dispatch({\n          type: 'AUTH_FAILURE',\n          payload: result.error || 'Registration failed'\n        });\n      }\n      return result;\n    } catch (error) {\n      const errorMessage = 'An unexpected error occurred during registration';\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      dispatch({\n        type: 'LOGOUT'\n      });\n    }\n  };\n\n  // Refresh token function\n  const refreshToken = async () => {\n    try {\n      const result = await authService.refreshToken();\n      if (result.success && result.user && result.token) {\n        dispatch({\n          type: 'AUTH_SUCCESS',\n          payload: {\n            user: result.user,\n            token: result.token.token\n          }\n        });\n      } else {\n        dispatch({\n          type: 'LOGOUT'\n        });\n      }\n      return result;\n    } catch (error) {\n      dispatch({\n        type: 'LOGOUT'\n      });\n      return {\n        success: false,\n        error: 'Token refresh failed'\n      };\n    }\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n\n  // Context value\n  const contextValue = {\n    state,\n    login,\n    register,\n    logout,\n    refreshToken,\n    clearError,\n    isAuthenticated: state.isAuthenticated\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom hook to use auth context\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authService","jsxDEV","_jsxDEV","initialState","isAuthenticated","user","token","loading","error","authReducer","state","action","type","payload","AuthContext","undefined","AuthProvider","children","_s","dispatch","checkStoredAuth","getStoredToken","getCurrentUser","console","login","credentials","validation","validateLoginCredentials","isValid","errors","join","success","result","errorMessage","register","userData","validateRegistrationData","logout","refreshToken","clearError","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/rishivora/Documents/Coding/Hackathons/dubhacks-au25/dubhacks/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\nimport { authService, AuthResult } from '../services/authService';\nimport { User, LoginCredentials, RegisterData, AuthState } from '../types';\n\n// Auth Actions\ntype AuthAction =\n  | { type: 'AUTH_START' }\n  | { type: 'AUTH_SUCCESS'; payload: { user: User; token: string } }\n  | { type: 'AUTH_FAILURE'; payload: string }\n  | { type: 'LOGOUT' }\n  | { type: 'CLEAR_ERROR' }\n  | { type: 'SET_LOADING'; payload: boolean };\n\n// Auth Context Interface\ninterface AuthContextType {\n  state: AuthState;\n  login: (credentials: LoginCredentials) => Promise<AuthResult>;\n  register: (userData: RegisterData) => Promise<AuthResult>;\n  logout: () => Promise<void>;\n  refreshToken: () => Promise<AuthResult>;\n  clearError: () => void;\n  isAuthenticated: boolean;\n}\n\n// Initial state\nconst initialState: AuthState = {\n  isAuthenticated: false,\n  user: null,\n  token: null,\n  loading: true, // Start with loading true to check stored auth\n  error: null,\n};\n\n// Auth reducer\nfunction authReducer(state: AuthState, action: AuthAction): AuthState {\n  switch (action.type) {\n    case 'AUTH_START':\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case 'AUTH_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null,\n      };\n\n    case 'AUTH_FAILURE':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload,\n      };\n\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: null,\n      };\n\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null,\n      };\n\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Auth Provider Props\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\n// Auth Provider Component\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check for stored authentication on mount\n  useEffect(() => {\n    const checkStoredAuth = () => {\n      try {\n        const token = authService.getStoredToken();\n        const user = authService.getCurrentUser();\n\n        if (token && user) {\n          dispatch({\n            type: 'AUTH_SUCCESS',\n            payload: { user, token }\n          });\n        } else {\n          dispatch({ type: 'SET_LOADING', payload: false });\n        }\n      } catch (error) {\n        console.error('Error checking stored auth:', error);\n        dispatch({ type: 'SET_LOADING', payload: false });\n      }\n    };\n\n    checkStoredAuth();\n  }, []);\n\n  // Login function\n  const login = async (credentials: LoginCredentials): Promise<AuthResult> => {\n    dispatch({ type: 'AUTH_START' });\n\n    try {\n      // Validate credentials\n      const validation = authService.validateLoginCredentials(credentials);\n      if (!validation.isValid) {\n        const error = validation.errors.join(', ');\n        dispatch({ type: 'AUTH_FAILURE', payload: error });\n        return { success: false, error };\n      }\n\n      // Attempt login\n      const result = await authService.login(credentials);\n\n      if (result.success && result.user && result.token) {\n        dispatch({\n          type: 'AUTH_SUCCESS',\n          payload: {\n            user: result.user,\n            token: result.token.token\n          }\n        });\n      } else {\n        dispatch({\n          type: 'AUTH_FAILURE',\n          payload: result.error || 'Login failed'\n        });\n      }\n\n      return result;\n    } catch (error) {\n      const errorMessage = 'An unexpected error occurred during login';\n      dispatch({ type: 'AUTH_FAILURE', payload: errorMessage });\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Register function\n  const register = async (userData: RegisterData): Promise<AuthResult> => {\n    dispatch({ type: 'AUTH_START' });\n\n    try {\n      // Validate registration data\n      const validation = authService.validateRegistrationData(userData);\n      if (!validation.isValid) {\n        const error = validation.errors.join(', ');\n        dispatch({ type: 'AUTH_FAILURE', payload: error });\n        return { success: false, error };\n      }\n\n      // Attempt registration\n      const result = await authService.register(userData);\n\n      if (result.success && result.user && result.token) {\n        dispatch({\n          type: 'AUTH_SUCCESS',\n          payload: {\n            user: result.user,\n            token: result.token.token\n          }\n        });\n      } else {\n        dispatch({\n          type: 'AUTH_FAILURE',\n          payload: result.error || 'Registration failed'\n        });\n      }\n\n      return result;\n    } catch (error) {\n      const errorMessage = 'An unexpected error occurred during registration';\n      dispatch({ type: 'AUTH_FAILURE', payload: errorMessage });\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Logout function\n  const logout = async (): Promise<void> => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      dispatch({ type: 'LOGOUT' });\n    }\n  };\n\n  // Refresh token function\n  const refreshToken = async (): Promise<AuthResult> => {\n    try {\n      const result = await authService.refreshToken();\n\n      if (result.success && result.user && result.token) {\n        dispatch({\n          type: 'AUTH_SUCCESS',\n          payload: {\n            user: result.user,\n            token: result.token.token\n          }\n        });\n      } else {\n        dispatch({ type: 'LOGOUT' });\n      }\n\n      return result;\n    } catch (error) {\n      dispatch({ type: 'LOGOUT' });\n      return { success: false, error: 'Token refresh failed' };\n    }\n  };\n\n  // Clear error function\n  const clearError = (): void => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  };\n\n  // Context value\n  const contextValue: AuthContextType = {\n    state,\n    login,\n    register,\n    logout,\n    refreshToken,\n    clearError,\n    isAuthenticated: state.isAuthenticated,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n// Custom hook to use auth context\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  \n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAmB,OAAO;AAC1F,SAASC,WAAW,QAAoB,yBAAyB;;AAGjE;;AASA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAWA;AACA,MAAMC,YAAuB,GAAG;EAC9BC,eAAe,EAAE,KAAK;EACtBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,IAAI;EAAE;EACfC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,SAASC,WAAWA,CAACC,KAAgB,EAAEC,MAAkB,EAAa;EACpE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,YAAY;MACf,OAAO;QACL,GAAGF,KAAK;QACRH,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACT,CAAC;IAEH,KAAK,cAAc;MACjB,OAAO;QACL,GAAGE,KAAK;QACRN,eAAe,EAAE,IAAI;QACrBC,IAAI,EAAEM,MAAM,CAACE,OAAO,CAACR,IAAI;QACzBC,KAAK,EAAEK,MAAM,CAACE,OAAO,CAACP,KAAK;QAC3BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAK,cAAc;MACjB,OAAO;QACL,GAAGE,KAAK;QACRN,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEG,MAAM,CAACE;MAChB,CAAC;IAEH,KAAK,QAAQ;MACX,OAAO;QACL,GAAGH,KAAK;QACRN,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGE,KAAK;QACRF,KAAK,EAAE;MACT,CAAC;IAEH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGE,KAAK;QACRH,OAAO,EAAEI,MAAM,CAACE;MAClB,CAAC;IAEH;MACE,OAAOH,KAAK;EAChB;AACF;;AAEA;AACA,MAAMI,WAAW,gBAAGlB,aAAa,CAA8BmB,SAAS,CAAC;;AAEzE;;AAKA;AACA,OAAO,SAASC,YAAYA,CAAC;EAAEC;AAA4B,CAAC,EAAE;EAAAC,EAAA;EAC5D,MAAM,CAACR,KAAK,EAAES,QAAQ,CAAC,GAAGrB,UAAU,CAACW,WAAW,EAAEN,YAAY,CAAC;;EAE/D;EACAJ,SAAS,CAAC,MAAM;IACd,MAAMqB,eAAe,GAAGA,CAAA,KAAM;MAC5B,IAAI;QACF,MAAMd,KAAK,GAAGN,WAAW,CAACqB,cAAc,CAAC,CAAC;QAC1C,MAAMhB,IAAI,GAAGL,WAAW,CAACsB,cAAc,CAAC,CAAC;QAEzC,IAAIhB,KAAK,IAAID,IAAI,EAAE;UACjBc,QAAQ,CAAC;YACPP,IAAI,EAAE,cAAc;YACpBC,OAAO,EAAE;cAAER,IAAI;cAAEC;YAAM;UACzB,CAAC,CAAC;QACJ,CAAC,MAAM;UACLa,QAAQ,CAAC;YAAEP,IAAI,EAAE,aAAa;YAAEC,OAAO,EAAE;UAAM,CAAC,CAAC;QACnD;MACF,CAAC,CAAC,OAAOL,KAAK,EAAE;QACde,OAAO,CAACf,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDW,QAAQ,CAAC;UAAEP,IAAI,EAAE,aAAa;UAAEC,OAAO,EAAE;QAAM,CAAC,CAAC;MACnD;IACF,CAAC;IAEDO,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,KAAK,GAAG,MAAOC,WAA6B,IAA0B;IAC1EN,QAAQ,CAAC;MAAEP,IAAI,EAAE;IAAa,CAAC,CAAC;IAEhC,IAAI;MACF;MACA,MAAMc,UAAU,GAAG1B,WAAW,CAAC2B,wBAAwB,CAACF,WAAW,CAAC;MACpE,IAAI,CAACC,UAAU,CAACE,OAAO,EAAE;QACvB,MAAMpB,KAAK,GAAGkB,UAAU,CAACG,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;QAC1CX,QAAQ,CAAC;UAAEP,IAAI,EAAE,cAAc;UAAEC,OAAO,EAAEL;QAAM,CAAC,CAAC;QAClD,OAAO;UAAEuB,OAAO,EAAE,KAAK;UAAEvB;QAAM,CAAC;MAClC;;MAEA;MACA,MAAMwB,MAAM,GAAG,MAAMhC,WAAW,CAACwB,KAAK,CAACC,WAAW,CAAC;MAEnD,IAAIO,MAAM,CAACD,OAAO,IAAIC,MAAM,CAAC3B,IAAI,IAAI2B,MAAM,CAAC1B,KAAK,EAAE;QACjDa,QAAQ,CAAC;UACPP,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAE;YACPR,IAAI,EAAE2B,MAAM,CAAC3B,IAAI;YACjBC,KAAK,EAAE0B,MAAM,CAAC1B,KAAK,CAACA;UACtB;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACLa,QAAQ,CAAC;UACPP,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAEmB,MAAM,CAACxB,KAAK,IAAI;QAC3B,CAAC,CAAC;MACJ;MAEA,OAAOwB,MAAM;IACf,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACd,MAAMyB,YAAY,GAAG,2CAA2C;MAChEd,QAAQ,CAAC;QAAEP,IAAI,EAAE,cAAc;QAAEC,OAAO,EAAEoB;MAAa,CAAC,CAAC;MACzD,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEvB,KAAK,EAAEyB;MAAa,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMC,QAAQ,GAAG,MAAOC,QAAsB,IAA0B;IACtEhB,QAAQ,CAAC;MAAEP,IAAI,EAAE;IAAa,CAAC,CAAC;IAEhC,IAAI;MACF;MACA,MAAMc,UAAU,GAAG1B,WAAW,CAACoC,wBAAwB,CAACD,QAAQ,CAAC;MACjE,IAAI,CAACT,UAAU,CAACE,OAAO,EAAE;QACvB,MAAMpB,KAAK,GAAGkB,UAAU,CAACG,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;QAC1CX,QAAQ,CAAC;UAAEP,IAAI,EAAE,cAAc;UAAEC,OAAO,EAAEL;QAAM,CAAC,CAAC;QAClD,OAAO;UAAEuB,OAAO,EAAE,KAAK;UAAEvB;QAAM,CAAC;MAClC;;MAEA;MACA,MAAMwB,MAAM,GAAG,MAAMhC,WAAW,CAACkC,QAAQ,CAACC,QAAQ,CAAC;MAEnD,IAAIH,MAAM,CAACD,OAAO,IAAIC,MAAM,CAAC3B,IAAI,IAAI2B,MAAM,CAAC1B,KAAK,EAAE;QACjDa,QAAQ,CAAC;UACPP,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAE;YACPR,IAAI,EAAE2B,MAAM,CAAC3B,IAAI;YACjBC,KAAK,EAAE0B,MAAM,CAAC1B,KAAK,CAACA;UACtB;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACLa,QAAQ,CAAC;UACPP,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAEmB,MAAM,CAACxB,KAAK,IAAI;QAC3B,CAAC,CAAC;MACJ;MAEA,OAAOwB,MAAM;IACf,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACd,MAAMyB,YAAY,GAAG,kDAAkD;MACvEd,QAAQ,CAAC;QAAEP,IAAI,EAAE,cAAc;QAAEC,OAAO,EAAEoB;MAAa,CAAC,CAAC;MACzD,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEvB,KAAK,EAAEyB;MAAa,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMI,MAAM,GAAG,MAAAA,CAAA,KAA2B;IACxC,IAAI;MACF,MAAMrC,WAAW,CAACqC,MAAM,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,SAAS;MACRW,QAAQ,CAAC;QAAEP,IAAI,EAAE;MAAS,CAAC,CAAC;IAC9B;EACF,CAAC;;EAED;EACA,MAAM0B,YAAY,GAAG,MAAAA,CAAA,KAAiC;IACpD,IAAI;MACF,MAAMN,MAAM,GAAG,MAAMhC,WAAW,CAACsC,YAAY,CAAC,CAAC;MAE/C,IAAIN,MAAM,CAACD,OAAO,IAAIC,MAAM,CAAC3B,IAAI,IAAI2B,MAAM,CAAC1B,KAAK,EAAE;QACjDa,QAAQ,CAAC;UACPP,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAE;YACPR,IAAI,EAAE2B,MAAM,CAAC3B,IAAI;YACjBC,KAAK,EAAE0B,MAAM,CAAC1B,KAAK,CAACA;UACtB;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACLa,QAAQ,CAAC;UAAEP,IAAI,EAAE;QAAS,CAAC,CAAC;MAC9B;MAEA,OAAOoB,MAAM;IACf,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACdW,QAAQ,CAAC;QAAEP,IAAI,EAAE;MAAS,CAAC,CAAC;MAC5B,OAAO;QAAEmB,OAAO,EAAE,KAAK;QAAEvB,KAAK,EAAE;MAAuB,CAAC;IAC1D;EACF,CAAC;;EAED;EACA,MAAM+B,UAAU,GAAGA,CAAA,KAAY;IAC7BpB,QAAQ,CAAC;MAAEP,IAAI,EAAE;IAAc,CAAC,CAAC;EACnC,CAAC;;EAED;EACA,MAAM4B,YAA6B,GAAG;IACpC9B,KAAK;IACLc,KAAK;IACLU,QAAQ;IACRG,MAAM;IACNC,YAAY;IACZC,UAAU;IACVnC,eAAe,EAAEM,KAAK,CAACN;EACzB,CAAC;EAED,oBACEF,OAAA,CAACY,WAAW,CAAC2B,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAvB,QAAA,EACvCA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;;AAEA;AAAA5B,EAAA,CAnKgBF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAoK5B,OAAO,SAASgC,OAAOA,CAAA,EAAoB;EAAAC,GAAA;EACzC,MAAMC,OAAO,GAAGrD,UAAU,CAACiB,WAAW,CAAC;EAEvC,IAAIoC,OAAO,KAAKnC,SAAS,EAAE;IACzB,MAAM,IAAIoC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,OAAOD,OAAO;AAChB;AAACD,GAAA,CAReD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}