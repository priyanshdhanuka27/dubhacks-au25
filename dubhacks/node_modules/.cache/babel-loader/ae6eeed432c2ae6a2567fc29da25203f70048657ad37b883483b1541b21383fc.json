{"ast":null,"code":"import axios from 'axios';\nimport { config } from '../config';\nclass AuthService {\n  constructor() {\n    this.baseURL = void 0;\n    this.baseURL = config.api.baseUrl;\n  }\n\n  /**\n   * Register a new user\n   */\n  async register(userData) {\n    try {\n      const response = await axios.post(`${this.baseURL}/auth/register`, {\n        email: userData.email,\n        password: userData.password,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        timezone: userData.timezone\n      }, {\n        timeout: config.api.timeout,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.data.success && response.data.data) {\n        const authResult = response.data.data;\n\n        // Store tokens and user data\n        if (authResult.token) {\n          this.storeAuthData(authResult.token, authResult.user);\n        }\n        return authResult;\n      }\n      return {\n        success: false,\n        error: response.data.error || 'Registration failed'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Registration error:', error);\n      if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n        return {\n          success: false,\n          error: error.response.data.message\n        };\n      }\n      return {\n        success: false,\n        error: 'Network error. Please check your connection and try again.'\n      };\n    }\n  }\n\n  /**\n   * Login user with credentials\n   */\n  async login(credentials) {\n    try {\n      const response = await axios.post(`${this.baseURL}/auth/login`, credentials, {\n        timeout: config.api.timeout,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.data.success && response.data.data) {\n        const authResult = response.data.data;\n\n        // Store tokens and user data\n        if (authResult.token) {\n          this.storeAuthData(authResult.token, authResult.user);\n        }\n        return authResult;\n      }\n      return {\n        success: false,\n        error: response.data.error || 'Login failed'\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Login error:', error);\n      if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.message) {\n        return {\n          success: false,\n          error: error.response.data.message\n        };\n      }\n      return {\n        success: false,\n        error: 'Network error. Please check your connection and try again.'\n      };\n    }\n  }\n\n  /**\n   * Logout user\n   */\n  async logout() {\n    try {\n      const token = this.getStoredToken();\n      if (token) {\n        // Call logout endpoint\n        await axios.delete(`${this.baseURL}/auth/logout`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          },\n          timeout: config.api.timeout\n        });\n      }\n    } catch (error) {\n      console.error('Logout API error:', error);\n      // Continue with local logout even if API call fails\n    } finally {\n      // Always clear local storage\n      this.clearAuthData();\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshToken() {\n    try {\n      const refreshToken = this.getStoredRefreshToken();\n      if (!refreshToken) {\n        return {\n          success: false,\n          error: 'No refresh token available'\n        };\n      }\n      const response = await axios.post(`${this.baseURL}/auth/refresh`, {\n        refreshToken\n      }, {\n        timeout: config.api.timeout,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.data.success && response.data.data) {\n        const authResult = response.data.data;\n\n        // Store new tokens and user data\n        if (authResult.token) {\n          this.storeAuthData(authResult.token, authResult.user);\n        }\n        return authResult;\n      }\n\n      // If refresh fails, clear stored data\n      this.clearAuthData();\n      return {\n        success: false,\n        error: response.data.error || 'Token refresh failed'\n      };\n    } catch (error) {\n      console.error('Token refresh error:', error);\n\n      // Clear stored data on refresh failure\n      this.clearAuthData();\n      return {\n        success: false,\n        error: 'Session expired. Please log in again.'\n      };\n    }\n  }\n\n  /**\n   * Get current user from storage\n   */\n  getCurrentUser() {\n    try {\n      const userData = localStorage.getItem(config.auth.userKey);\n      return userData ? JSON.parse(userData) : null;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get stored access token\n   */\n  getStoredToken() {\n    return localStorage.getItem(config.auth.tokenKey);\n  }\n\n  /**\n   * Get stored refresh token\n   */\n  getStoredRefreshToken() {\n    return localStorage.getItem(config.auth.refreshTokenKey);\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated() {\n    const token = this.getStoredToken();\n    const user = this.getCurrentUser();\n    return !!(token && user);\n  }\n\n  /**\n   * Store authentication data in localStorage\n   */\n  storeAuthData(authToken, user) {\n    try {\n      localStorage.setItem(config.auth.tokenKey, authToken.token);\n      localStorage.setItem(config.auth.refreshTokenKey, authToken.refreshToken);\n      if (user) {\n        localStorage.setItem(config.auth.userKey, JSON.stringify(user));\n      }\n    } catch (error) {\n      console.error('Error storing auth data:', error);\n    }\n  }\n\n  /**\n   * Clear authentication data from localStorage\n   */\n  clearAuthData() {\n    try {\n      localStorage.removeItem(config.auth.tokenKey);\n      localStorage.removeItem(config.auth.refreshTokenKey);\n      localStorage.removeItem(config.auth.userKey);\n    } catch (error) {\n      console.error('Error clearing auth data:', error);\n    }\n  }\n\n  /**\n   * Validate registration data\n   */\n  validateRegistrationData(data) {\n    const errors = [];\n\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!data.email || !emailRegex.test(data.email)) {\n      errors.push('Please enter a valid email address');\n    }\n\n    // Password validation\n    if (!data.password || data.password.length < 8) {\n      errors.push('Password must be at least 8 characters long');\n    }\n    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(data.password)) {\n      errors.push('Password must contain at least one uppercase letter, one lowercase letter, and one number');\n    }\n\n    // Confirm password validation\n    if (data.password !== data.confirmPassword) {\n      errors.push('Passwords do not match');\n    }\n\n    // Name validation\n    if (!data.firstName || data.firstName.trim().length < 2) {\n      errors.push('First name must be at least 2 characters long');\n    }\n    if (!data.lastName || data.lastName.trim().length < 2) {\n      errors.push('Last name must be at least 2 characters long');\n    }\n\n    // Timezone validation\n    if (!data.timezone) {\n      errors.push('Please select a timezone');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Validate login credentials\n   */\n  validateLoginCredentials(credentials) {\n    const errors = [];\n    if (!credentials.email) {\n      errors.push('Email is required');\n    }\n    if (!credentials.password) {\n      errors.push('Password is required');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["axios","config","AuthService","constructor","baseURL","api","baseUrl","register","userData","response","post","email","password","firstName","lastName","timezone","timeout","headers","data","success","authResult","token","storeAuthData","user","error","_error$response","_error$response$data","console","message","login","credentials","_error$response2","_error$response2$data","logout","getStoredToken","delete","clearAuthData","refreshToken","getStoredRefreshToken","getCurrentUser","localStorage","getItem","auth","userKey","JSON","parse","tokenKey","refreshTokenKey","isAuthenticated","authToken","setItem","stringify","removeItem","validateRegistrationData","errors","emailRegex","test","push","length","confirmPassword","trim","isValid","validateLoginCredentials","authService"],"sources":["/Users/bhuvangundela/Desktop/Projects/dubhacks-au25/dubhacks/src/services/authService.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { config } from '../config';\nimport { \n  LoginCredentials, \n  RegisterData, \n  User, \n  ApiResponse \n} from '../types';\n\nexport interface AuthToken {\n  token: string;\n  refreshToken: string;\n  expiresAt: Date;\n  userId: string;\n}\n\nexport interface AuthResult {\n  success: boolean;\n  user?: Omit<User, 'passwordHash'>;\n  token?: AuthToken;\n  error?: string;\n}\n\nclass AuthService {\n  private baseURL: string;\n\n  constructor() {\n    this.baseURL = config.api.baseUrl;\n  }\n\n  /**\n   * Register a new user\n   */\n  async register(userData: RegisterData): Promise<AuthResult> {\n    try {\n      const response: AxiosResponse<ApiResponse<AuthResult>> = await axios.post(\n        `${this.baseURL}/auth/register`,\n        {\n          email: userData.email,\n          password: userData.password,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          timezone: userData.timezone\n        },\n        {\n          timeout: config.api.timeout,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (response.data.success && response.data.data) {\n        const authResult = response.data.data;\n        \n        // Store tokens and user data\n        if (authResult.token) {\n          this.storeAuthData(authResult.token, authResult.user);\n        }\n        \n        return authResult;\n      }\n\n      return {\n        success: false,\n        error: response.data.error || 'Registration failed'\n      };\n\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      \n      if (error.response?.data?.message) {\n        return {\n          success: false,\n          error: error.response.data.message\n        };\n      }\n      \n      return {\n        success: false,\n        error: 'Network error. Please check your connection and try again.'\n      };\n    }\n  }\n\n  /**\n   * Login user with credentials\n   */\n  async login(credentials: LoginCredentials): Promise<AuthResult> {\n    try {\n      const response: AxiosResponse<ApiResponse<AuthResult>> = await axios.post(\n        `${this.baseURL}/auth/login`,\n        credentials,\n        {\n          timeout: config.api.timeout,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (response.data.success && response.data.data) {\n        const authResult = response.data.data;\n        \n        // Store tokens and user data\n        if (authResult.token) {\n          this.storeAuthData(authResult.token, authResult.user);\n        }\n        \n        return authResult;\n      }\n\n      return {\n        success: false,\n        error: response.data.error || 'Login failed'\n      };\n\n    } catch (error: any) {\n      console.error('Login error:', error);\n      \n      if (error.response?.data?.message) {\n        return {\n          success: false,\n          error: error.response.data.message\n        };\n      }\n      \n      return {\n        success: false,\n        error: 'Network error. Please check your connection and try again.'\n      };\n    }\n  }\n\n  /**\n   * Logout user\n   */\n  async logout(): Promise<void> {\n    try {\n      const token = this.getStoredToken();\n      \n      if (token) {\n        // Call logout endpoint\n        await axios.delete(`${this.baseURL}/auth/logout`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          },\n          timeout: config.api.timeout\n        });\n      }\n    } catch (error) {\n      console.error('Logout API error:', error);\n      // Continue with local logout even if API call fails\n    } finally {\n      // Always clear local storage\n      this.clearAuthData();\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshToken(): Promise<AuthResult> {\n    try {\n      const refreshToken = this.getStoredRefreshToken();\n      \n      if (!refreshToken) {\n        return {\n          success: false,\n          error: 'No refresh token available'\n        };\n      }\n\n      const response: AxiosResponse<ApiResponse<AuthResult>> = await axios.post(\n        `${this.baseURL}/auth/refresh`,\n        { refreshToken },\n        {\n          timeout: config.api.timeout,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (response.data.success && response.data.data) {\n        const authResult = response.data.data;\n        \n        // Store new tokens and user data\n        if (authResult.token) {\n          this.storeAuthData(authResult.token, authResult.user);\n        }\n        \n        return authResult;\n      }\n\n      // If refresh fails, clear stored data\n      this.clearAuthData();\n      \n      return {\n        success: false,\n        error: response.data.error || 'Token refresh failed'\n      };\n\n    } catch (error: any) {\n      console.error('Token refresh error:', error);\n      \n      // Clear stored data on refresh failure\n      this.clearAuthData();\n      \n      return {\n        success: false,\n        error: 'Session expired. Please log in again.'\n      };\n    }\n  }\n\n  /**\n   * Get current user from storage\n   */\n  getCurrentUser(): User | null {\n    try {\n      const userData = localStorage.getItem(config.auth.userKey);\n      return userData ? JSON.parse(userData) : null;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get stored access token\n   */\n  getStoredToken(): string | null {\n    return localStorage.getItem(config.auth.tokenKey);\n  }\n\n  /**\n   * Get stored refresh token\n   */\n  getStoredRefreshToken(): string | null {\n    return localStorage.getItem(config.auth.refreshTokenKey);\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    const token = this.getStoredToken();\n    const user = this.getCurrentUser();\n    return !!(token && user);\n  }\n\n  /**\n   * Store authentication data in localStorage\n   */\n  private storeAuthData(authToken: AuthToken, user?: Omit<User, 'passwordHash'>): void {\n    try {\n      localStorage.setItem(config.auth.tokenKey, authToken.token);\n      localStorage.setItem(config.auth.refreshTokenKey, authToken.refreshToken);\n      \n      if (user) {\n        localStorage.setItem(config.auth.userKey, JSON.stringify(user));\n      }\n    } catch (error) {\n      console.error('Error storing auth data:', error);\n    }\n  }\n\n  /**\n   * Clear authentication data from localStorage\n   */\n  private clearAuthData(): void {\n    try {\n      localStorage.removeItem(config.auth.tokenKey);\n      localStorage.removeItem(config.auth.refreshTokenKey);\n      localStorage.removeItem(config.auth.userKey);\n    } catch (error) {\n      console.error('Error clearing auth data:', error);\n    }\n  }\n\n  /**\n   * Validate registration data\n   */\n  validateRegistrationData(data: RegisterData): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!data.email || !emailRegex.test(data.email)) {\n      errors.push('Please enter a valid email address');\n    }\n\n    // Password validation\n    if (!data.password || data.password.length < 8) {\n      errors.push('Password must be at least 8 characters long');\n    }\n\n    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(data.password)) {\n      errors.push('Password must contain at least one uppercase letter, one lowercase letter, and one number');\n    }\n\n    // Confirm password validation\n    if (data.password !== data.confirmPassword) {\n      errors.push('Passwords do not match');\n    }\n\n    // Name validation\n    if (!data.firstName || data.firstName.trim().length < 2) {\n      errors.push('First name must be at least 2 characters long');\n    }\n\n    if (!data.lastName || data.lastName.trim().length < 2) {\n      errors.push('Last name must be at least 2 characters long');\n    }\n\n    // Timezone validation\n    if (!data.timezone) {\n      errors.push('Please select a timezone');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Validate login credentials\n   */\n  validateLoginCredentials(credentials: LoginCredentials): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!credentials.email) {\n      errors.push('Email is required');\n    }\n\n    if (!credentials.password) {\n      errors.push('Password is required');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n}\n\nexport const authService = new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}