{"ast":null,"code":"import axios from'axios';import{config}from'../config';class AuthService{constructor(){this.baseURL=void 0;this.baseURL=config.api.baseUrl;}/**\n   * Register a new user\n   */async register(userData){try{const response=await axios.post(\"\".concat(this.baseURL,\"/auth/register\"),{email:userData.email,password:userData.password,firstName:userData.firstName,lastName:userData.lastName,timezone:userData.timezone},{timeout:config.api.timeout,headers:{'Content-Type':'application/json'}});if(response.data.success&&response.data.data){const authResult=response.data.data;// Store tokens and user data\nif(authResult.token){this.storeAuthData(authResult.token,authResult.user);}return authResult;}return{success:false,error:response.data.error||'Registration failed'};}catch(error){var _error$response,_error$response$data;console.error('Registration error:',error);if((_error$response=error.response)!==null&&_error$response!==void 0&&(_error$response$data=_error$response.data)!==null&&_error$response$data!==void 0&&_error$response$data.message){return{success:false,error:error.response.data.message};}return{success:false,error:'Network error. Please check your connection and try again.'};}}/**\n   * Login user with credentials\n   */async login(credentials){try{const response=await axios.post(\"\".concat(this.baseURL,\"/auth/login\"),credentials,{timeout:config.api.timeout,headers:{'Content-Type':'application/json'}});if(response.data.success&&response.data.data){const authResult=response.data.data;// Store tokens and user data\nif(authResult.token){this.storeAuthData(authResult.token,authResult.user);}return authResult;}return{success:false,error:response.data.error||'Login failed'};}catch(error){var _error$response2,_error$response2$data;console.error('Login error:',error);if((_error$response2=error.response)!==null&&_error$response2!==void 0&&(_error$response2$data=_error$response2.data)!==null&&_error$response2$data!==void 0&&_error$response2$data.message){return{success:false,error:error.response.data.message};}return{success:false,error:'Network error. Please check your connection and try again.'};}}/**\n   * Logout user\n   */async logout(){try{const token=this.getStoredToken();if(token){// Call logout endpoint\nawait axios.delete(\"\".concat(this.baseURL,\"/auth/logout\"),{headers:{'Authorization':\"Bearer \".concat(token)},timeout:config.api.timeout});}}catch(error){console.error('Logout API error:',error);// Continue with local logout even if API call fails\n}finally{// Always clear local storage\nthis.clearAuthData();}}/**\n   * Refresh access token\n   */async refreshToken(){try{const refreshToken=this.getStoredRefreshToken();if(!refreshToken){return{success:false,error:'No refresh token available'};}const response=await axios.post(\"\".concat(this.baseURL,\"/auth/refresh\"),{refreshToken},{timeout:config.api.timeout,headers:{'Content-Type':'application/json'}});if(response.data.success&&response.data.data){const authResult=response.data.data;// Store new tokens and user data\nif(authResult.token){this.storeAuthData(authResult.token,authResult.user);}return authResult;}// If refresh fails, clear stored data\nthis.clearAuthData();return{success:false,error:response.data.error||'Token refresh failed'};}catch(error){console.error('Token refresh error:',error);// Clear stored data on refresh failure\nthis.clearAuthData();return{success:false,error:'Session expired. Please log in again.'};}}/**\n   * Get current user from storage\n   */getCurrentUser(){try{const userData=localStorage.getItem(config.auth.userKey);return userData?JSON.parse(userData):null;}catch(error){console.error('Error getting current user:',error);return null;}}/**\n   * Get stored access token\n   */getStoredToken(){return localStorage.getItem(config.auth.tokenKey);}/**\n   * Get stored refresh token\n   */getStoredRefreshToken(){return localStorage.getItem(config.auth.refreshTokenKey);}/**\n   * Check if user is authenticated\n   */isAuthenticated(){const token=this.getStoredToken();const user=this.getCurrentUser();return!!(token&&user);}/**\n   * Store authentication data in localStorage\n   */storeAuthData(authToken,user){try{localStorage.setItem(config.auth.tokenKey,authToken.token);localStorage.setItem(config.auth.refreshTokenKey,authToken.refreshToken);if(user){localStorage.setItem(config.auth.userKey,JSON.stringify(user));}}catch(error){console.error('Error storing auth data:',error);}}/**\n   * Clear authentication data from localStorage\n   */clearAuthData(){try{localStorage.removeItem(config.auth.tokenKey);localStorage.removeItem(config.auth.refreshTokenKey);localStorage.removeItem(config.auth.userKey);}catch(error){console.error('Error clearing auth data:',error);}}/**\n   * Validate registration data\n   */validateRegistrationData(data){const errors=[];// Email validation\nconst emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;if(!data.email||!emailRegex.test(data.email)){errors.push('Please enter a valid email address');}// Password validation\nif(!data.password||data.password.length<8){errors.push('Password must be at least 8 characters long');}if(!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(data.password)){errors.push('Password must contain at least one uppercase letter, one lowercase letter, and one number');}// Confirm password validation\nif(data.password!==data.confirmPassword){errors.push('Passwords do not match');}// Name validation\nif(!data.firstName||data.firstName.trim().length<2){errors.push('First name must be at least 2 characters long');}if(!data.lastName||data.lastName.trim().length<2){errors.push('Last name must be at least 2 characters long');}// Timezone validation\nif(!data.timezone){errors.push('Please select a timezone');}return{isValid:errors.length===0,errors};}/**\n   * Validate login credentials\n   */validateLoginCredentials(credentials){const errors=[];if(!credentials.email){errors.push('Email is required');}if(!credentials.password){errors.push('Password is required');}return{isValid:errors.length===0,errors};}}export const authService=new AuthService();","map":{"version":3,"names":["axios","config","AuthService","constructor","baseURL","api","baseUrl","register","userData","response","post","concat","email","password","firstName","lastName","timezone","timeout","headers","data","success","authResult","token","storeAuthData","user","error","_error$response","_error$response$data","console","message","login","credentials","_error$response2","_error$response2$data","logout","getStoredToken","delete","clearAuthData","refreshToken","getStoredRefreshToken","getCurrentUser","localStorage","getItem","auth","userKey","JSON","parse","tokenKey","refreshTokenKey","isAuthenticated","authToken","setItem","stringify","removeItem","validateRegistrationData","errors","emailRegex","test","push","length","confirmPassword","trim","isValid","validateLoginCredentials","authService"],"sources":["/Users/bhuvangundela/Desktop/Projects/dubhacks-au25/dubhacks/src/services/authService.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { config } from '../config';\nimport { \n  LoginCredentials, \n  RegisterData, \n  User, \n  ApiResponse \n} from '../types';\n\nexport interface AuthToken {\n  token: string;\n  refreshToken: string;\n  expiresAt: Date;\n  userId: string;\n}\n\nexport interface AuthResult {\n  success: boolean;\n  user?: Omit<User, 'passwordHash'>;\n  token?: AuthToken;\n  error?: string;\n}\n\nclass AuthService {\n  private baseURL: string;\n\n  constructor() {\n    this.baseURL = config.api.baseUrl;\n  }\n\n  /**\n   * Register a new user\n   */\n  async register(userData: RegisterData): Promise<AuthResult> {\n    try {\n      const response: AxiosResponse<ApiResponse<AuthResult>> = await axios.post(\n        `${this.baseURL}/auth/register`,\n        {\n          email: userData.email,\n          password: userData.password,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          timezone: userData.timezone\n        },\n        {\n          timeout: config.api.timeout,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (response.data.success && response.data.data) {\n        const authResult = response.data.data;\n        \n        // Store tokens and user data\n        if (authResult.token) {\n          this.storeAuthData(authResult.token, authResult.user);\n        }\n        \n        return authResult;\n      }\n\n      return {\n        success: false,\n        error: response.data.error || 'Registration failed'\n      };\n\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      \n      if (error.response?.data?.message) {\n        return {\n          success: false,\n          error: error.response.data.message\n        };\n      }\n      \n      return {\n        success: false,\n        error: 'Network error. Please check your connection and try again.'\n      };\n    }\n  }\n\n  /**\n   * Login user with credentials\n   */\n  async login(credentials: LoginCredentials): Promise<AuthResult> {\n    try {\n      const response: AxiosResponse<ApiResponse<AuthResult>> = await axios.post(\n        `${this.baseURL}/auth/login`,\n        credentials,\n        {\n          timeout: config.api.timeout,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (response.data.success && response.data.data) {\n        const authResult = response.data.data;\n        \n        // Store tokens and user data\n        if (authResult.token) {\n          this.storeAuthData(authResult.token, authResult.user);\n        }\n        \n        return authResult;\n      }\n\n      return {\n        success: false,\n        error: response.data.error || 'Login failed'\n      };\n\n    } catch (error: any) {\n      console.error('Login error:', error);\n      \n      if (error.response?.data?.message) {\n        return {\n          success: false,\n          error: error.response.data.message\n        };\n      }\n      \n      return {\n        success: false,\n        error: 'Network error. Please check your connection and try again.'\n      };\n    }\n  }\n\n  /**\n   * Logout user\n   */\n  async logout(): Promise<void> {\n    try {\n      const token = this.getStoredToken();\n      \n      if (token) {\n        // Call logout endpoint\n        await axios.delete(`${this.baseURL}/auth/logout`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          },\n          timeout: config.api.timeout\n        });\n      }\n    } catch (error) {\n      console.error('Logout API error:', error);\n      // Continue with local logout even if API call fails\n    } finally {\n      // Always clear local storage\n      this.clearAuthData();\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshToken(): Promise<AuthResult> {\n    try {\n      const refreshToken = this.getStoredRefreshToken();\n      \n      if (!refreshToken) {\n        return {\n          success: false,\n          error: 'No refresh token available'\n        };\n      }\n\n      const response: AxiosResponse<ApiResponse<AuthResult>> = await axios.post(\n        `${this.baseURL}/auth/refresh`,\n        { refreshToken },\n        {\n          timeout: config.api.timeout,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (response.data.success && response.data.data) {\n        const authResult = response.data.data;\n        \n        // Store new tokens and user data\n        if (authResult.token) {\n          this.storeAuthData(authResult.token, authResult.user);\n        }\n        \n        return authResult;\n      }\n\n      // If refresh fails, clear stored data\n      this.clearAuthData();\n      \n      return {\n        success: false,\n        error: response.data.error || 'Token refresh failed'\n      };\n\n    } catch (error: any) {\n      console.error('Token refresh error:', error);\n      \n      // Clear stored data on refresh failure\n      this.clearAuthData();\n      \n      return {\n        success: false,\n        error: 'Session expired. Please log in again.'\n      };\n    }\n  }\n\n  /**\n   * Get current user from storage\n   */\n  getCurrentUser(): User | null {\n    try {\n      const userData = localStorage.getItem(config.auth.userKey);\n      return userData ? JSON.parse(userData) : null;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get stored access token\n   */\n  getStoredToken(): string | null {\n    return localStorage.getItem(config.auth.tokenKey);\n  }\n\n  /**\n   * Get stored refresh token\n   */\n  getStoredRefreshToken(): string | null {\n    return localStorage.getItem(config.auth.refreshTokenKey);\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    const token = this.getStoredToken();\n    const user = this.getCurrentUser();\n    return !!(token && user);\n  }\n\n  /**\n   * Store authentication data in localStorage\n   */\n  private storeAuthData(authToken: AuthToken, user?: Omit<User, 'passwordHash'>): void {\n    try {\n      localStorage.setItem(config.auth.tokenKey, authToken.token);\n      localStorage.setItem(config.auth.refreshTokenKey, authToken.refreshToken);\n      \n      if (user) {\n        localStorage.setItem(config.auth.userKey, JSON.stringify(user));\n      }\n    } catch (error) {\n      console.error('Error storing auth data:', error);\n    }\n  }\n\n  /**\n   * Clear authentication data from localStorage\n   */\n  private clearAuthData(): void {\n    try {\n      localStorage.removeItem(config.auth.tokenKey);\n      localStorage.removeItem(config.auth.refreshTokenKey);\n      localStorage.removeItem(config.auth.userKey);\n    } catch (error) {\n      console.error('Error clearing auth data:', error);\n    }\n  }\n\n  /**\n   * Validate registration data\n   */\n  validateRegistrationData(data: RegisterData): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!data.email || !emailRegex.test(data.email)) {\n      errors.push('Please enter a valid email address');\n    }\n\n    // Password validation\n    if (!data.password || data.password.length < 8) {\n      errors.push('Password must be at least 8 characters long');\n    }\n\n    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(data.password)) {\n      errors.push('Password must contain at least one uppercase letter, one lowercase letter, and one number');\n    }\n\n    // Confirm password validation\n    if (data.password !== data.confirmPassword) {\n      errors.push('Passwords do not match');\n    }\n\n    // Name validation\n    if (!data.firstName || data.firstName.trim().length < 2) {\n      errors.push('First name must be at least 2 characters long');\n    }\n\n    if (!data.lastName || data.lastName.trim().length < 2) {\n      errors.push('Last name must be at least 2 characters long');\n    }\n\n    // Timezone validation\n    if (!data.timezone) {\n      errors.push('Please select a timezone');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Validate login credentials\n   */\n  validateLoginCredentials(credentials: LoginCredentials): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!credentials.email) {\n      errors.push('Email is required');\n    }\n\n    if (!credentials.password) {\n      errors.push('Password is required');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n}\n\nexport const authService = new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}