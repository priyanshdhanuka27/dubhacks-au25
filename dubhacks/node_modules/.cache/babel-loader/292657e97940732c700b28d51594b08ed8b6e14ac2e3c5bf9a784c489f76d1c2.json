{"ast":null,"code":"import _objectSpread from\"/Users/rishivora/Documents/Coding/Hackathons/dubhacks-au25/dubhacks/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect}from'react';import{authService}from'../services/authService';// Auth Actions\n// Auth Context Interface\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Initial state\nconst initialState={isAuthenticated:false,user:null,token:null,loading:true,// Start with loading true to check stored auth\nerror:null};// Auth reducer\nfunction authReducer(state,action){switch(action.type){case'AUTH_START':return _objectSpread(_objectSpread({},state),{},{loading:true,error:null});case'AUTH_SUCCESS':return _objectSpread(_objectSpread({},state),{},{isAuthenticated:true,user:action.payload.user,token:action.payload.token,loading:false,error:null});case'AUTH_FAILURE':return _objectSpread(_objectSpread({},state),{},{isAuthenticated:false,user:null,token:null,loading:false,error:action.payload});case'LOGOUT':return _objectSpread(_objectSpread({},state),{},{isAuthenticated:false,user:null,token:null,loading:false,error:null});case'CLEAR_ERROR':return _objectSpread(_objectSpread({},state),{},{error:null});case'SET_LOADING':return _objectSpread(_objectSpread({},state),{},{loading:action.payload});default:return state;}}// Create context\nconst AuthContext=/*#__PURE__*/createContext(undefined);// Auth Provider Props\n// Auth Provider Component\nexport function AuthProvider(_ref){let{children}=_ref;const[state,dispatch]=useReducer(authReducer,initialState);// Check for stored authentication on mount\nuseEffect(()=>{const checkStoredAuth=()=>{try{const token=authService.getStoredToken();const user=authService.getCurrentUser();if(token&&user){dispatch({type:'AUTH_SUCCESS',payload:{user,token}});}else{dispatch({type:'SET_LOADING',payload:false});}}catch(error){console.error('Error checking stored auth:',error);dispatch({type:'SET_LOADING',payload:false});}};checkStoredAuth();},[]);// Login function\nconst login=async credentials=>{dispatch({type:'AUTH_START'});try{// Validate credentials\nconst validation=authService.validateLoginCredentials(credentials);if(!validation.isValid){const error=validation.errors.join(', ');dispatch({type:'AUTH_FAILURE',payload:error});return{success:false,error};}// Attempt login\nconst result=await authService.login(credentials);if(result.success&&result.user&&result.token){dispatch({type:'AUTH_SUCCESS',payload:{user:result.user,token:result.token.token}});}else{dispatch({type:'AUTH_FAILURE',payload:result.error||'Login failed'});}return result;}catch(error){const errorMessage='An unexpected error occurred during login';dispatch({type:'AUTH_FAILURE',payload:errorMessage});return{success:false,error:errorMessage};}};// Register function\nconst register=async userData=>{dispatch({type:'AUTH_START'});try{// Validate registration data\nconst validation=authService.validateRegistrationData(userData);if(!validation.isValid){const error=validation.errors.join(', ');dispatch({type:'AUTH_FAILURE',payload:error});return{success:false,error};}// Attempt registration\nconst result=await authService.register(userData);if(result.success&&result.user&&result.token){dispatch({type:'AUTH_SUCCESS',payload:{user:result.user,token:result.token.token}});}else{dispatch({type:'AUTH_FAILURE',payload:result.error||'Registration failed'});}return result;}catch(error){const errorMessage='An unexpected error occurred during registration';dispatch({type:'AUTH_FAILURE',payload:errorMessage});return{success:false,error:errorMessage};}};// Logout function\nconst logout=async()=>{try{await authService.logout();}catch(error){console.error('Logout error:',error);}finally{dispatch({type:'LOGOUT'});}};// Refresh token function\nconst refreshToken=async()=>{try{const result=await authService.refreshToken();if(result.success&&result.user&&result.token){dispatch({type:'AUTH_SUCCESS',payload:{user:result.user,token:result.token.token}});}else{dispatch({type:'LOGOUT'});}return result;}catch(error){dispatch({type:'LOGOUT'});return{success:false,error:'Token refresh failed'};}};// Clear error function\nconst clearError=()=>{dispatch({type:'CLEAR_ERROR'});};// Context value\nconst contextValue={state,login,register,logout,refreshToken,clearError,isAuthenticated:state.isAuthenticated};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:contextValue,children:children});}// Custom hook to use auth context\nexport function useAuth(){const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}