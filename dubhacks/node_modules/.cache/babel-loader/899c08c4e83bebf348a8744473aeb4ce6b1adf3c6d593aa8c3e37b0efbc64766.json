{"ast":null,"code":"import{apiClient}from'./apiClient';class SearchService{/**\n   * Perform conversational AI search using Bedrock RAG\n   */async performConversationalSearch(request){try{const response=await apiClient.post('/search',request);if(!response.data.success||!response.data.data){throw new Error(response.data.error||'Conversational search failed');}return response.data.data;}catch(error){var _error$response,_error$response$data;console.error('Conversational search error:',error);throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to perform conversational search');}}/**\n   * Perform semantic search with filtering\n   */async performSemanticSearch(request){try{const response=await apiClient.post('/search/semantic',request);if(!response.data.success||!response.data.data){throw new Error(response.data.error||'Semantic search failed');}return response.data.data;}catch(error){var _error$response2,_error$response2$data;console.error('Semantic search error:',error);throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to perform semantic search');}}/**\n   * Get personalized event feed for a user\n   */async getPersonalizedFeed(userId,options){try{const queryParams=new URLSearchParams();if(options!==null&&options!==void 0&&options.maxResults){queryParams.append('maxResults',options.maxResults.toString());}if((options===null||options===void 0?void 0:options.includeUserSubmitted)!==undefined){queryParams.append('includeUserSubmitted',options.includeUserSubmitted.toString());}if((options===null||options===void 0?void 0:options.boostSavedEvents)!==undefined){queryParams.append('boostSavedEvents',options.boostSavedEvents.toString());}const url=\"/search/events/feed/\".concat(userId).concat(queryParams.toString()?\"?\".concat(queryParams.toString()):'');const response=await apiClient.get(url);if(!response.data.success||!response.data.data){throw new Error(response.data.error||'Failed to get personalized feed');}return response.data.data;}catch(error){var _error$response3,_error$response3$data;console.error('Personalized feed error:',error);throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to get personalized event feed');}}/**\n   * Search events with filtering capabilities\n   */async searchEvents(query,filters,limit){try{const queryParams=new URLSearchParams();queryParams.append('q',query);if(limit){queryParams.append('limit',limit.toString());}// Add filter parameters\nif(filters){if(filters.dateRange){if(filters.dateRange.startDate){queryParams.append('startDate',filters.dateRange.startDate.toISOString());}if(filters.dateRange.endDate){queryParams.append('endDate',filters.dateRange.endDate.toISOString());}}if(filters.location){if(filters.location.city){queryParams.append('city',filters.location.city);}if(filters.location.state){queryParams.append('state',filters.location.state);}if(filters.location.radius){queryParams.append('radius',filters.location.radius.toString());}if(filters.location.coordinates){queryParams.append('lat',filters.location.coordinates.lat.toString());queryParams.append('lng',filters.location.coordinates.lng.toString());}}if(filters.categories&&filters.categories.length>0){queryParams.append('categories',filters.categories.join(','));}if(filters.priceRange){queryParams.append('minPrice',filters.priceRange.min.toString());queryParams.append('maxPrice',filters.priceRange.max.toString());}if(filters.keywords&&filters.keywords.length>0){queryParams.append('keywords',filters.keywords.join(','));}}const response=await apiClient.get(\"/search/events/search?\".concat(queryParams.toString()));if(!response.data.success||!response.data.data){throw new Error(response.data.error||'Event search failed');}return response.data.data;}catch(error){var _error$response4,_error$response4$data;console.error('Event search error:',error);throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Failed to search events');}}/**\n   * Index a user-submitted event for search\n   */async indexEvent(eventId){try{const response=await apiClient.post(\"/search/index-event/\".concat(eventId));if(!response.data.success){throw new Error(response.data.error||'Failed to index event');}}catch(error){var _error$response5,_error$response5$data;console.error('Index event error:',error);throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Failed to index event for search');}}/**\n   * Get popular search categories\n   */getPopularCategories(){return['Music','Technology','Business','Arts & Culture','Sports & Fitness','Food & Drink','Health & Wellness','Education','Community','Entertainment','Networking','Workshops'];}/**\n   * Get search suggestions based on query\n   */getSearchSuggestions(query){const suggestions=['music concerts near me','tech conferences this month','food festivals this weekend','networking events downtown','art exhibitions','business workshops','fitness classes','comedy shows','book readings','startup events'];if(!query||query.length<2){return suggestions.slice(0,5);}const filtered=suggestions.filter(suggestion=>suggestion.toLowerCase().includes(query.toLowerCase()));return filtered.length>0?filtered:suggestions.slice(0,3);}/**\n   * Format search filters for display\n   */formatFiltersForDisplay(filters){const displayFilters=[];if(filters.dateRange){if(filters.dateRange.startDate&&filters.dateRange.endDate){const start=filters.dateRange.startDate.toLocaleDateString();const end=filters.dateRange.endDate.toLocaleDateString();displayFilters.push(\"\".concat(start,\" - \").concat(end));}else if(filters.dateRange.startDate){displayFilters.push(\"From \".concat(filters.dateRange.startDate.toLocaleDateString()));}}if(filters.location){if(filters.location.city&&filters.location.state){displayFilters.push(\"\".concat(filters.location.city,\", \").concat(filters.location.state));}else if(filters.location.city){displayFilters.push(filters.location.city);}else if(filters.location.state){displayFilters.push(filters.location.state);}if(filters.location.radius){displayFilters.push(\"Within \".concat(filters.location.radius,\" miles\"));}}if(filters.categories&&filters.categories.length>0){displayFilters.push(\"Categories: \".concat(filters.categories.join(', ')));}if(filters.priceRange){if(filters.priceRange.min===0&&filters.priceRange.max>0){displayFilters.push(\"Up to $\".concat(filters.priceRange.max));}else if(filters.priceRange.min>0&&filters.priceRange.max>filters.priceRange.min){displayFilters.push(\"$\".concat(filters.priceRange.min,\" - $\").concat(filters.priceRange.max));}else if(filters.priceRange.min>0){displayFilters.push(\"From $\".concat(filters.priceRange.min));}}if(filters.keywords&&filters.keywords.length>0){displayFilters.push(\"Keywords: \".concat(filters.keywords.join(', ')));}return displayFilters;}}export const searchService=new SearchService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}