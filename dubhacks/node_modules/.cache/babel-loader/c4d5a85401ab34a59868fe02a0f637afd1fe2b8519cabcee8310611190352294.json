{"ast":null,"code":"import { apiClient } from './apiClient';\n/**\n * Calendar service for frontend calendar integration\n */\nclass CalendarService {\n  /**\n   * Get calendar links for all supported calendar providers\n   * @param eventId - Event ID to generate links for\n   * @returns Promise with calendar links\n   */\n  async getCalendarLinks(eventId) {\n    try {\n      const response = await apiClient.get(`/events/${eventId}/calendar/link`);\n      if (!response.data.success) {\n        throw new Error(response.data.message || 'Failed to generate calendar links');\n      }\n      return response.data.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error fetching calendar links:', error);\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to generate calendar links');\n    }\n  }\n\n  /**\n   * Get calendar link for a specific provider\n   * @param eventId - Event ID\n   * @param provider - Calendar provider (google, outlook, yahoo, apple, ics)\n   * @returns Promise with calendar link\n   */\n  async getCalendarLink(eventId, provider) {\n    try {\n      const response = await apiClient.get(`/events/${eventId}/calendar/link?type=${provider}`);\n      if (!response.data.success) {\n        throw new Error(response.data.message || 'Failed to generate calendar link');\n      }\n      return response.data.data.link;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error fetching calendar link:', error);\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to generate calendar link');\n    }\n  }\n\n  /**\n   * Download .ics calendar file for an event\n   * @param eventId - Event ID\n   * @param eventTitle - Event title for filename\n   */\n  async downloadICSFile(eventId, eventTitle) {\n    try {\n      const response = await fetch(`${apiClient.defaults.baseURL}/events/${eventId}/calendar`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'text/calendar'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to download calendar file');\n      }\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n\n      // Create download link\n      const link = document.createElement('a');\n      link.href = url;\n\n      // Generate filename\n      const sanitizedTitle = eventTitle.replace(/[^a-zA-Z0-9\\s-]/g, '').replace(/\\s+/g, '-').toLowerCase().substring(0, 50);\n      const dateStr = new Date().toISOString().split('T')[0];\n      link.download = `${sanitizedTitle}-${dateStr}.ics`;\n\n      // Trigger download\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      // Clean up\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Error downloading .ics file:', error);\n      throw new Error('Failed to download calendar file');\n    }\n  }\n\n  /**\n   * Open calendar provider in new tab\n   * @param url - Calendar provider URL\n   */\n  openCalendarProvider(url) {\n    window.open(url, '_blank', 'noopener,noreferrer');\n  }\n\n  /**\n   * Check if calendar integration is supported\n   * @returns boolean indicating support\n   */\n  isCalendarIntegrationSupported() {\n    // Check if we're in a browser environment\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n  }\n\n  /**\n   * Get user's preferred calendar provider from localStorage\n   * @returns string with preferred provider or null\n   */\n  getPreferredCalendarProvider() {\n    if (!this.isCalendarIntegrationSupported()) return null;\n    try {\n      return localStorage.getItem('preferredCalendarProvider');\n    } catch (error) {\n      console.warn('Failed to get preferred calendar provider from localStorage');\n      return null;\n    }\n  }\n\n  /**\n   * Set user's preferred calendar provider in localStorage\n   * @param provider - Calendar provider to set as preferred\n   */\n  setPreferredCalendarProvider(provider) {\n    if (!this.isCalendarIntegrationSupported()) return;\n    try {\n      localStorage.setItem('preferredCalendarProvider', provider);\n    } catch (error) {\n      console.warn('Failed to save preferred calendar provider to localStorage');\n    }\n  }\n\n  /**\n   * Quick add to preferred calendar provider\n   * @param eventId - Event ID\n   * @returns Promise that resolves when calendar action is complete\n   */\n  async quickAddToCalendar(eventId) {\n    const preferredProvider = this.getPreferredCalendarProvider();\n    if (!preferredProvider) {\n      throw new Error('No preferred calendar provider set');\n    }\n    try {\n      const link = await this.getCalendarLink(eventId, preferredProvider);\n      if (preferredProvider === 'ics' || preferredProvider === 'apple') {\n        // For .ics files, trigger download\n        const response = await fetch(link);\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const downloadLink = document.createElement('a');\n        downloadLink.href = url;\n        downloadLink.download = `event-${eventId}.ics`;\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n        window.URL.revokeObjectURL(url);\n      } else {\n        // For web-based calendars, open in new tab\n        this.openCalendarProvider(link);\n      }\n    } catch (error) {\n      console.error('Error in quick add to calendar:', error);\n      throw new Error('Failed to add event to calendar');\n    }\n  }\n}\n\n// Export singleton instance\nexport const calendarService = new CalendarService();","map":{"version":3,"names":["apiClient","CalendarService","getCalendarLinks","eventId","response","get","data","success","Error","message","error","_error$response","_error$response$data","console","getCalendarLink","provider","link","_error$response2","_error$response2$data","downloadICSFile","eventTitle","fetch","defaults","baseURL","method","headers","ok","blob","url","window","URL","createObjectURL","document","createElement","href","sanitizedTitle","replace","toLowerCase","substring","dateStr","Date","toISOString","split","download","body","appendChild","click","removeChild","revokeObjectURL","openCalendarProvider","open","isCalendarIntegrationSupported","getPreferredCalendarProvider","localStorage","getItem","warn","setPreferredCalendarProvider","setItem","quickAddToCalendar","preferredProvider","downloadLink","calendarService"],"sources":["/Users/rishivora/Documents/Coding/Hackathons/dubhacks-au25/dubhacks/src/services/calendarService.ts"],"sourcesContent":["import { apiClient } from './apiClient';\n\ninterface CalendarLinks {\n  ics: string;\n  google: string;\n  outlook: string;\n  yahoo: string;\n  apple: string;\n}\n\ninterface CalendarLinkResponse {\n  success: boolean;\n  data: CalendarLinks;\n  message: string;\n}\n\n/**\n * Calendar service for frontend calendar integration\n */\nclass CalendarService {\n  \n  /**\n   * Get calendar links for all supported calendar providers\n   * @param eventId - Event ID to generate links for\n   * @returns Promise with calendar links\n   */\n  async getCalendarLinks(eventId: string): Promise<CalendarLinks> {\n    try {\n      const response = await apiClient.get<CalendarLinkResponse>(`/events/${eventId}/calendar/link`);\n      \n      if (!response.data.success) {\n        throw new Error(response.data.message || 'Failed to generate calendar links');\n      }\n      \n      return response.data.data;\n    } catch (error: any) {\n      console.error('Error fetching calendar links:', error);\n      throw new Error(error.response?.data?.message || 'Failed to generate calendar links');\n    }\n  }\n\n  /**\n   * Get calendar link for a specific provider\n   * @param eventId - Event ID\n   * @param provider - Calendar provider (google, outlook, yahoo, apple, ics)\n   * @returns Promise with calendar link\n   */\n  async getCalendarLink(eventId: string, provider: string): Promise<string> {\n    try {\n      const response = await apiClient.get<{ success: boolean; data: { link: string; type: string }; message: string }>(\n        `/events/${eventId}/calendar/link?type=${provider}`\n      );\n      \n      if (!response.data.success) {\n        throw new Error(response.data.message || 'Failed to generate calendar link');\n      }\n      \n      return response.data.data.link;\n    } catch (error: any) {\n      console.error('Error fetching calendar link:', error);\n      throw new Error(error.response?.data?.message || 'Failed to generate calendar link');\n    }\n  }\n\n  /**\n   * Download .ics calendar file for an event\n   * @param eventId - Event ID\n   * @param eventTitle - Event title for filename\n   */\n  async downloadICSFile(eventId: string, eventTitle: string): Promise<void> {\n    try {\n      const response = await fetch(`${apiClient.defaults.baseURL}/events/${eventId}/calendar`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'text/calendar',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to download calendar file');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      \n      // Create download link\n      const link = document.createElement('a');\n      link.href = url;\n      \n      // Generate filename\n      const sanitizedTitle = eventTitle\n        .replace(/[^a-zA-Z0-9\\s-]/g, '')\n        .replace(/\\s+/g, '-')\n        .toLowerCase()\n        .substring(0, 50);\n      \n      const dateStr = new Date().toISOString().split('T')[0];\n      link.download = `${sanitizedTitle}-${dateStr}.ics`;\n      \n      // Trigger download\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      // Clean up\n      window.URL.revokeObjectURL(url);\n    } catch (error: any) {\n      console.error('Error downloading .ics file:', error);\n      throw new Error('Failed to download calendar file');\n    }\n  }\n\n  /**\n   * Open calendar provider in new tab\n   * @param url - Calendar provider URL\n   */\n  openCalendarProvider(url: string): void {\n    window.open(url, '_blank', 'noopener,noreferrer');\n  }\n\n  /**\n   * Check if calendar integration is supported\n   * @returns boolean indicating support\n   */\n  isCalendarIntegrationSupported(): boolean {\n    // Check if we're in a browser environment\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n  }\n\n  /**\n   * Get user's preferred calendar provider from localStorage\n   * @returns string with preferred provider or null\n   */\n  getPreferredCalendarProvider(): string | null {\n    if (!this.isCalendarIntegrationSupported()) return null;\n    \n    try {\n      return localStorage.getItem('preferredCalendarProvider');\n    } catch (error) {\n      console.warn('Failed to get preferred calendar provider from localStorage');\n      return null;\n    }\n  }\n\n  /**\n   * Set user's preferred calendar provider in localStorage\n   * @param provider - Calendar provider to set as preferred\n   */\n  setPreferredCalendarProvider(provider: string): void {\n    if (!this.isCalendarIntegrationSupported()) return;\n    \n    try {\n      localStorage.setItem('preferredCalendarProvider', provider);\n    } catch (error) {\n      console.warn('Failed to save preferred calendar provider to localStorage');\n    }\n  }\n\n  /**\n   * Quick add to preferred calendar provider\n   * @param eventId - Event ID\n   * @returns Promise that resolves when calendar action is complete\n   */\n  async quickAddToCalendar(eventId: string): Promise<void> {\n    const preferredProvider = this.getPreferredCalendarProvider();\n    \n    if (!preferredProvider) {\n      throw new Error('No preferred calendar provider set');\n    }\n\n    try {\n      const link = await this.getCalendarLink(eventId, preferredProvider);\n      \n      if (preferredProvider === 'ics' || preferredProvider === 'apple') {\n        // For .ics files, trigger download\n        const response = await fetch(link);\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        \n        const downloadLink = document.createElement('a');\n        downloadLink.href = url;\n        downloadLink.download = `event-${eventId}.ics`;\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n        \n        window.URL.revokeObjectURL(url);\n      } else {\n        // For web-based calendars, open in new tab\n        this.openCalendarProvider(link);\n      }\n    } catch (error: any) {\n      console.error('Error in quick add to calendar:', error);\n      throw new Error('Failed to add event to calendar');\n    }\n  }\n}\n\n// Export singleton instance\nexport const calendarService = new CalendarService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}